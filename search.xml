<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从0开始的CTF</title>
      <link href="2021/02/19/blog-sc-ctf/"/>
      <url>2021/02/19/blog-sc-ctf/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>“夺旗大赛”</p><h3 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h3><p>1.挖掘漏洞，利用漏洞进入对方电脑，拿到关键文件<br>/home/www/flag<br>/home/ctf/flag<br>dsjklsajdlksajdksadkljsadlkjslkdjsalkjdlksajdlksajdlksah</p><h3 id="比赛历史与背景"><a href="#比赛历史与背景" class="headerlink" title="比赛历史与背景"></a>比赛历史与背景</h3><p>cft<br>xcft—&gt;强网杯<br>tcft<br>defcon ctf<br>ctf线上赛<br>web 二进制 杂项<br>ctf线下赛<br>web漏洞挖掘与利用—10%<br>pwn漏洞与利用—-90%<br>赛程：32小时连续奋战<br>打攻防<br>资源：5个服务器(gamebox) ip ssh登陆进行管理<br>防止自己的机器不被攻击—打补丁<br>攻击别人拿下别人的flag—</p><p>能够访问别人的机器<br>端口扫描:nmap:22 21 23 80 443 3306。。。。<br>0-65535 short<br>111 222 333 444 555 666<br>port </p><p>121<br>231<br>131<br>前锋<br>中场<br>后卫</p><h3 id="CTF比赛需要的知识储备"><a href="#CTF比赛需要的知识储备" class="headerlink" title="CTF比赛需要的知识储备"></a>CTF比赛需要的知识储备</h3><ul><li><p>漏洞利用<br>二进制代码—木马 shellcode powershell<br>python pwn tools<br>web的机制 php js html </p></li><li><p>web漏洞挖掘能力<br>代码审计<br>调试环境</p></li><li><p>pwn漏洞挖掘<br>逆向分析<br>Linux系统知识 </p></li><li><p>漏洞利用脚本编写<br>远程触发漏洞</p></li><li><p>服务器安全运维人员<br>shell<br>python<br>Linux运维的知识 </p></li><li><p>流量分析能力<br>协议分析</p></li></ul><h3 id="CTF比赛的神器"><a href="#CTF比赛的神器" class="headerlink" title="CTF比赛的神器"></a>CTF比赛的神器</h3><ul><li><p>kali系统 2018.02 kali<br>nmap  端口扫描</p><pre><code>139 443 445 514  912</code></pre><p>searchsploit 漏洞查询<br>metaspolit 攻击框架 use exploit/windows/smb/ms17_010_eternalblue </p><p>sqlmap sql注入的批量扫描<br>hydra  ssh暴力破解<br>burpsuite sql注入的批量扫描</p></li></ul><ul><li><p>python的pwntools </p></li><li><p>ida pro —-kpathch插件 </p></li><li><p>gdb 以及插件  gef peda-gdb gdbserver (apt-get install gdbserver)</p></li><li><p>notepad++</p></li><li><p>ue winhex</p></li><li><p>wireshark</p></li><li><p>pcap python lib</p></li><li><p>秘密武器</p></li></ul><ul><li>文件监控武器 </li><li>权限检索武器</li><li>木马查杀武器</li></ul><ul><li>批量攻击框架</li><li>tly </li></ul><ul><li>菜刀</li></ul><h3 id="CTF比赛的作用"><a href="#CTF比赛的作用" class="headerlink" title="CTF比赛的作用"></a>CTF比赛的作用</h3><h2 id="Owasp-TOP-10"><a href="#Owasp-TOP-10" class="headerlink" title="Owasp TOP 10"></a>Owasp TOP 10</h2>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程原理与实践</title>
      <link href="2021/02/04/cs-network-socket/"/>
      <url>2021/02/04/cs-network-socket/</url>
      
        <content type="html"><![CDATA[<p><img src="3fca89d0-064f-422b-8909-0adea56ee9ab.jpg"></p><p>​    </p><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>&emsp;&emsp;一些关于网络编程方面的问题，该怎样回答呢？</p><ul><li>大家经常说的四层、七层，分别指的是什么？</li><li>TCP 三次握手是什么，TIME_WAIT 是怎么发生的？CLOSE_WAIT 又是什么状态？</li><li>Linux 下的 <code>epoll</code> 解决的是什么问题？如何使用 <code>epoll</code> 写出高性能的网络程序？</li><li>什么是网络事件驱动模型？<code>Reactor</code> 模式又是什么？</li></ul><p>这些问题看似简单，但想做到完全理解却并不容易。很多时候我们希望尽可能详尽地学习网络编程，但难以理清脉络。学习高性能网络编程，需要掌握两个核心要点：<strong>第一就是理解网络协议，并在这个基础上和操作系统内核配合，感知各种网络 I/O 事件；第二就是学会使用线程处理并发</strong>。本文会从实践出发，从问题的角度对知识点进行阐述。</p><p>​    </p><p>​    </p><h2 id="1-网络编程入门"><a href="#1-网络编程入门" class="headerlink" title="1. 网络编程入门"></a>1. 网络编程入门</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><h4 id="1-1-1-客户端-服务器网络模型"><a href="#1-1-1-客户端-服务器网络模型" class="headerlink" title="1.1.1 客户端 - 服务器网络模型"></a>1.1.1 客户端 - 服务器网络模型</h4><p><img src="image-20210127184051313.png"></p><ol><li>当一个客户端需要服务时，它会向服务器端发送一个请求。这个请求是按照双方约定的格式来发送的，以便保证服务器端是可以理解的</li><li>服务器端收到这个请求后，会根据双方约定的格式解释它，并且以合适的方式进行操作</li><li>服务器端完成处理请求之后，会给客户端发送一个响应，然后等待客户端的下一步操作</li><li>客户端收到响应并进行处理</li></ol><blockquote><p>区别出客户端和服务器，本质上是因为二者编程模型是不同的。<strong>需要强调的是，无论是客户端，还是服务器端，它们运行的单位都是进程，而不是机器</strong></p></blockquote><p>​    </p><p>​    </p><h4 id="1-1-2-IP和端口"><a href="#1-1-2-IP和端口" class="headerlink" title="1.1.2 IP和端口"></a>1.1.2 IP和端口</h4><h5 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h5><p>在 TCP/IP 协议栈中，IP 用来表示网络世界的地址。在一台计算机上是可以同时存在多个连接的，区分出不同的连接就需要用到端口这个概念。<strong>计算机的 IP 地址是唯一的，每个连接的端口号是不同的。</strong></p><blockquote><p>端口号是一个 16 位的整数，最多为 65536</p></blockquote><p>​    </p><h5 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h5><p>当一个客户端发起连接请求时，客户端的端口是由操作系统内核临时分配的，称为<strong>临时端口</strong>，服务器端的端口通常是一个众所周知的端口<code>Well Known Ports</code>。一个连接可以通过客户端 - 服务器端的 IP 和端口唯一确定，这叫做<strong>套接字对</strong>，按照（客户端地址、客户端端口、服务端地址、服务端端口）这样的四元组表示：</p><pre><code>（clientaddr:clientport, serveraddr: serverport)</code></pre><p><img src="image-20210127190636490.png" alt="一个客户端 - 服务器之间的连接"></p><p>​    </p><p>​    </p><h4 id="1-1-3-子网掩码"><a href="#1-1-3-子网掩码" class="headerlink" title="1.1.3 子网掩码"></a>1.1.3 子网掩码</h4><p>&emsp;&emsp;在网络 IP 划分的时候，我们需要区分两个概念：</p><ul><li><strong>网络</strong><code>network</code>：表示这组 IP 共同的部分，比如在 <strong>192.168.1.1</strong>~<strong>192.168.1.255</strong> 这个区间里，它们共同的部分是 <strong>192.168.1.0</strong></li><li><strong>主机</strong><code>host</code>：表示这组 IP 不同的部分，上面例子中 1~255 就是不同的那些部分，表示有 255 个可用的不同 IP</li></ul><blockquote><p>例如 IPv4 地址，<strong>192.0.2.12</strong>，以说前面三个 bytes 是子网，最后一个 byte 是 host，或者说 host 为 8 位，子网掩码为 <strong>192.0.2.0/24</strong>（<strong>255.255.255.0</strong>）</p></blockquote><p>​    </p><p>网络地址位数由<strong>子网掩码</strong><code>Netmask</code>决定，<strong>将 IP 地址与子网掩码进行位与操作，就能得到网络的值</strong>。</p><p><strong>注意</strong>：子网掩码的格式永远都是二进制格式：前面是一连串的 1，后面跟着一连串的 0</p><blockquote><p>如 IP <strong>192.0.2.12</strong>，使用子网掩码<strong>255.255.255.0</strong>时，网络就会是 <strong>192.0.2.12 与 255.255.255.0</strong> 得到的值：<strong>192.0.2.0</strong></p><p><strong>255.192.0.0</strong> 这样的子网掩码无法直观地知道有多少个 1，多少个 0，后来有了新的表示方法： <strong>IP /网络的位数</strong><br>如 IP <strong>192.0.2.12/30</strong>：有 30 个 1， 2 个 0，主机个数为 4</p></blockquote><p>​    </p><p>​    </p><h4 id="1-1-4-保留网段和端口"><a href="#1-1-4-保留网段和端口" class="headerlink" title="1.1.4 保留网段和端口"></a>1.1.4 保留网段和端口</h4><h5 id="保留网段"><a href="#保留网段" class="headerlink" title="保留网段"></a>保留网段</h5><p>国际标准组织在 IPv4 地址空间里面，专门划出了一些网段，这些网段不会用做公网上的 IP，而是仅仅保留做内部使用，我们把这些地址称作保留网段。</p><p>下表是三个保留网段，其可以容纳的计算机主机个数分别是 16777216 个、1048576 个和 65536 个</p><p><img src="e175c8ce-85a9-409f-aac1-b0f96c5756df.png"></p><p>​    </p><h5 id="保留端口"><a href="#保留端口" class="headerlink" title="保留端口"></a>保留端口</h5><p>保留端口就是大家约定俗成的，已经被对应服务广为使用的端口，比如 ftp 的 21 端口，ssh 的 22 端口，http 的 80 端口等。</p><p><code>glibc</code> 定义的保留端口：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Standard well-known ports.  */</span><span class="token keyword">enum</span>  <span class="token punctuation">{</span>    IPPORT_ECHO <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* Echo service.  */</span>    IPPORT_DISCARD <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* Discard transmissions service.  */</span>    IPPORT_SYSTAT <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* System status service.  */</span>    IPPORT_DAYTIME <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* Time of day service.  */</span>    IPPORT_NETSTAT <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* Network status service.  */</span>    IPPORT_FTP <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* File Transfer Protocol.  */</span>    IPPORT_TELNET <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* Telnet protocol.  */</span>    IPPORT_SMTP <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* Simple Mail Transfer Protocol.  */</span>    IPPORT_TIMESERVER <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* Timeserver service.  */</span>    IPPORT_NAMESERVER <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* Domain Name Service.  */</span>    IPPORT_WHOIS <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* Internet Whois service.  */</span>    IPPORT_MTP <span class="token operator">=</span> <span class="token number">57</span><span class="token punctuation">,</span>    IPPORT_TFTP <span class="token operator">=</span> <span class="token number">69</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* Trivial File Transfer Protocol.  */</span>    IPPORT_RJE <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">,</span>    IPPORT_FINGER <span class="token operator">=</span> <span class="token number">79</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* Finger service.  */</span>    IPPORT_TTYLINK <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">,</span>    IPPORT_SUPDUP <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* SUPDUP protocol.  */</span>    IPPORT_EXECSERVER <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* execd service.  */</span>    IPPORT_LOGINSERVER <span class="token operator">=</span> <span class="token number">513</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* rlogind service.  */</span>    IPPORT_CMDSERVER <span class="token operator">=</span> <span class="token number">514</span><span class="token punctuation">,</span>    IPPORT_EFSSERVER <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* UDP ports.  */</span>    IPPORT_BIFFUDP <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span>    IPPORT_WHOSERVER <span class="token operator">=</span> <span class="token number">513</span><span class="token punctuation">,</span>    IPPORT_ROUTESERVER <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* Ports less than this value are reserved for privileged processes.  */</span>    IPPORT_RESERVED <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* Ports greater this value are reserved for (non-privileged) servers.  */</span>    IPPORT_USERRESERVED <span class="token operator">=</span> <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h4 id="1-1-5-域名系统"><a href="#1-1-5-域名系统" class="headerlink" title="1.1.5 域名系统"></a>1.1.5 域名系统</h4><p>&emsp;&emsp;IP 协议的职责是<strong>网际互连</strong>，它在 MAC 层之上，使用 IP 地址把 MAC 编号转换成了四位数字，对物理网卡的 MAC 地址做了一层抽象，只要每个小网络在 IP 地址这个概念上达成一致，不管在 MAC 层有多大的差异，都可以接入 TCP/IP 协议栈，终汇合进整个互联网。</p><p>&emsp;&emsp;但接入互联网的计算机越来越多，IP 地址的缺点也就暴露出来了，数字形式的地址对于人类来说却既难以记忆又难以输入，于是<strong>域名系统</strong><code>Domain Name System</code>出现了，用有意义的名字来作为 IP 地址的等价替代，在 IP 地址之上再来一次抽象。</p><p>​    </p><p>​    </p><h5 id="域名的形式"><a href="#域名的形式" class="headerlink" title="域名的形式"></a>域名的形式</h5><p>​    </p><p>&emsp;&emsp;在 DNS 中，<strong>域名</strong><code>Domain Name</code>又称为<strong>主机名</strong><code>Host</code>，全球域名按照从大到小的结构，形成了一棵树状结构。实际访问一个域名时，是从最底层开始写起。域名用 <code>.</code> 分隔成多个单词，级别从左到右逐级升高，最右边的被称为<strong>顶级域名</strong>。</p><p><img src="image-20210129151658062.png"></p><p>&emsp;&emsp;域名不仅能够代替 IP 地址，还有许多其他的用途。在Web服务器中，域名可以用来标识虚拟主机，决定由哪个虚拟主机来对外提供服务，比如在 Nginx 里就会使用<code>server_name</code>指令：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true"># 监听 80 端口    </span>    <span class="token keyword">server_name</span>  a<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 主机名是 a.test.com  </span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>域名<strong>本质上是个名字空间系统</strong>，使用多级域名就可以划分出不同的国家、地区、组织、公司、部门，每个域名都是独一无二的，可以作为一种身份的标识。因为这个特性，域名也被扩展到了其他应用领域，比如 Java 的包机制采用域名作为命名空间。 <code>XML</code> 里使用 <code>URI</code> 作为名字空间，也间接使用了域名。</p><p>​    </p><h5 id="域名的解析"><a href="#域名的解析" class="headerlink" title="域名的解析"></a>域名的解析</h5><p>​    </p><p>&emsp;&emsp;IP 地址必须转换成 MAC 地址才能访问主机，想要使用 TCP/IP 协议来通信要使用 IP 地址，所以需要把域名做一个转换，<strong>映射</strong>到它的真实 IP，这就是<strong>域名解析</strong>。全世界有几亿站点，几十亿网民，而每天网络上的 HTTP 流量更是天文数字。这些请求绝大多数都是基于域名来访问网站的，所以 DNS 就成了互联网的重要基础设施，必须要保证域名解析稳定可靠、快速高效。</p><p>&emsp;&emsp;DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：</p><ol><li><strong>根域名服务器</strong> <code>Root DNS Server</code>：管理顶级域名服务器，返回“<code>com</code>、<code>net</code>、<code>cn</code>等顶级域名服务器的 IP 地址</li><li><strong>顶级域名服务器</strong> <code>Top-level DNS Server</code>：管理各自域名下的权威域名服务器，比如 <code>com</code> 顶级域名服务器可以返回 <code>apple.com</code> 域名服务器的 IP 地址</li><li><strong>权威域名服务器</strong> <code>Authoritative DNS Server</code>：管理自己域名下主机的 IP 地址，比如 <code>apple.com</code> 权威域名服务器可以返回 <code>www.apple.com</code> 的 IP 地址</li></ol><p>&emsp;&emsp;根域名服务器是关键，它必须是众所周知的。 目前全世界共有 13 组根域名服务器，又有数百台的镜像，保证一定能够被访问到。有了这个系统以后，任何一个域名都可以<strong>在这个树形结构里从顶至下进行查询</strong>，就好像是把域名从右到左顺序走了一遍，终就获得了域名对应的 IP 地址。</p><blockquote><ol><li>目前全世界有 13 组根 DNS 服务器，因为DNS协议还有UDP协议里包大小的限制，只有512字节，再除以DNS记录长度，最多15组，再去掉buffer</li><li>HTTP 协议中并没有明确要求必须使用 DNS，但实际上为了方便访问互联网上的 Web 服务器，通常都会使用 DNS 来定位或标记主机名，间接地把 DNS 与 HTTP 绑在了一起</li></ol></blockquote><p>​    </p><p>&emsp;&emsp;在核心 DNS 系统之外，还有两种手段用来减轻域名解析的压力，并且能够更快地获取结果，基本思路就是<strong>缓存</strong></p><ol><li>大公司、网络运行商都会建立自己的 DNS 服务器，作为用户 DNS 查询的代理，代替用户访问核心 DNS 系统。这些服务器被称为<strong>非权威域名服务器</strong>，可以缓存之前的查询结果，如果已经有了记录，就无需再向根服务器发起查询，直接返回对应的 IP 地址。这些 DNS 服务器的数量要比核心系统的服务器多很多，而且大多部署在离用户很近的地方。比较知名的 DNS 有 Google 的<strong>8.8.8.8</strong>，Microsoft 的<strong>4.2.2.1</strong>，还有 CloudFlare 的<strong>1.1.1.1</strong>等。</li><li>操作系统里也会对 DNS 解析结果做缓存，直接在操作系统里就可以拿到 IP 地址。另外，操作系统里还有一个特殊的<strong>主机映射</strong>文件，通常是一个可编辑的文本，在 Linux 里是<code>/etc/hosts</code>，在 Windows 里是<code>C:\WINDOWS\system32\drivers\etc\hosts</code>，如果操作系统在缓存里找不到 DNS 记录，就会找这个文件。</li></ol><blockquote><p><strong>总结</strong>：DNS 是一个树状的分布式查询系统，为了提高查询效率，外围有多级的缓存</p></blockquote><p><img src="image-20210129164918773.png" alt="现在的DNS架构"></p><p>​    </p><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><ol><li><p>重定向，对外服务的域名不变，而主机的 IP 地址变动。当主机有情况需要下线或迁移时，可以更改 DNS 记录让域名指向其他机器。</p></li><li><p><strong>基于域名实现的负载均衡</strong></p><p>域名解析可以返回多个 IP 地址，客户端收到多个 IP 地址后，使用轮询算法依次向服务器发起请求，实现负载均衡。</p><p>域名解析可以配置内部的策略，返回离客户端近的主机或者当前服务质量好的主机，在 DNS 端把请求分发到不同的服务器。</p></li></ol><p>​    </p><h4 id="1-1-6-数据报和字节流"><a href="#1-1-6-数据报和字节流" class="headerlink" title="1.1.6 数据报和字节流"></a>1.1.6 数据报和字节流</h4><p>&emsp;&emsp;<strong>TCP</strong>又被叫做<strong>字节流套接字</strong><code>Stream Socket</code>，<strong>UDP</strong> 又被叫做<strong>数据报套接字</strong><code>Datagram Socket</code>，一般以<code>SOCK_STREAM</code>与<code>SOCK_DGRAM</code>分别表示 TCP 和 UDP 套接字。<code>Datagram Sockets</code> 有时称为<strong>无连接的 sockets</strong> <code>connectionless sockets</code></p><p>&emsp;&emsp;<strong>字节流套接字是可靠的</strong>，双向连接的通讯串流。比如以<code>1-2-3</code>的顺序将字节流输出到套接字上，它们在另一端一定会以<code>1-2-3</code>的顺序抵达，且不会出错。TCP 通过诸如<strong>连接管理，拥塞控制，数据流与窗口管理，超时和重传</strong>等一系列精巧而详细的设计，提供了高质量的端到端的通信方式。</p><p>&emsp;&emsp;<strong>数据报套接字</strong>也可以做到更高的可靠性，只不过这种可靠性，需要应用程序进行设计处理，比如对报文进行编号，设计 <code>Request-Ack</code> 机制，再加上重传等，在一定程度上可以达到更为高可靠的 UDP 程序。</p><p>​    </p><p>​    </p><h4 id="1-1-7-其他"><a href="#1-1-7-其他" class="headerlink" title="1.1.7 其他"></a>1.1.7 其他</h4><p>&emsp;&emsp;什么是网络</p><ul><li>在计算机领域中，网络是信息传输、接收、共享的虚拟平台</li><li>通过它把各个点、面、体的信息联系到一起，可以进行数据传递，从而实现这些资源的共享</li></ul><p>&emsp;&emsp;什么是网络编程</p><ul><li>大方面说就是对信息的发送到接受</li><li>通过操作相应API调度计算机硬件资源，并利用传输管道（网线）进行数据交换的过程</li></ul><p>​    </p><p>​    </p><h3 id="1-2-网络分层"><a href="#1-2-网络分层" class="headerlink" title="1.2 网络分层"></a>1.2 网络分层</h3><p>&emsp;&emsp;网络为什么要分层？因为复杂的程序都要分层。网络包的格式很复杂，处理网络包的程序也很复杂。<strong>复杂的程序都要分层，这是程序设计的要求。</strong>比如，复杂的电商还会分数据库层、缓存层、Compose 层、Controller 层和接入层，每一层专注做本层的事情。</p><p>​    </p><p>​    </p><h4 id="1-2-1-TCP-IP-网络分层模型"><a href="#1-2-1-TCP-IP-网络分层模型" class="headerlink" title="1.2.1 TCP/IP 网络分层模型"></a>1.2.1 TCP/IP 网络分层模型</h4><p><img src="image-20210128181222554.png"></p><p>第一层：<strong>链接层</strong><code>link layer</code>，负责在以太网、WiFi 这样的底层网络上发送原始数据包，工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时也叫 <code>MAC</code> 层。<br>第二层：<strong>网际层</strong>或<strong>网络互连层</strong><code>internet layer</code>，IP 协议就处在这一层，可以在链接层的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只需要把 IP 地址翻译成 MAC 地址。<br>第三层：<strong>传输层</strong><code>transport layer</code>，这个层次协议的职责是保证数据在 IP 地址标记的两点之间可靠地传输，是 TCP 协议工作的层次。<br>第四层：<strong>应用层</strong><code>application layer</code>，有各种面向具体应用的协议。如 <code>Telnet</code>、<code>SSH</code>、<code>FTP</code>、<code>SMTP</code>、<code>HTTP</code> 等。</p><blockquote><p>MAC 层的传输单位是<strong>帧</strong><code>frame</code>，IP 层的传输单位是<strong>包</strong><code>packet</code>，TCP 层的传输单位是<strong>段</strong><code>segment</code>，HTTP 的传输单位则是<strong>消息</strong>或<strong>报文</strong><code>message</code>。但这些名词并没有什么本质的区分，可以统称为<strong>数据包</strong></p></blockquote><p>​    </p><h4 id="1-2-2-OSI-网络分层模型"><a href="#1-2-2-OSI-网络分层模型" class="headerlink" title="1.2.2 OSI 网络分层模型"></a>1.2.2 OSI 网络分层模型</h4><p><img src="image-20210128182157585.png"></p><p>第一层：<strong>物理层</strong>，网络的物理形式，例如电缆、光纤、网卡、集线器等等<br>第二层：<strong>数据链路层</strong>，它基本相当于 TCP/IP 的链接层<br>第三层：<strong>网络层</strong>，相当于 TCP/IP 里的网际层<br>第四层：<strong>传输层</strong>，相当于 TCP/IP 里的传输层<br>第五层：<strong>会话层</strong>，维护网络中的连接状态，即保持会话和同步<br>第六层：<strong>表示层</strong>，把数据转换为合适、可理解的语法和语义<br>第七层：<strong>应用层</strong>，面向具体的应用传输数据</p><p>​    </p><p>&emsp;&emsp;TCP/IP 是一个纯软件的栈，没有网络应有的最根基的电缆、网卡等物理设备的位置。而 OSI 则补足了这个缺失，在理论层面上描述网络更加完整。OSI 为每一层标记了明确了编号，最底层是一层，最上层是七层，而 TCP/IP 的层次从来只有名字而没有编号。</p><p>​    </p><p><img src="image-20210128182446366.png" alt="对应关系"></p><p>&emsp;&emsp;OSI 的分层模型在四层以上分的太细，而 TCP/IP 实际应用时的会话管理、编码转换、压缩等和具体应用经常联系的很紧密，很难分开。</p><blockquote><p><strong>四层负载均衡</strong>：工作在传输层上，基于 TCP/IP 协议的特性，例如 IP 地址、端口号等实现对后端服务器的负载均衡<br><strong>七层负载均衡</strong>：工作在应用层上，看到的是 HTTP 协议，解析 HTTP 报文里的 URI、主机名、资源类型等数据，再用适当的策略转发给后端服务器<br><strong>三层路由</strong>：设备工作在ip层，报文经过有路由功能的设备时，设备分析报文中的头部信息，拿到ip地址，根据网段范围，进行本地转发或选择下一个网关<br><strong>二层转发</strong>：设备工作在链路层，帧在经过交换机设备时，检查帧的头部信息，拿到目标mac地址，进行本地转发和广播</p></blockquote><p>​    </p><p>​    </p><h3 id="1-3-Socket套接字"><a href="#1-3-Socket套接字" class="headerlink" title="1.3 Socket套接字"></a>1.3 Socket套接字</h3><h4 id="1-3-1-socket-是什么？"><a href="#1-3-1-socket-是什么？" class="headerlink" title="1.3.1 socket 是什么？"></a>1.3.1 socket 是什么？</h4><p>&emsp;&emsp;<code>socket</code> 中文翻译为<strong>套接字</strong>，有时也叫<strong>套接口</strong>。这个单词的原意是“插口”“插槽”， 在网络编程中寓意是可以通过插口接入的方式，快速完成网络连接和数据收发。<code>socket</code>也可以看做是对物理世界的直接映射。</p><p><img src="image-20210202195509023.png" alt="客户端和服务器工作核心逻辑"></p><p>&emsp;&emsp;右侧的图显示的是服务器端初始化的过程：首先初始化 <code>socket</code>，之后需要执行 <code>bind</code> 函数，将自己的服务能力绑定在一个固定的地址和端口上，紧接着执行 <code>listen</code> 操作，将原先的 <code>socket</code> 转化为服务端的 <code>socket</code>，服务端最后阻塞在 <code>accept</code> 上，此时，服务器端已经准备就绪，等待客户端的请求。</p><p>&emsp;&emsp;客户端需要先初始化 <code>socket</code>，再执行 <code>connect</code> 向服务器端的地址和端口发起连接请求。这个过程就是<strong>TCP 三次握手</strong><code>Three-way Handshake</code>。三次握手完成，客户端和服务器端建立连接，就进入了数据传输过程。<strong>一旦连接建立，数据的传输就不再是单向的，而是双向的，这是 TCP 的一个显著特性</strong>。</p><p>&emsp;&emsp;当客户端完成和服务器端的交互后，需要和服务器端断开连接时，就会执行 <code>close</code> 函数，操作系统内核此时会通过原先的连接链路向服务器端发送一个 <code>FIN</code> 包，服务器收到之后执行被动关闭，这时候整个链路处于半关闭状态，此后服务器端也会执行 <code>close</code> 函数，整个链路才会真正关闭。<strong>半关闭的状态下，发起 close 请求的一方在没有收到对方 FIN 包之前都认为连接是正常的</strong>，而在全关闭的状态下，双方都感知连接已经关闭。</p><blockquote><p>&emsp;&emsp;具体来说，客户端进程向操作系统内核发起 <code>write</code> 字节流写操作，内核协议栈将字节流通过网络设备传输到服务器端，服务器端从内核得到信息，将字节流从内核读入到进程中，并开始业务逻辑的处理，完成之后，服务器端再将得到的结果以同样的方式写给客户端。</p></blockquote><p>​    </p><p>&emsp;&emsp;以上所有的操作，都是通过 <code>socket</code> 来完成的。无论是 <code>connect</code>还是 <code>accept</code>，或者 <code>read/write</code> 操作等，<strong>socket 是用来建立连接，传输数据的唯一途径</strong>。</p><p>​    </p><p>​    </p><h4 id="1-3-2-直观解释"><a href="#1-3-2-直观解释" class="headerlink" title="1.3.2 直观解释*"></a>1.3.2 直观解释*</h4><p>&emsp;&emsp;可以把整个 TCP 的网络交互和数据传输想象成打电话，<strong>socket 就好像是手里的电话机</strong>，<strong>connect 就好比拿着电话机拨号</strong>，而服务器端的 <strong>bind 就好比是将电话号码和我们家里的电话机绑定</strong>，这样别人就可以用这个号码找到你，<strong>listen 就好似接上线后听到了响铃</strong>，<strong>accept 就好比是被叫的一方拿起电话开始应答</strong>。至此，三次握手就完成了，连接建立完毕。</p><p>&emsp;&emsp;接下来，拨打电话的人开始说话：“你好。”这时就进入了 write，接收电话的人听到的过程可以想象成 read（听到并读出数据），并且开始应答，双方就进入了 read/write 的数据传输过程。</p><p>&emsp;&emsp;最后，拨打电话的人完成了此次交流，挂上电话，对应的操作可以理解为 close，接听电话的人知道对方已挂机，也挂上电话，也是一次 close。</p><p>&emsp;&emsp;<strong>在整个电话交流过程中，电话是我们可以和外面通信的设备，对应到网络编程的世界里，socket 也是我们可以和外界进行网络通信的途径。</strong></p><p>​    </p><p>​    </p><h4 id="1-3-3-socket发展历史"><a href="#1-3-3-socket发展历史" class="headerlink" title="1.3.3 socket发展历史*"></a>1.3.3 socket发展历史*</h4><p>&emsp;&emsp;<code>socket</code> 是加州大学伯克利分校的研究人员在 20 世纪 80 年代早期提出的，所以也被叫做伯克利套接字。研究者们设想<strong>用 socket 的概念屏蔽掉底层协议栈的差别</strong>。第一版实现 <code>socket</code> 的就是 <code>TCP/IP</code> 协议，最早是在 <strong>BSD 4.2 Unix 内核</strong>上实现了 socket。</p><p>&emsp;&emsp;很快人们就发现这么一个概念带来了网络编程的便利，于是有更多人也接触到了 socket 的概念。Linux 作为 Unix 系统的一个开源实现，很早就从头开发实现了 TCP/IP 协议，伴随着 socket 的成功，Windows 也引入了 socket 的概念。于是在今天的世界里，socket 成为网络互联互通的标准。</p><p>​    </p><p>​    </p><h4 id="1-3-4-套接字地址格式"><a href="#1-3-4-套接字地址格式" class="headerlink" title="1.3.4 套接字地址格式"></a>1.3.4 套接字地址格式</h4><p>&emsp;&emsp;<strong>在使用套接字时，首先要解决通信双方寻址的问题，</strong>我们需要套接字的地址建立连接。下面是套接字的<strong>通用</strong>地址结构（适用于多种地址族）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* POSIX.1g 规范规定了地址族为 2 字节的值.  */</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> sa_family_t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 描述通用套接字地址  */</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">{</span>    sa_family_t sa_family<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 地址族.  16-bit*/</span>    <span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 具体的地址值 112-bit */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个结构体里第一个字段是<strong>地址族</strong>，表示<strong>使用什么样的方式对地址进行解释和保存</strong>。地址族在 <code>glibc</code> 里的定义非常多，常用的有：</p><ul><li><code>AF_LOCAL</code>：表示的是本地地址，对应的是 <code>Unix</code> 套接字，这种情况一般用于本地 <code>socket</code> 通信，很多情况下也可以写成 <code>AF_UNIX</code>、<code>AF_FILE</code></li><li><code>AF_INET</code>：因特网使用的 IPv4 地址</li><li><code>AF_INET6</code>：因特网使用的 IPv6 地址</li></ul><p>&emsp;&emsp;<code>AF_</code> 含义是 <code>Address Family</code>，很多情况下也会看到以 <code>PF_</code> 表示的宏，含义是 <code>Protocol Family</code>（协议族）。用 AF_xxx 这样的值来初始化 socket 地址，用 PF_xxx 这样的值来初始化 socket。</p><p>在 <code>&lt;sys/socket.h&gt;</code> 头文件中可以看到这两个值是一一对应的。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 各种地址族的宏定义  */</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_UNSPEC PF_UNSPEC</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_LOCAL  PF_LOCAL</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_UNIX   PF_UNIX</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_FILE   PF_FILE</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_INET   PF_INET</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_AX25   PF_AX25</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_IPX    PF_IPX</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_APPLETALK  PF_APPLETALK</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_NETROM PF_NETROM</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_BRIDGE PF_BRIDGE</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_ATMPVC PF_ATMPVC</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_X25    PF_X25</span><span class="token macro property">#<span class="token directive keyword">define</span> AF_INET6  PF_INET6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h5 id="IPv4-套接字格式地址"><a href="#IPv4-套接字格式地址" class="headerlink" title="IPv4 套接字格式地址*"></a>IPv4 套接字格式地址*</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* IPV4 套接字地址，32bit 值.  */</span><span class="token keyword">typedef</span> uint32_t in_addr_t<span class="token punctuation">;</span><span class="token keyword">struct</span> in_addr  <span class="token punctuation">{</span>    in_addr_t s_addr<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 描述 IPV4 的套接字地址格式  */</span><span class="token keyword">struct</span> sockaddr_in  <span class="token punctuation">{</span>    sa_family_t sin_family<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 16-bit */</span>    in_port_t sin_port<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 端口口  16-bit*/</span>    <span class="token keyword">struct</span> in_addr sin_addr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Internet address. 32-bit */</span>    <span class="token comment" spellcheck="true">/* 这里仅仅用作占位符，不做实际用处  */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sockaddr_in</code>与 <code>sockaddr</code> 一样，都有一个 16-bit 的 <code>sin_family</code> 字段，对于 IPv4 来说这个值就是 <code>AF_INET</code>。端口号最多是 16-bit，最大支持 $2^{16}$= 65536，支持寻址的端口号最多就是 65535。</p><p>实际的 IPv4 地址是一个 32-bit 的字段，最多支持的地址数就是$2^{32}$，大约是 42 亿，但随着互联网发展，全球接入的设备越来越多，地址渐渐显得不太够用了。</p><p>​    </p><h5 id="IPv6-套接字地址格式"><a href="#IPv6-套接字地址格式" class="headerlink" title="IPv6 套接字地址格式*"></a>IPv6 套接字地址格式*</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sockaddr_in6  <span class="token punctuation">{</span>    sa_family_t sin6_family<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 16-bit */</span>    in_port_t sin6_port<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 传输端口号 # 16-bit */</span>    uint32_t sin6_flowinfo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IPv6 流控信息 32-bit*/</span>    <span class="token keyword">struct</span> in6_addr sin6_addr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* IPv6 地址 128-bit */</span>    uint32_t sin6_scope_id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IPv6 域 ID 32-bit */</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个结构体长度是 28 个字节，地址族是 <code>AF_INET6</code>，端口同 IPv4 地址一样，关键的地址从 32 位升级到 128 位，完全解决了寻址数字不够的问题。（其中流控信息和域 IP 这两个字段，一个在 <code>glibc</code> 的官网上没出现，另一个是当前未使用的字段）</p><p>​    </p><p>无论 IPv4 还是 IPv6 的地址格式都是因特网套接字的格式，还有一种本地套接字格式，用来做为本地进程间的通信，即 <code>AF_LOCAL</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sockaddr_un <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> sun_family<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 固定为 AF_LOCAL */</span>    <span class="token keyword">char</span> sun_path<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 路径名 */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为什么本地套接字格式不需要端口号，而 IPv4 和 IPv6 套接字格式却需要端口号呢？</p><p><strong>一切皆文件，socket也是文件</strong>。socket基于文件操作，<strong>因此只需要根据文件路径便可区分，不需要使用端口</strong>。也正因如此，IPv4 和 IPv6 套接字地址结构的长度是固定的，而本地地址是可变的。</p></blockquote><p>​    </p><h5 id="套接字地址格式比较"><a href="#套接字地址格式比较" class="headerlink" title="套接字地址格式比较"></a>套接字地址格式比较</h5><p><img src="image-20210401203448576.png"></p><p>​    </p><p>​    </p><h3 id="1-4-TCP建立连接"><a href="#1-4-TCP建立连接" class="headerlink" title="1.4 TCP建立连接"></a>1.4 TCP建立连接</h3><h4 id="1-4-1-服务端准备连接"><a href="#1-4-1-服务端准备连接" class="headerlink" title="1.4.1 服务端准备连接"></a>1.4.1 服务端准备连接</h4><p>​    </p><h5 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h5><p>要创建一个可用的套接字，需要使用下面的函数：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>domain</code> 指 <code>PF_INET</code>、<code>PF_INET6</code> 、 <code>PF_LOCAL</code> 等，表示什么样的套接字</p><p><code>type</code> 可用的值：</p><ul><li><code>SOCK_STREAM</code>: 表示字节流，对应 <code>TCP</code></li><li><code>SOCK_DGRAM</code>： 表示数据报，对应 <code>UDP</code></li><li><code>SOCK_RAW</code>: 表示原始套接字</li></ul><p><code>protocol</code> 原本是用来指定通信协议的，但现在基本废弃。因为协议已经通过前面两个参数指定完成。目前一般写成 0 即可。</p><p>​    </p><p>​    </p><h5 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h5><p>​    </p><p>创建出来的套接字如果需要被使用，就需要调用 <code>bind</code> 函数<strong>把套接字和套接字地址绑定</strong>，调用 bind 函数的方式如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> sockaddr <span class="token operator">*</span> addr<span class="token punctuation">,</span> socklen_t len<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>sockaddr * addr</code>通用地址格式，但是实际上传入的参数可能是 IPv4、IPv6 或者本地套接字格式。</p><p><code>len</code> 字段表示的就是传入的地址长度，是一个可变值。<code>bind</code> 函数会根据 <code>len</code> 字段判断传入的参数 <code>addr</code> 该怎么解析。</p><blockquote><p>BSD 设计套接字的时候 C 语言还没有<code>void *</code>的支持，所以 BSD 的设计者们设计了通用地址格式来作为支持 <code>bind</code> 和 <code>accept</code> 等这些函数的参数。对使用者来说，每次需要将 IPv4、IPv6 或者本地套接字格式转化为通用套接字格式。</p></blockquote><p>​    </p><p>&emsp;&emsp;设置 bind 时对地址和端口可以有多种处理方式：</p><p>&emsp;&emsp;<strong>把地址设置成本机 IP 地址</strong>，相当于告诉系统内核仅对目标 IP 是本机 IP 地址的包进行处理。对部署前 IP 地址不确定的问题，可以利用<strong>通配地址</strong>的能力帮助解决。比如一台机器有两块网卡，那么向这两个 IP 请求的请求包都会被应用程序处理。</p><p>IPv4 地址使用 <code>INADDR_ANY</code> 、 IPv6使用 <code>IN6ADDR_ANY</code> 来完成通配地址的设置。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sockaddr_in name<span class="token punctuation">;</span>name<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span> <span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IPV4 通配地址 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    </p><p>&emsp;&emsp;如果把端口设置成 0，就相当于把端口的选择权<strong>交给操作系统内核</strong>来处理，操作系统内核会根据一定的算法选择一个空闲的端口，完成套接字的绑定。这在服务器端不常使用，一般来说服务器端的程序要绑定到一个众所周知的端口上。</p><p>​    </p><p>一个初始化 IPv4 TCP 套接字的例子:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token keyword">int</span> <span class="token function">make_socket</span> <span class="token punctuation">(</span>uint16_t port<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> sock<span class="token punctuation">;</span>  <span class="token keyword">struct</span> sockaddr_in name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 创建字节流类型的 IPV4 socket. */</span>  sock <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sock <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">perror</span> <span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span> <span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 绑定到 port 和 ip. */</span>  name<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IPV4 */</span>  name<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 指定端口 */</span>  name<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span> <span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 通配地址 */</span>  <span class="token comment" spellcheck="true">/* 把 IPV4 地址转换成通用地址格式，同时传递长度 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span> <span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">perror</span> <span class="token punctuation">(</span><span class="token string">"bind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span> <span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> sock<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><h5 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h5><p>​    </p><p>&emsp;&emsp;初始化创建的套接字其目的是主动发起请求（通过调用 connect 函数）。而通过 listen 函数可以将原来的”主动”套接字转换为”被动”套接字，告诉操作系统内核<strong>等待用户请求</strong>，内核会为此做好接收用户请求的准备，比如完成连接队列。</p><p><code>listen</code> 函数的原型：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">listen</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socketfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <code>socketfd</code> 为套接字描述符</p><p> <code>backlog</code>为未完成连接队列的大小，这个参数的大小决定了可以接收的并发数目。这个参数越大，并发数目理论上也会越大。但是参数过大也会占用过多的系统资源，一些系统如 Linux 不允许修改这个参数。</p><p>​    </p><p>​    </p><h5 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h5><p>​    </p><p>&emsp;&emsp;当客户端的连接请求到达时，服务器端应答成功，连接建立，这时操作系统内核要把这个事件通知到应用程序，让应用程序感知到这个连接。<strong>accept 函数的作用就是连接建立之后，操作系统内核和应用程序之间的桥梁。</strong></p><p>accept 函数原型是：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> listensockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>cliaddr<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <code>listensockfd</code> 是套接字，可以称为 listen 套接字，因为这就是前面通过 bind，listen 一系列操作而得到的套接字。</p><p>返回值有两个部分，第一个部分 <code>cliadd</code> 是通过指针方式获取的客户端的地址，<code>addrlen</code> 告诉地址的大小；另一部分是函数的返回值，是一个全新的描述字，代表了与客户端的连接。</p><p><strong>注意</strong>：有两个套接字描述字，第一个是监听套接字描述字 <code>listensockfd</code>，它是作为输入参数存在；第二个是返回的已连接套接字描述字。</p><p>​    </p><blockquote><p>为什么要把两个套接字分开呢？</p><p>网络程序的一个重要特征是并发处理，不可能一个应用程序运行之后只能服务一个客户</p></blockquote><p>&emsp;&emsp;<strong>监听套接字一直都存在，直到这个监听套接字关闭</strong>。一个客户和服务器连接成功，完成了 TCP 三次握手，操作系统内核就为其生成一个<strong>已连接套接字</strong>，让应用服务器使用这个已连接套接字和客户进行通信处理。如果服务器完成了对这个客户的服务，关闭的就是<strong>已连接套接字</strong>，这样就完成了 TCP 连接的释放<strong>。这时候释放的只是这一个客户连接</strong>。最重要的是，<strong>监听套接字一直都处于监听状态，等待新的客户请求到达并服务</strong>。</p><p>​    </p><p>​    </p><h4 id="1-4-2-客户端发起连接"><a href="#1-4-2-客户端发起连接" class="headerlink" title="1.4.2 客户端发起连接"></a>1.4.2 客户端发起连接</h4><p>第一步建立一个套接字，方法和前面一样，客户端调用 <code>connect</code> 向服务端发起请求。</p><p>​    </p><h5 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h5><p>客户端和服务器端的连接建立是通过 <code>connect</code> 函数完成的。 <code>connect</code> 的构建函数：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>servaddr<span class="token punctuation">,</span> socklen_t addrlen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <code>sockfd</code> 是连接套接字，通过 <code>socket</code> 函数创建。 <code>servaddr</code> 和 <code>addrlen</code> 分别代表<strong>指向套接字地址结构的指针和该结构的大小</strong>。<strong>套接字地址结构必须含有服务器的 IP 地址和端口号</strong>。</p><p>&emsp;&emsp;在调用 <code>connect</code> 前不是必须调用 <code>bind</code> 函数，因为如果需要的话，内核会确定源 IP 地址，并按照一定的算法选择一个临时端口作为源端口。</p><p>&emsp;&emsp;如果是 TCP 套接字，那么调用 <code>connect</code> 函数将激发 TCP 的三次握手过程，而且仅在连接建立成功或出错时才返回。</p><p>​    </p><p><strong>补充</strong>：</p><p>出错返回可能有以下几种情况：</p><ol><li>三次握手无法建立，客户端发出的 <code>SYN</code> 包没有任何响应，返回 <code>TIMEOUT</code> 错误。这种情况比较常见的原因是对应的服务端 IP 写错。</li><li>客户端收到了 <code>RST</code>（复位）回答，这时候客户端会立即返回 <code>CONNECTION REFUSED</code> 错误。这种情况比较常见于客户端发送连接请求时的请求端口写错，因为 <code>RST</code> 是 TCP 在发生错误时发送的一种 TCP 分节。（产生 RST 的三个条件是：目的地为某端口的 SYN 到达，然而该端口上没有正在监听的服务器；TCP 想取消一个已有连接；TCP 接收到一个根本不存在的连接上的分节）</li><li>客户发出的 SYN 包在网络上引起了<code>destination unreachable</code>，目的不可达的错误。这种情况比较常见的原因是客户端和服务器端路由不通。</li></ol><p>根据不同的返回值可以做进一步的排查。</p><p>​    </p><p>​    </p><h4 id="1-4-3-TCP-三次握手的解读"><a href="#1-4-3-TCP-三次握手的解读" class="headerlink" title="1.4.3 TCP 三次握手的解读"></a>1.4.3 TCP 三次握手的解读</h4><p>下面结合服务端和客户端连接的主要函数讲解 TCP 三次握手的过程。</p><p><img src="image-20210206140648582.png" alt="TCP 三次握手"></p><p>服务端通过 <code>socket</code>、<code>bind</code> 和 <code>listen</code> 完成了被动套接字的准备工作，然后调用 <code>accept</code>，就会<strong>阻塞</strong>在这里，等待客户端的连接</p><p>客户端通过 <code>socket</code> 和 <code>connect</code> 函数调用之后也会阻塞。接下来是<strong>操作系统内核网络协议栈</strong>工作，具体的过程：</p><ol><li>客户端的协议栈向服务器端发送了 SYN 包，并告诉服务器端当前发送序列号 <code>j</code>，客户端进入 <code>SYNC_SENT</code> 状态</li><li>服务器端的协议栈收到包之后进行 ACK 应答，应答的值为 <code>j+1</code>，<strong>表示对 SYN 包 j 的确认</strong>，同时服务器也发送一个 SYN 包，告诉客户端当前我的发送序列号为 <code>k</code>，服务器端进入 <code>SYNC_RCVD</code> 状态</li><li>客户端协议栈收到 ACK 之后，应用程序从 <code>connect</code> 调用返回，表示客户端到服务器端的<strong>单向连接建立成功</strong>，客户端的状态为 <strong>ESTABLISHED</strong>，同时客户端协议栈也会对服务器端的 SYN 包进行应答，应答数据为 <code>k+1</code></li><li>应答包到达服务器端后，服务器端协议栈使得 <code>accept</code> 阻塞调用返回，这个时候服务器端到客户端的单向连接也建立成功，服务器端也进入 <code>ESTABLISHED</code> 状态</li></ol><p>​    </p><p>​    </p><p>形象的比喻：有 A 和 B 想进行通话</p><ul><li>A 先对 B 说：“喂，你在么？我在的，我的口令是 j ”</li><li>B 收到之后大声回答：“我收到你的口令 j 并准备好了，你准备好了吗？我的口令是 k ”</li><li>A 收到之后也大声回答：“我收到你的口令 k 并准备好了，我们开始吧 ”</li></ul><blockquote><p>信道不可靠，但是通信双发需要就某个问题达成一致。而要解决这个问题, 无论在消息中包含什么信息，三次通信是理论上的最小值</p></blockquote><h3 id="1-5-TCP-Socket进行读写"><a href="#1-5-TCP-Socket进行读写" class="headerlink" title="1.5 TCP Socket进行读写"></a>1.5 TCP Socket进行读写</h3><h4 id="1-5-1-发送数据"><a href="#1-5-1-发送数据" class="headerlink" title="1.5.1 发送数据"></a>1.5.1 发送数据</h4><p>发送数据时常用的有三个函数 <code>write</code>、<code>send</code> 和 <code>sendmsg</code>，每个函数都是单独使用的，使用的场景略有不同</p><pre class="line-numbers language-c"><code class="language-c">ssize_t <span class="token function">write</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socketfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span>ssize_t <span class="token function">send</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socketfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>ssize_t <span class="token function">sendmsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> msghdr <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一个函数是常见的文件写函数，如果把 <code>socketfd</code> 换成文件描述符，就是普通的文件写入。</p><p>第二个函数是想<strong>指定选项</strong>，发送带外数据时使用。<strong>带外数据</strong>，是一种基于 TCP 协议的紧急数据，用于客户端 - 服务器在特定场景下的紧急处理。</p><p>第三个函数是想<strong>指定多重缓冲区传输数据</strong>时使用，以结构体 <code>msghdr</code> 的方式发送数据。</p><p>&emsp;&emsp;在套接字描述符上调用 <code>write</code> 函数，和在普通文件描述符上调用 <code>write</code> 函数两者的表现形式是一样（都是通过描述符句柄写入指定的数据），但内在的区别不一样。</p><ol><li>对于普通文件描述符而言，一个文件描述符代表了打开的一个文件句柄，通过调用 <code>write</code> 函数，操作系统内核帮我们不断地往文件系统中写入字节流。注意，写入的字节流大小通常和输入参数 <code>size</code> 的值是相同的，否则表示出错。</li><li>对于套接字描述符而言，它代表了一个双向连接，在套接字描述符上调用 <code>write</code> 写入的字节数<strong>有可能</strong>比请求的数量少，这在普通文件描述符情况下是不正常的。</li></ol><p>&emsp;&emsp;产生这个现象的原因在于操作系统内核为读取和发送数据做了很多我们表面上看不到的工作。接下以 <code>write</code> 函数举例，重点阐述发送缓冲区的概念。</p><p>​    </p><p>​    </p><h4 id="1-5-2-发送缓冲区"><a href="#1-5-2-发送缓冲区" class="headerlink" title="1.5.2 发送缓冲区"></a>1.5.2 发送缓冲区</h4><p>&emsp;&emsp;当 TCP 三次握手成功，TCP 连接成功建立后，操作系统内核会为每一个连接创建配套的基础设施，比如<strong>发送缓冲区</strong>。发送缓冲区的大小可以通过套接字选项来改变，当我们的应用程序调用 <code>write</code> 函数时，实际所做的事情是把数据<strong>从应用程序中拷贝到操作系统内核的发送缓冲区中</strong>，并不一定是把数据通过套接字写出去。</p><p>&emsp;&emsp;这里有几种情况：</p><ol><li><p>操作系统内核的发送缓冲区足够大，可以直接容纳这份数据，我们的程序从 <code>write</code> 调用中退出，返回写入的字节数就是应用程序的数据大小</p></li><li><p>操作系统内核的发送缓冲区够大了，不过还有数据没有发送完，或者数据发送完了，但是操作系统内核的发送缓冲区不足以容纳应用程序数据，在这种情况下，<strong>操作系统内核并不会返回，也不会报错，而是应用程序被阻塞</strong>，也就是说应用程序在 <code>write</code> 函数调用处停留，不直接返回。（术语<strong>挂起</strong>也表达了相同的意思，不过是从操作系统内核角度来说的）</p><p>那么什么时候才会返回呢？实际上每个操作系统内核的处理是不同的。大部分 UNIX 系统的做法是<strong>一直等到可以把应用程序数据完全放到操作系统内核的发送缓冲区中，再从系统调用中返回</strong>。注意返回的时刻，应用程序数据并没有全部被发送出去，发送缓冲区里还有部分数据，这部分数据会在稍后由操作系统内核通过网络发送出去。</p></li></ol><p><img src="image-20210225185354131.png"></p><p>​    </p><p>​    </p><h4 id="1-5-3-读取数据"><a href="#1-5-3-读取数据" class="headerlink" title="1.5.3 读取数据"></a>1.5.3 读取数据</h4><p>&emsp;&emsp;套接字描述本身和本地文件描述符并无区别，<strong>在 UNIX 的世界里万物都是文件</strong>，这就意味着可以将套接字描述符传递给那些原先为处理本地文件而设计的函数。这些函数包括 <code>read</code> 和 <code>write</code> 交换数据的函数。</p><p>​    </p><p>​    </p><p><strong>read 函数</strong></p><p>函数的原型如下：</p><pre class="line-numbers language-c"><code class="language-c">ssize_t <span class="token function">read</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socketfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数要求操作系统内核从套接字描述字 <code>socketfd</code> 读取最多多少个字节（<code>size</code>），并将结果存储到 <code>buffer</code> 中</p><p><strong>返回值告诉我们实际读取的字节数目，也有一些特殊情况，如果返回值为 0，表示 EOF（end-of-file），这在网络中表示对端发送了 FIN 包，要处理断连的情况</strong>；如果返回值为 -1，表示出错。如果是非阻塞 I/O，情况会略有不同。</p><p>如果我们想让应用程序每次都读到 size 个字节，就需要编写下面的函数，不断地循环读取：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 从 socketfd 描述字中读取 "size" 个字节. */</span>ssize_t <span class="token function">readn</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>vptr<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    size_t  nleft<span class="token punctuation">;</span>    ssize_t nread<span class="token punctuation">;</span>    <span class="token keyword">char</span>    <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> vptr<span class="token punctuation">;</span>    nleft <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>nleft <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> nleft<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>                nread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 这里需要再次调用 read */</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* EOF(End of File) 表示套接字关闭 */</span>        nleft <span class="token operator">-</span><span class="token operator">=</span> nread<span class="token punctuation">;</span>        ptr   <span class="token operator">+</span><span class="token operator">=</span> nread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>n <span class="token operator">-</span> nleft<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 返回的是实际读取的字节数 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：</p><ul><li>11-25 行的循环条件表示的是，在没读满 size 个字节之前，一直都要循环下去</li><li>13-14 行表示的是非阻塞 I/O 的情况下，没有数据可以读，需要继续调用 read</li><li>17-18 行表示读到对方发出的 FIN 包，表现形式是 EOF，此时需要关闭套接字</li><li>21-22 行，需要读取的字符数减少，缓存指针往下移动</li><li>24 行是在读取 EOF 跳出循环后，返回实际读取的字符数</li></ul><p>​    </p><blockquote><p>缓冲区如此重要，<strong>可不可以无限增大缓冲区</strong>，这样不就可以提高应用程序的吞吐量了么？</p><p>不行，write函数发送数据只是将数据发送到内核缓冲区，而什么时候发送由内核决定。内核缓冲区总是充满数据时会产生粘包问题，同时网络的传输大小MTU也会限制每次发送的大小，最后由于数据堵塞需要消耗大量内存资源，资源使用效率不高。</p></blockquote><blockquote><p>一段数据流从应用程序发送端，一直到应用程序接收端，总共经过了多少次拷贝？</p><p>用户缓冲区 -&gt; 内核缓冲区 -&gt; 网卡 -&gt; 对端网卡 -&gt; 内核缓冲区 -&gt; 用户缓冲区</p></blockquote><p>​    </p><p>​    </p><p><strong>实验</strong>：</p><p><em>tcp_server.c</em></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span><span class="token keyword">void</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ssize_t n<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"block in read\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">readn</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        time<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"1K read for %d \n"</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> listenfd<span class="token punctuation">,</span> connfd<span class="token punctuation">;</span>    socklen_t clilen<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in cliaddr<span class="token punctuation">,</span> servaddr<span class="token punctuation">;</span>    listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* bind到本地地址，端口为12345 */</span>    <span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* listen的backlog为1024 */</span>    <span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 循环处理用户请求 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        clilen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clilen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read_data</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 读取数据 */</span>        <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* 关闭连接套接字，注意不是监听套接字*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：</p><ul><li>6-17 行先后创建了 socket 套接字，bind 到对应地址和端口，并开始调用 listen 接口监听</li><li>20-25 行循环等待连接，通过 accept 获取实际的连接，并开始读取数据</li><li>28-42 行实际每次读取 1K 数据，之后休眠 1 秒，用来模拟服务器端处理时延</li></ul><p>​    </p><p><em>tcp_client.c</em></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span><span class="token macro property"># <span class="token directive keyword">define</span> MESSAGE_SIZE 102400</span><span class="token keyword">void</span> <span class="token function">send_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>query<span class="token punctuation">;</span>    query <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MESSAGE_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MESSAGE_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        query<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    query<span class="token punctuation">[</span>MESSAGE_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">;</span>    cp <span class="token operator">=</span> query<span class="token punctuation">;</span>    size_t remaining <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n_written <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> cp<span class="token punctuation">,</span> remaining<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"send into buffer %ld \n"</span><span class="token punctuation">,</span> n_written<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n_written <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"send failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        remaining <span class="token operator">-</span><span class="token operator">=</span> n_written<span class="token punctuation">;</span>        cp <span class="token operator">+</span><span class="token operator">=</span> n_written<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in servaddr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: tcpclient &lt;IPaddress>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> connect_rt <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>connect_rt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"connect failed "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">send_data</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：</p><ul><li>9-15 行先后创建了 socket 套接字，调用 connect 向对应服务器端发起连接请求</li><li>16 行在连接建立成功后，调用 send_data 发送数据</li><li>23-28 行初始化了一个长度为 MESSAGE_SIZE 的字符串流</li><li>33-42 行调用 send 函数将 MESSAGE_SIZE 长度的字符串流发送出去</li></ul><p>​    </p><p>编译运行：</p><p>客户端程序发送了一个很大的字节流，程序运行起来之后，我们会看到服务端不断地在屏幕上打印出读取字节流的过程</p><p>而客户端直到最后所有的字节流发送完毕才打印出下面的一句话，说明在此之前 send 函数一直都是阻塞的，也就是说<strong>阻塞式套接字最终发送返回的实际写入字节数和请求字节数是相等的</strong></p><p><strong>注意：发送成功仅仅表示的是数据被拷贝到了发送缓冲区中，并不意味着连接对端已经收到所有的数据</strong></p><p><img src="image-20210225194139734.png" alt="客户端"></p><p><img src="image-20210225194214472.png" alt="服务端"></p><p>​    </p><p>​    </p><h3 id="1-6-UDP编程"><a href="#1-6-UDP编程" class="headerlink" title="1.6 UDP编程"></a>1.6 UDP编程</h3><blockquote><p>TCP和UDP相比有什么差异呢？</p></blockquote><p>UDP 是一种<strong>数据报</strong>协议，而 TCP 是一种面向连接的<strong>数据流</strong>协议。</p><p>TCP 是一个面向连接的协议，TCP 在 IP 报文的基础上，增加了诸如<strong>重传、确认、有序传输、拥塞控制</strong>等能力，通信的双方是在一个<strong>确定的上下文中</strong>工作的。</p><p>而 UDP 则不同，UDP 没有这样一个确定的上下文，它是一个不可靠的通信协议，没有重传和确认，没有有序控制，也没有拥塞控制。UDP 不保证报文的有效传递，不保证报文的有序，也就是说使用 UDP 的时候，我们需要做好丢包、重传、报文组装等工作。</p><p>​    </p><p>​    </p><h4 id="UDP-建立连接"><a href="#UDP-建立连接" class="headerlink" title="UDP 建立连接"></a>UDP 建立连接</h4><p><img src="image-20210225212429860.png"></p><p>服务器端创建 UDP 套接字之后，绑定到本地端口，调用 <code>recvfrom</code> 函数等待客户端的报文发送；客户端创建套接字之后，调用 <code>sendto</code> 函数往目标地址和端口发送 UDP 报文，然后客户端和服务器端进入互相应答过程。</p><p><code>recvfrom</code> 和 <code>sendto</code> 是 UDP 用来接收和发送报文的两个主要函数：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span>ssize_t <span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buff<span class="token punctuation">,</span> size_t nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> 　　　　　　　　　　<span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>from<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span> ssize_t <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buff<span class="token punctuation">,</span> size_t nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>                <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>to<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>recvfrom 函数</strong>：</p><p><code>sockfd</code> 是本地创建的套接字描述符</p><p><code>buff</code> 指向本地的缓存</p><p><code>nbytes</code> 表示最大接收数据字节</p><p><code>flags</code> 是和 I/O 相关的参数，这里我们还用不到，设置为 0</p><p>后面两个参数 <code>from</code> 和 <code>addrlen</code>，实际上是返回对端发送方的地址和端口等信息</p><blockquote><p>这和 TCP 非常不一样，TCP 是通过 accept 函数拿到的描述字信息来决定对端的信息。而UDP 报文每次接收都会获取对端的信息，报文和报文之间是没有上下文的。</p></blockquote><p>函数返回值告诉我们实际接收的字节数。</p><p>​    </p><p><strong>sendto 函数</strong>：</p><p><code>sockfd</code> 是本地创建的套接字描述符</p><p><code>buff</code> 指向发送的缓存</p><p><code>nbytes</code> 表示发送字节数</p><p><code>flags</code> 依旧设置为 0</p><p><code>to</code> 和 <code>addrlen</code>表示发送的对端地址和端口等信息。</p><p>函数的返回值告诉我们实际接收的字节数。</p><p>​    </p><p>​    </p><p><strong>实验</strong>：</p><p><em>udp_server.c</em></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span><span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recvfrom_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nreceived %d datagrams\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>    socket_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in server_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERV_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socklen_t client_len<span class="token punctuation">;</span>    <span class="token keyword">char</span> message<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> recvfrom_int<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in client_addr<span class="token punctuation">;</span>    client_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> message<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"received %d bytes: %s\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> <span class="token string">"Hi, %s"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendto</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> client_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：</p><ul><li><p>12～13 行，首先创建一个套接字，注意这里的套接字类型是<code>SOCK_DGRAM</code>，表示的是 UDP 数据报。</p></li><li><p>15～21 行和 TCP 服务器端类似，绑定数据报套接字到本地的一个端口上。</p></li><li><p>27 行为该服务器创建了一个信号处理函数，以便在响应“Ctrl+C”退出时，打印出收到的报文总数。</p></li><li><p>31～42 行是该服务器端的主体，通过调用 recvfrom 函数获取客户端发送的报文，之后我们对收到的报文进行重新改造，加上“Hi”的前缀，再通过 sendto 函数发送给客户端对端。</p></li></ul><p>​    </p><p><em>udp_client.c</em></p><p>在这个例子中，从标准输入中读取输入的字符串后，发送给服务端，并且把服务端经过处理的报文打印到标准输出上。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span><span class="token macro property"># <span class="token directive keyword">define</span>    MAXLINE     4096</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: udpclient &lt;IPaddress>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>    socket_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in server_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERV_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    socklen_t server_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>reply_addr<span class="token punctuation">;</span>    reply_addr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>server_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span> recv_line<span class="token punctuation">[</span>MAXLINE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    socklen_t len<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>send_line<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            send_line<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now sending %s\n"</span><span class="token punctuation">,</span> send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        size_t rt <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> server_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"send failed "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send bytes: %zu \n"</span><span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">;</span>        len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> recv_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> reply_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"recvfrom failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recv_line<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>recv_line<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：</p><ul><li><p>10～11 行创建一个类型为“SOCK_DGRAM”的套接字。</p></li><li><p>13～17 行，初始化目标服务器的地址和端口。</p></li><li><p>28～51 行为程序主体，从标准输入中读取的字符进行处理后，调用 sendto 函数发送给目标服务器端，然后再次调用 recvfrom 函数接收目标服务器发送过来的新报文，并将其打印到标准输出上。</p></li></ul><p>​    </p><p>运行：</p><p><strong>场景一：只运行客户端</strong></p><p><img src="image-20210329101753391.png"></p><p>只运行客户端，程序会一直阻塞在 <code>recvfrom</code> 上</p><p>如果不开启服务端，TCP 客户端的 <code>connect</code> 函数会直接返回Connection refused报错信息。而在 UDP 程序里，则会一直阻塞在这里。</p><p>​    </p><p><strong>场景二：先开启服务端，再开启客户端</strong></p><p>先开启服务端在端口侦听，然后再开启客户端：</p><p><img src="image-20210329105644830.png"></p><p>在客户端一次输入 g1、g2，服务器端在屏幕上打印出收到的字符，并且可以看到，客户端也收到了服务端的回应：“Hi, g1”和“Hi,g2”</p><p>​    </p><p><strong>场景三: 开启服务端，再一次开启两个客户端</strong></p><p>在服务端开启之后，依次开启两个客户端，并发送报文：</p><p><img src="image-20210329200937835.png" alt="服务端"></p><p><img src="image-20210329201010812.png" alt="客户端"></p><p>两个客户端发送的报文，依次都被服务端收到，并且客户端也可以收到服务端处理之后的报文。如果此时把服务器端进程杀死，就可以看到信号函数在进程退出之前，打印出服务器端接收到的报文个数。</p><p>之后<strong>再重启服务器端进程</strong>，并使用客户端 1 和客户端 2 继续发送新的报文，服务器端可以继续收到客户端的报文。（这在 TCP 里是不可以的，TCP 断联之后必须重新连接才可以发送报文信息）但是 UDP 报文的无连接的特点，<strong>可以在 UDP 服务器重启之后，继续进行报文的发送，这就是 UDP 报文“无上下文”的最好说明。</strong></p><p>​    </p><p>​    </p><blockquote><p>在第一个场景中 <code>recvfrom</code> 一直处于阻塞状态中，这是非常不合理的，这种情形应该怎么处理呢？</p><p>一直阻塞会导致程序无法正常退出，可以使用接收超时、IO多路复用的<strong>超时机制</strong>。</p></blockquote><blockquote><p>UDP 是请求 - 应答模式的，那么请求中的 <strong>UDP 报文最大</strong>可以是多大呢？</p><p>IP和UDP头中都有16bit的长度字段，最长65535字节，去掉头部长度得到UDP数据净荷长度：65535-20-8=65507字节</p></blockquote><p>​    </p><p>​    </p><p>​    </p><h3 id="1-7-本地套接字"><a href="#1-7-本地套接字" class="headerlink" title="1.7 本地套接字"></a>1.7 本地套接字</h3><p>实际上本地套接字是 IPC，也就是<strong>本地进程间通信的一种实现方式</strong>。除了本地套接字以外，其它技术，诸如管道、共享消息队列等也是进程间通信的常用方法，但因为本地套接字开发便捷，接受度高，所以普遍适用于在同一台主机上进程间通信的各种场景。</p><p>​    </p><p>​    </p><h4 id="1-7-0-例子"><a href="#1-7-0-例子" class="headerlink" title="1.7.0 例子"></a>1.7.0 例子</h4><p>在 Kubernetes 和 Docker 的技术体系中，有很多优秀的设计，比如 Kubernetes 的 <strong>CRI</strong> <code>Container Runtime Interface</code>，其思想是将 Kubernetes 的<strong>主要逻辑和 Container Runtime 的实现解耦</strong>。</p><p>我们可以通过 netstat 命令查看 Linux 系统内的本地套接字状况，下面这张图列出了路径为 <em>/var/run/dockershim.socket</em> 的 stream 类型的本地套接字，可以清楚地看到开启这个套接字的进程为 kubelet。kubelet 是 Kubernetes 的一个组件，这个组件负责将控制器和调度器的命令转化为单机上的容器实例。为了实现和容器运行时的解耦，kubelet 设计了基于本地套接字的客户端 - 服务器 GRPC 调用。</p><p><img src="image-20210330202855980.png"></p><p>列表里还有 docker-containerd.sock 等其他本地套接字，Docker 其实也是大量使用了本地套接字技术来构建。如果我们在 <em>/var/run</em> 目录下将会看到 docker 使用的本地套接字描述符:</p><p><img src="image-20210330203059492.png"></p><p>​    </p><p>​    </p><h4 id="1-7-1-本地套接字概述"><a href="#1-7-1-本地套接字概述" class="headerlink" title="1.7.1 本地套接字概述"></a>1.7.1 本地套接字概述</h4><p>本地套接字一般也叫做 UNIX 域套接字，最新的规范已经改叫本地套接字。</p><p>本地套接字是一种特殊类型的套接字，和 TCP/UDP 套接字不同。TCP/UDP 即使在本地地址通信，也要走系统网络协议栈，而本地套接字，严格意义上说提供了一种<strong>单主机跨进程间调用的手段</strong>，减少了协议栈实现的复杂度，效率比 TCP/UDP 套接字都要高许多。类似的 IPC 机制还有 <strong>UNIX 管道、共享内存和 RPC 调用</strong>等。</p><p>比如 X Window 实现，如果发现是本地连接，就会走本地套接字，工作效率非常高。</p><p>​    </p><p>​    </p><h4 id="1-7-2-本地字节流套接字"><a href="#1-7-2-本地字节流套接字" class="headerlink" title="1.7.2 本地字节流套接字"></a>1.7.2 本地字节流套接字</h4><p>服务器端：在这个例子中，服务器程序打开本地套接字后，接收客户端发送来的字节流，并往客户端回送了新的字节流。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"lib/common.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: unixstreamserver &lt;local_path>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> listenfd<span class="token punctuation">,</span> connfd<span class="token punctuation">;</span>    socklen_t clilen<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_un cliaddr<span class="token punctuation">,</span> servaddr<span class="token punctuation">;</span>    listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"socket create failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> <span class="token operator">*</span>local_path <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>local_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> local_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"bind failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> LISTENQ<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"listen failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    clilen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clilen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"accept failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* back to for() */</span>        <span class="token keyword">else</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"accept failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client quit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Receive: %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> <span class="token string">"Hi, %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nbytes <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span> <span class="token operator">!=</span> nbytes<span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"write error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：</p><ul><li>第 12～15 行非常关键，<strong>这里创建的套接字类型，注意是 AF_LOCAL，并且使用字节流格式</strong>。</li><li>第 17～21 行创建了一个本地地址，这里的本地地址和 IPv4、IPv6 地址可以对应，数据类型为 sockaddr_un，这个数据类型中的 sun_family 需要填写为 AF_LOCAL，最为关键的是需要对 sun_path 设置一个本地文件路径。我们这里还做了一个 unlink 操作，以便把存在的文件删除掉，这样可以保持幂等性。</li><li>第 23～29 行，分别执行 bind 和 listen 操作，这样就监听在一个本地文件路径标识的套接字上，这和普通的 TCP 服务端程序没什么区别。</li><li>第 41～56 行，使用 read 和 write 函数从套接字中按照字节流的方式读取和发送数据。</li></ul><p>​    </p><p>​    </p><p>关于本地文件路径，需要明确一点，它必须是<strong>绝对路径</strong>，这样的话，编写好的程序可以在任何目录里被启动和管理。如果是相对路径，为了保持同样的目的，这个程序的启动路径就必须固定，这样一来，对程序的管理反而是一个很大的负担。</p><p>本地文件，必须是一个<strong>文件</strong>，不能是一个目录。如果文件不存在，后面 <strong>bind 操作时会自动创建这个文件</strong>。</p><p>在 Linux 下，任何文件操作都有权限的概念，应用程序启动时也有应用属主。</p><p>​    </p><p>客户端程序</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"lib/common.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"usage: unixstreamclient &lt;local_path>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_un servaddr<span class="token punctuation">;</span>    sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"create socket failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"connect failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> send_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> recv_line<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>send_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nbytes <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>send_line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> send_line<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span> <span class="token operator">!=</span> nbytes<span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"write error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> recv_line<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token string">"server terminated prematurely"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>recv_line<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：</p><ul><li><p>11～14 行创建了一个本地套接字，和前面服务器端程序一样，用的也是字节流类型 SOCK_STREAM。</p></li><li><p>16～18 行初始化目标服务器端的地址。我们知道在 TCP 编程中，使用的是服务器的 IP 地址和端口作为目标，在本地套接字中则使用文件路径作为目标标识，sun_path 这个字段标识的是目标文件路径，所以这里需要对 sun_path 进行初始化。</p></li><li><p>20 行和 TCP 客户端一样，发起对目标套接字的 connect 调用，不过由于是本地套接字，并不会有三次握手。</p></li><li><p>28～38 行从标准输入中读取字符串，向服务器端发送，之后将服务器端传输过来的字符打印到标准输出上。</p></li></ul><p>总体上，我们可以看到，本地字节流套接字和 TCP 服务器端、客户端编程最大的差异就是套接字类型的不同。本地字节流套接字识别服务器不再通过 IP 地址和端口，而是通过本地文件。</p><p>​    </p><p>​    </p><h2 id="2-网络编程实战"><a href="#2-网络编程实战" class="headerlink" title="2. 网络编程实战"></a>2. 网络编程实战</h2><h3 id="2-1-工具使用"><a href="#2-1-工具使用" class="headerlink" title="2.1 工具使用"></a>2.1 工具使用</h3><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>ping这个命名来自于声呐探测，在网络上用来完成对网络连通性的探测。ping 基于 <a href="https://night-candle.github.io/2021/02/04/cs-network-protocol/#toc-heading-22"><strong>ICMP协议</strong></a> 开发。</p><p><img src="image-20210401202058453.png"></p><p>在上面的例子中使用 ping 命令探测了和新浪网的网络连通性。可以看到，每次显示是按照 sequence 序列号排序显示的，一并显示的，也包括 <strong>TTL</strong>，反映了两个 IP 地址之间传输的时间。最后还显示了 ping 命令的统计信息，如最小时间、平均时间等。</p><p>​    </p><p>​    </p><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>用来显示当前系统中的所有网络设备（网卡列表）</p><p><img src="image-20210401202008556.png"></p><hr><p>第一行：**&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;：网络设备的状态标识** </p><ul><li><code>UP</code> ：网卡开启状态 </li><li><code>BROADCAST</code> ：网卡有广播地址，可发送广播</li><li><code>RUNNING</code>：网线处于连接状态</li><li><code>MULTICAST</code> ：表示网卡可以发送多播包</li></ul><p><strong>mtu 1500</strong>：最大传输单元 <code>MTU</code> 为 1500，表示的是链路层包的大小，这是以太网的默认值，规定连 MAC 头带正文合起来，不允许超过 1500 个<strong>字节</strong>。<strong>如果放不下就需要分片来传输。</strong></p><hr><p>第二行：<strong>inet 192.168.121.143  netmask 255.255.255.0  broadcast 192.168.121.255</strong></p><p>网卡的IP地址、子网掩码、广播地址</p><hr><p>第三行：IPV6配置信息</p><p>第四行：**ether 52:00:74:f8:9f:56  txqueuelen 0  (Ethernet)**：网卡的MAC地址</p><ul><li><code>ether</code>：连接类型为以太网</li><li><code>txqueuelen</code>：传输队列的长度</li></ul><p>第五六行：网卡接受数据包的统计信息和接受错误的统计信息</p><p>第七八行：网卡发送数据包的统计信息和发送错误的统计信息</p><p>​    </p><p><a href="https://night-candle.github.io/2021/02/04/cs-network-protocol/#toc-heading-16">ip addr命令</a></p><p>​    </p><p>​    </p><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>netstat 可以帮助我们了解当前的网络连接状况，比如想知道当前所有的连接详情，就可以使用下面这行命令：</p><pre><code>netstat -alepn</code></pre><p>可能的结果为：</p><p><img src="image-20210401204813435.png"></p><p>netstat 会把所有 IPv4 形态的 TCP，IPV6 形态的 TCP、UDP 以及 UNIX 域的套接字都显示出来。</p><p>对于 TCP 类型来说，最大的好处是<strong>可以清楚地看到一条 TCP 连接的四元组</strong>（源地址、源端口、目的地地址和目的端口）。</p><p>例如这里的一条信息：</p><pre class="line-numbers language-shell"><code class="language-shell">tcp        0      0 127.0.0.1:2379          127.0.0.1:52464         ESTABLISHED 0          27710       3496/etcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表达的意思是本地 127.0.0.1 的端口 52464 连上本地 127.0.0.1 的端口 2379，状态为 ESTABLISHED，本地进程为 etcd，进程为 3496。</p><blockquote><p>可以很方便地知道，在某个时候是不是有很多 TIME_WAIT 的 TCP 连接，导致端口号被占用光，以致新的连接分配不了。</p></blockquote><p>​    </p><p>也可以只对 UNIX 套接字进行筛查：</p><pre class="line-numbers language-shell"><code class="language-shell">netstat Socket -x -alepn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>unix  3      [ ]         STREAM     CONNECTED     23209    1400/dockerd        /var/run/docker.sock</code></pre><p>这是 Docker 在本地套接字的监听路径。*/var/run/docker.sock* 是本地套接字监听地址，dockerd 是进程名称，1400 是进程号。</p><p>​    </p><p>​    </p><h4 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h4><p>lsof 的常见用途之一是找出在指定的 IP 地址或者端口上打开套接字的进程，而 netstat 则告诉我们 IP 地址和端口使用的情况，以及各个 TCP 连接的状态。Isof 和 netstst 可以结合起来一起使用。</p><p>可以通过 lsof 查看是谁打开了这个文件：</p><pre class="line-numbers language-shell"><code class="language-shell">lsof /var/run/docker.sock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面这张图显示了是 dockerd 打开了这个本地文件套接字：</p><p><img src="image-20210401205450477.png"></p><p>使用 lsof 找出正在使用该端口的进程，从而帮助定位问题。</p><pre class="line-numbers language-shell"><code class="language-shell">lsof -i :8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    </p><p>​    </p><h4 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h4><p>抓包工具，具有非常强大的过滤和匹配功能。</p><p>指定网卡：</p><pre class="line-numbers language-shell"><code class="language-shell">tcpdump -i eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定来源：</p><pre class="line-numbers language-shell"><code class="language-shell">tcpdump src host hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们再来一个复杂一点的例子。这里抓的包是 TCP，且端口是 80，包来自 IP 地址为 192.168.1.25 的主机地址。</p><pre><code>tcpdump &#39;tcp and port 80 and src host 192.168.1.25&#39; </code></pre><p>如果我们对 TCP 协议非常熟悉，还可以写出这样的 tcpdump 命令：</p><pre><code>tcpdump &#39;tcp and port 80 and tcp[13:1]&amp;2 != 0&#39;</code></pre><p>这里 tcp[13:1] 表示的是 TCP 头部开始处偏移为 13 的字节，如果这个值为 2，说明设置了 SYN 分节，当然，我们也可以设置成其他值来获取希望类型的分节。</p><p>tcpdump 在开启抓包的时候，会自动创建一个类型为 AF_PACKET 的网络套接口，并向系统内核注册。当网卡接收到一个网络报文之后，它会遍历系统中所有已经被注册的网络协议，包括其中已经注册了的 AF_PACKET 网络协议。系统内核接下来就会将网卡收到的报文发送给该协议的回调函数进行一次处理，回调函数可以把接收到的报文完完整整地复制一份，假装是自己接收到的报文，然后交给 tcpdump 程序，进行各种条件的过滤和判断，再对报文进行解析输出。</p><p>下面这张图显示的是 tcpdump 的输出格式：</p><blockquote><p>未完待续</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络协议 </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议基础入门</title>
      <link href="2021/02/04/cs-network-protocol/"/>
      <url>2021/02/04/cs-network-protocol/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>看似最枯燥、最基础的东西往往具有最长久的生命力</strong></p><p>​    </p><p>​    </p><h2 id="协议三要素"><a href="#协议三要素" class="headerlink" title="协议三要素"></a>协议三要素</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;这是程序员向计算机世界说你好的方式。这段文字也是一种协议，是人类和计算机沟通的协议，<strong>只有通过这种协议，计算机才知道想让它做什么</strong>。会了计算机语言，就能够教给一台计算机完成工作了。计算机语言作为程序员控制一台计算机工作的协议，具备了协议的三要素。</p><ul><li><strong>语法</strong>：就是这一段内容要符合一定的规则和格式（如括号要成对，结束要使用分号等）</li><li><strong>语义</strong>：就是这一段内容要代表某种意义。（如数字减去数字是有意义的，数字减去文本一般来说没有意义）</li><li><strong>顺序</strong>：就是先做什么，后做什么（如可以先加上某个数值然后再减去某个数值）</li></ul><p>&emsp;&emsp;但是要想学会教给一大片机器做什么，这就需要网络协议。<strong>只有通过网络协议，才能使一大片机器互相协作、共同完成一件事。</strong></p><p>​    </p><p>​    </p><h2 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h2><ul><li><p><a href="https://night-candle.github.io/2021/02/04/cs-network-socket/#toc-heading-20">OSI 概念模型</a></p></li><li><p>OSI与TCP/IP模型对照</p></li></ul><img src="image-20210522175545296.png" style="zoom: 70%;" /><ul><li><p>网络分层的优点：</p><ul><li><p>各层之间是独立的。<strong>某一层并不需要知道它下一层是如何实现的，而仅仅需要知道该层通过层间的接口所提供的服务</strong></p></li><li><p>灵活性好。当任何一层发生变化时，只要<strong>层间接口关系保持不变，则在这层以上或以下各层均不受影响</strong></p></li><li><p>结构上可分割开、易于实现和维护、能促进标准化工作</p></li></ul></li></ul><blockquote><p>传输层是<strong>IPv4</strong>或<strong>IPv6</strong>、链路层是否仍使用1500字节的<strong>MTU</strong>对应用层没有影响</p></blockquote><blockquote><p><strong>Intel DPDK</strong>无网络协议栈，提供了更好的网络性能，但一些调试工具也因此无法使用</p></blockquote><p>​    </p><p>​    </p><ul><li><p><strong>层与层的关系</strong></p><ul><li><p><strong>只要是在网络上跑的包都是完整的。可以有下层没上层，绝对不可能有上层没下层。</strong>所以，<strong>对 TCP 协议来说，三次握手也好，重试也好，只要想发出去包，就要有 IP 层和 MAC 层，不然是发不出去的。</strong>无论这个包经过哪些设备，它都是完整的。</p></li><li><p>所谓二层设备、三层设备，都是这些设备上跑的程序不同而已。一个 HTTP 协议的包经过一个二层设备，二层设备收进去的是整个网络包。这里面 HTTP、TCP、 IP、 MAC 都有。二层设备就是只把 MAC 头摘下来，看看是丢弃、转发，还是自己留着。三层设备就是把 MAC 头摘下来之后，再把 IP 头摘下来，看看是丢弃、转发，还是自己留着。</p></li></ul></li></ul><p>​    </p><p>​    </p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h2><p>HTTP 协议（<code>Hypertext Transfer Protocol</code> ）</p><p>&emsp;&emsp;<em>a stateless application-level request/response protocol that uses extensible semantics and self-descriptive message payloads for flexible interaction with network-based hypertext information systems</em>（RFC7230 2014.6）</p><p>&emsp;&emsp;一种<strong>无状态</strong>的、应用层的、以<strong>请求/应答方式</strong>运行的协议，它使用<strong>可扩展的语义和自描述消息格式</strong>，与基于网络的<strong>超文本</strong>信息系统灵活的互动。</p><p>​    </p><h3 id="消息格式"><a href="#消息格式" class="headerlink" title="消息格式"></a>消息格式</h3><img src="消息格式.jpg" style="zoom:70%;" /><p>基于<strong>ABNF</strong>语义定义的HTTP消息格式：</p><p><strong>HTTP-message =<code>start-line</code> * (<code>header-field</code>CRLF ) CRLF [<code>message-body</code>]</strong></p><ul><li><p><strong><code>start-line</code></strong> = request-line / status-line </p><ul><li><p><strong>request-line</strong> = method SP request-target SP HTTP-version CRLF </p></li><li><p><strong>status-line</strong> = HTTP-version SP status-code SP reason-phrase CRLF </p></li></ul></li><li><p><strong><code>header-field</code></strong> = field-name “:” OWS field-value OWS</p><ul><li><p>OWS = * (SP / HTAB）</p></li><li><p>field-name = token </p></li><li><p>field-value =  * (field-content /obs-fold）</p></li></ul></li><li><p><strong><code>message-body</code></strong> = * OCTET</p></li></ul><p>​    <img src="image-20210522172607096.png" alt="报文实例"></p><blockquote><p><code>ABNF</code> <strong>扩充巴科斯 - 瑙尔范式</strong>：定义语法的元语言</p></blockquote><blockquote><ul><li>操作符</li></ul><p><strong>空白字符：</strong>用来分隔定义中的各个元素</p><p>e.g.method SP request-target SP HTTP-version CRLF</p><p><strong>选择 /：</strong>表示多个规则都是可供选择的规则</p><p>e.g.start-line = request-line / status-line</p><p><strong>值范围</strong> <strong>%c##-##</strong></p><p>e.g.OCTAL = “0” / “1” / “2” / “3” / “4” / “5” / “6” / “7” 与 OCTAL = %x30-37 等价</p><p><strong>序列组合()：</strong>将规则组合起来，视为单个元素</p><p><strong>不定量重复m*n</strong> </p><p>e.g.*元素表示零个或更多元素： *（header-field CRLF）</p><p>e.g.1* 元素表示一个或更多元素，2*4 元素表示两个至四个元素 </p><p><strong>可选序列 []：</strong> </p><p>e.g.[ message-body ]</p></blockquote><blockquote><ul><li>核心规则</li></ul><p><img src="image-20210522162855573.png"></p></blockquote><p>​    </p><p>​    </p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p><strong>request-line = method SP <code>request-target</code> SP HTTP-version CRLF</strong></p><img src="image-20210526214115747.png" alt="" style="zoom:80%;" /><p>​    </p><h5 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h5><p>​    </p><p><strong>什么是URI ？</strong></p><p><strong>URL</strong>：<code>Uniform Resource Locator</code>，表示资源的位置， 期望提供查找资源的方法  （RFC1738 1994.12）</p><p><strong>URN</strong>：<code>Uniform Resource Name</code>，期望为资源提供持久的、位置无关的标识方式，并允许简单地将多个命名空间映射到单个URN命名空间 （RFC2141 1997.5）</p><p>​    e.g. <strong>磁力链接</strong> magnet:?xt=urn:sha1:YNCKHTQC5C</p><p><strong>URI</strong>：<code>Uniform Resource Identifier</code>，用以区分资源，<strong>是 URL 和 URN 的超集</strong>，用以取代 URL 和 URN 概念 （RFC1630 1994.6）（RFC3986 2005.1 取代 RFC2396 和 RFC2732）</p><ul><li><p>Resource 资源</p><ul><li>可以是图片、文档，也可以是不能通过互联网访问的实体，例如人、公司，也可以是抽象的概念，例如亲属关系或者数字符号</li><li>一个资源可以有多个 URI </li></ul></li><li><p>Identifier 标识符 </p><ul><li>将当前资源与其他资源区分开的名称 </li></ul></li><li><p>Uniform 统一 </p><ul><li>允许不同种类的资源在同一上下文中出现 </li><li>对不同种类的资源标识符可以使用同一种语义进行解读 </li><li>引入新标识符时，不会对已有标识符产生影响 </li><li>允许同一资源标识符在不同的、internet 规模下的上下文中出现</li></ul></li></ul><p>​    </p><p>​    </p><p><strong>URI 组成：schema, user information, host, port, path, query, fragment</strong></p><p><img src="image-20210526200303845.png"></p><p>​    </p><p><strong>URI 的格式</strong></p><p><strong>URI = <code>scheme</code> “:” <code>hier-part</code> [ “?” <code>query</code> ] [ “#” <code>fragment</code> ]</strong> </p><ul><li><p><strong><code>scheme</code></strong> = ALPHA *( ALPHA / DIGIT / “+” / “-“ / “.” )<br>e.g. http, https, ftp, mailto, rtsp, file, telnet </p></li><li><p><strong><code>query</code></strong> = *( pchar / “/“ / “?” ) </p></li><li><p><strong><code>fragment</code></strong> = *( pchar / “/“ / “?” ) </p></li></ul><ul><li><p><strong><code>hier-part</code></strong> = “//“ <strong><code>authority</code></strong> path-abempty / path-absolute / path-rootless / path-empty </p><ul><li><p><strong>authority</strong> = [ userinfo “@” ] host [ “:” port ] </p><p>userinfo = *( unreserved / pct-encoded / sub-delims / “:” ) </p><p>host = IP-literal / IPv4address / reg-name </p><p>port = *DIGIT </p></li><li><p><strong>path</strong> = path-abempty/ path-absolute/ path-noscheme / path-rootless / path-empty </p><p>path-abempty = *( “/” segment ) ：以/开头的路径或者空路径 </p><p>path-absolute = “/” [ segment-nz *( “/” segment ) ] ：以/开头的路径，但不能以//开头 </p><p>path-noscheme = segment-nz-nc *( “/” segment ) ：以非:号开头的路径 </p><p>path-rootless = segment-nz *( “/” segment ) ：相对path-noscheme，增加允许以:号开头的路径 </p><p>path-empty = 0&lt;pchar&gt; ：空路径</p></li></ul></li></ul><p>​    </p><p><strong>相对URI</strong></p><p><strong>URI-reference = <code>URI</code>/<code>relative-ref</code></strong> </p><ul><li><strong><code>relative-ref</code></strong> = relative-part [ “?” query ] [ “#” fragment ] <ul><li>relative-part = “//“ authority path-abempty / path-absolute / path-noscheme / path-empty</li></ul></li></ul><p>​    </p><p>​    </p><h5 id="URI-编码"><a href="#URI-编码" class="headerlink" title="URI 编码"></a>URI 编码</h5><p>​    </p><p>​    </p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p><strong>常见方法（RFC7231）</strong></p><ul><li><p><strong>GET</strong>：主要的获取信息方法，大量的性能优化都针对该方法，幂等方法 </p></li><li><p>HEAD：类似 GET 方法，但服务器不发送 BODY，用以获取 HEAD 元数据，幂等方法 </p></li><li><p><strong>POST</strong>：常用于提交 HTML FORM 表单、新增资源等 </p></li><li><p>PUT：更新资源，带条件时是幂等方法 </p></li><li><p>DELETE：删除资源，幂等方法 </p></li><li><p>CONNECT：建立 tunnel 隧道 </p></li><li><p>OPTIONS：显示服务器对访问资源支持的方法，幂等方法 </p></li><li><p>TRACE：回显服务器收到的请求，用于定位问题。有安全风险 </p></li></ul><p>​    </p><p><strong>用于文档管理的 WEBDAV 方法（RFC2518）</strong></p><ul><li><p>PROPFIND：从 Web 资源中检索以 XML 格式存储的属性。它也被重载，以允许一个检索远程系统的集合结构（也叫目录层次结构） </p></li><li><p>PROPPATCH：在单个原子性动作中更改和删除资源的多个属性 </p></li><li><p>MKCOL：创建集合或者目录 </p></li><li><p>COPY：将资源从一个 URI 复制到另一个 URI </p></li><li><p>MOVE：将资源从一个 URI 移动到另一个 URI </p></li><li><p>LOCK：锁定一个资源。WebDAV 支持共享锁和互斥锁。 </p></li><li><p>UNLOCK：解除资源的锁定</p></li></ul><p>​    </p><p>​    </p><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><p><strong>status-line = HTTP-version SP <code>status-code</code> SP <code>reason-phrase</code> CRLF</strong> </p><ul><li><p><strong><code>status-code</code></strong> = 3DIGIT </p></li><li><p><strong><code>reason-phrase</code></strong> = *( HTAB / SP / VCHAR / obs-text )</p></li></ul><img src="image-20210526214141809.png" alt="" style="zoom:80%;" /><p>​    </p><p>​    </p><h5 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h5><p>​    </p><p>响应码规范：（RFC6585 2012.4）（RFC7231 2014.6）</p><p><code>1xx</code>：信息性状态码，请求已接收到，需要进一步处理才能完成，HTTP1.0 不支持 </p><ul><li><p>100 Continue：上传大文件前使用 </p><ul><li>由客户端发起请求中携带 Expect: 100-continue 头部触发 </li></ul></li><li><p>101 Switch Protocols：协议升级使用 </p><ul><li>由客户端发起请求中携带 Upgrade: 头部触发，如升级 websocket 或者 http/2.0 </li></ul></li><li><p>102 Processing：WebDAV 请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失</p></li></ul><p>​    </p><p><code>2xx</code>：成功处理请求 </p><ul><li><p>200 OK: 成功返回响应。 </p></li><li><p>201 Created: 有新资源在服务器端被成功创建。 </p></li><li><p>202 Accepted: 服务器接收并开始处理请求，但请求未处理完成。这样一个模糊的概念是有意如此设计，可以覆盖更多的场景。例如异步、需要长时间处理的任务。 </p></li><li><p>203 Non-Authoritative Information：当代理服务器修改了 origin server 的原始响应包体时（例如更换了HTML中的元素值），代理服务器可以通过修改200为203的方式告知客户端这一事实，方便客户端为这一行为作出相应的处理。 203响应可以被缓存。</p></li><li><p>204 No Content：成功执行了请求且不携带响应包体，并暗示客户端无需更新当前的页面视图。 </p></li><li><p>205 Reset Content：成功执行了请求且不携带响应包体，同时指明客户端需要更新当前页面视图。 </p></li><li><p>206 Partial Content：使用 range 协议时返回部分响应内容时的响应码 </p></li><li><p>207 Multi-Status：RFC4918 ，在 WEBDAV 协议中以 XML 返回多个资源的状态。 </p></li><li><p>208 Already Reported：RFC5842 ，为避免相同集合下资源在207响应码下重复上报，使用 208 可以使用父集合的响应码。</p></li></ul><p>​    </p><p><code>3xx</code>：<strong>重定向</strong>使用 Location 指向的资源或者缓存中的资源。在 RFC2068 中规定客户端重定向次数不应超过 5 次，以防止死循环。 </p><ul><li><p>300 Multiple Choices：资源有多种表述，通过 300 返回给客户端后由其自行选择访问哪一种表述。由于缺乏明确的细节，300 很少使用。 </p></li><li><p>301 Moved Permanently：资源永久性的重定向到另一个 URI 中。 </p></li><li><p>302 Found：资源临时的重定向到另一个 URI 中。</p></li><li><p>303 See Other：重定向到其他资源，常用于 POST/PUT 等方法的响应中。 </p></li><li><p>304 Not Modified：当客户端拥有可能过期的缓存时，会携带缓存的标识 etag、时间等信息询问服务器缓存是否仍可复用，而304是告诉客户端可以复用缓存。 </p></li><li><p>307 Temporary Redirect：类似302，但明确重定向后请求方法必须与原请求方法相同，不得改变。 </p></li><li><p>308 Permanent Redirect：类似301，但明确重定向后请求方法必须与原请求方法相同，不得改变。</p></li></ul><p>​    </p><p><code>4xx</code>：<strong>客户端出现错误</strong>，服务器无法处理请求</p><ul><li><p>400 Bad Request：服务器认为客户端出现了错误，但不能明确判断为以下哪种错误时使用此错误码。例如HTTP请求格式错误。 </p></li><li><p>401 Unauthorized：用户认证信息缺失或者不正确，导致服务器无法处理请求。 </p></li><li><p>407 Proxy Authentication Required：对需要经由代理的请求，认证信息未通过代理服务器的验证 </p></li><li><p>403 Forbidden：服务器理解请求的含义，但没有权限执行此请求 </p></li><li><p>404 Not Found：服务器没有找到对应的资源 </p></li><li><p>410 Gone：服务器没有找到对应的资源，且明确的知道该位置永久性找不到该资源响应码分类： 4xx（二） </p></li><li><p>405 Method Not Allowed：服务器不支持请求行中的 method 方法 </p></li><li><p>406 Not Acceptable：对客户端指定的资源表述不存在（例如对语言或者编码有要求），服务器返回表述列表供客户端选择。 </p></li><li><p>408 Request Timeout：服务器接收请求超时 </p></li><li><p>409 Conflict：资源冲突，例如上传文件时目标位置已经存在版本更新的资源 </p></li><li><p>411 Length Required：如果请求含有包体且未携带 Content-Length 头部，且不属于chunk类请求时，返回 411响应码分类： 4xx（三） </p></li><li><p>412 Precondition Failed：复用缓存时传递的 If-Unmodified-Since 或 If-None-Match 头部不被满足 </p></li><li><p>413 Payload Too Large/Request Entity Too Large：请求的包体超出服务器能处理的最大长度 </p></li><li><p>414 URI Too Long：请求的 URI 超出服务器能接受的最大长度 </p></li><li><p>415 Unsupported Media Type：上传的文件类型不被服务器支持 </p></li><li><p>416 Range Not Satisfiable：无法提供 Range 请求中指定的那段包体 </p></li><li><p>417 Expectation Failed：对于 Expect 请求头部期待的情况无法满足时的 </p></li><li><p>421 Misdirected Request：服务器认为这个请求不该发给它，因为它没有能力处理。 </p></li><li><p>426 Upgrade Required：服务器拒绝基于当前 HTTP 协议提供服务，通过Upgrade 头部告知客户端必须升级协议才能继续处理。 </p></li><li><p>428 Precondition Required：用户请求中缺失了条件类头部，例如 If-Match </p></li><li><p>429 Too Many Requests：客户端发送请求的速率过快 </p></li><li><p>431 Request Header Fields Too Large：请求的 HEADER 头部大小超过限制 </p></li><li><p>451 Unavailable For Legal Reasons：RFC7725 ，由于法律原因资源不可访问响应码分类： 5xx（一） </p></li></ul><p>​     </p><p><code>5xx</code>：<strong>服务器端出现错误</strong>，服务器处理请求出错 </p><ul><li><p>500 Internal Server Error：服务器内部错误，且不属于以下错误类型 </p></li><li><p>501 Not Implemented：服务器不支持实现请求所需要的功能 </p></li><li><p>502 Bad Gateway：代理服务器无法获取到合法响应 </p></li><li><p>503 Service Unavailable：服务器资源尚未准备好处理当前请求</p></li><li><p>504 Gateway Timeout：代理服务器无法及时的从上游获得响应 </p></li><li><p>505 HTTP Version Not Supported：请求使用的 HTTP 协议版本不支持 </p></li><li><p>507 Insufficient Storage：服务器没有足够的空间处理请求 </p></li><li><p>508 Loop Detected：访问资源时检测到循环 </p></li><li><p>511 Network Authentication Required：代理服务器发现客户端需要进行身份验证才能获得网络访问权限</p></li></ul><h4 id="首部字段"><a href="#首部字段" class="headerlink" title="首部字段"></a>首部字段</h4><p>首部字段名：字段值</p><p>单个HTTP首部字段可以有多个值</p><h5 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h5><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529211824419.png" alt="image-20210529211824419"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529211839057.png" alt="image-20210529211839057"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529212037624.png" alt="image-20210529212037624"></p><h5 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h5><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529212109514.png" alt="image-20210529212109514"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529212121189.png" alt="image-20210529212121189"></p><h5 id="通用首部字段-General-Header-Fields"><a href="#通用首部字段-General-Header-Fields" class="headerlink" title="通用首部字段    General Header Fields"></a>通用首部字段    General Header Fields</h5><p>请求和响应报文两方都会使用的首部字段</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td><strong>Cache-Control</strong></td><td>控制缓存</td></tr><tr><td><strong>Connection</strong></td><td>连接管理、逐条首部</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td></tr><tr><td><strong>via</strong></td><td>代理服务器的相关信息</td></tr><tr><td>Wraning</td><td>错误和警告通知</td></tr><tr><td>Transfor-Encoding</td><td>报文主体的传输编码格式</td></tr><tr><td>Trailer</td><td>报文末端的首部一览</td></tr><tr><td>Pragma</td><td>报文指令</td></tr><tr><td><strong>Date</strong></td><td>创建报文的日期</td></tr></tbody></table><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529211513608.png" alt="image-20210529211513608"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529211746384.png" alt="image-20210529211746384"></p><h5 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h5><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td><strong>Allow</strong></td><td>资源可支持的HTTP方法</td></tr><tr><td>Content-Language</td><td>实体的资源语言</td></tr><tr><td>Content-Encoding</td><td>实体的编码格式</td></tr><tr><td><strong>Content-Length</strong></td><td>实体的大小（字节）</td></tr><tr><td><strong>Content-Type</strong></td><td>实体媒体类型</td></tr><tr><td>Content-MD5</td><td>实体报文的摘要</td></tr><tr><td>Content-Location</td><td>代替资源的URI</td></tr><tr><td>Content-Rnages</td><td>实体主体的位置范围</td></tr><tr><td>Last-Modified</td><td>资源最后的修改时间</td></tr><tr><td>Expires</td><td>实体主体的过期时间</td></tr></tbody></table><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529212151372.png" alt="image-20210529212151372"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\image-20210529212200529.png" alt="image-20210529212200529"></p><h3 id="REST-架构"><a href="#REST-架构" class="headerlink" title="REST 架构"></a>REST 架构</h3><blockquote><p><strong>Form Follows Function</strong>：HTTP 协议为什么是现在这个样子？ </p></blockquote><p>​    </p><h4 id="HTTP-解决了什么问题？"><a href="#HTTP-解决了什么问题？" class="headerlink" title="HTTP 解决了什么问题？"></a>HTTP 解决了什么问题？</h4><p><em>Web’s major goal was to be a shared information space through which people and machines could communicate. ——Tim Berners Lee</em></p><p>​    </p><p><strong>解决 WWW 信息交互必须面对的需求：</strong></p><ul><li><p>低门槛</p></li><li><p>可扩展性：巨大的用户群体，超长的寿命 </p></li><li><p>分布式系统下的 Hypermedia：大粒度数据的网络传输 </p></li><li><p>Internet 规模 </p><ul><li><p>无法控制的 scalability</p><p>不可预测的负载、非法格式的数据、恶意消息</p><p>客户端不能保持所有服务器信息，服务器不能保持多个请求间的状态信息 </p></li><li><p>独立的组件部署：新老组件并存 </p></li></ul></li><li><p>向前兼容：自 1993 年起 HTTP0.9\1.0（1996）已经被广泛使用</p></li></ul><p>​    </p><h4 id="架构设计原则"><a href="#架构设计原则" class="headerlink" title="架构设计原则"></a>架构设计原则</h4><p>​    </p><ul><li><p>评估 Web 架构的关键属性（<strong>HTTP 协议应当在以下属性中取得可接受的均衡</strong> ）</p><p><strong>1. 性能 Performance：</strong>影响高可用的关键因素</p><p><strong>2. 可伸缩性 Scalability：</strong>支持部署可以互相交互的大量组件 </p><p><strong>3. 简单性 Simplicity：</strong>易理解、易实现、易验证 </p><p><strong>4. 可见性 Visiable：</strong>对两个组件间的交互进行监视或者仲裁的能力。如缓存、分层设计等 </p><p><strong>5. 可移植性 Portability：</strong>在不同的环境下运行的能力 </p><p><strong>6. 可靠性 Reliability：</strong>出现部分故障时，对整体影响的程度 </p><p><strong>7. 可修改性 Modifiability：</strong>对系统作出修改的难易程度，由可进化性、可定制性、可扩展 </p><p>性、可配置性、可重用性构成</p></li></ul><p>​    </p><ul><li><p>架构属性：<strong>性能</strong></p><ul><li><p>网络性能 <code>Network Performance</code> </p><p><strong><code>Throughput</code> 吞吐量</strong>：小于等于带宽 bandwidth </p><p><strong><code>Overhead</code> 开销</strong>：首次开销，每次开销 </p></li><li><p>用户感知到的性能 <code>User-perceived Performance</code> </p><p><code>Latency</code> 延迟：发起请求到接收到响应的时间 </p><p><code>Completion</code> 完成时间：完成一个应用动作所花费的时间 </p></li><li><p>网络效率 <code>Network Efficiency</code> </p><p>重用缓存、减少交互次数、数据传输距离更近、COD</p></li></ul></li></ul><p>​    </p><ul><li><p>架构属性：<strong>可修改性</strong> </p><ul><li><p><strong>可进化性 Evolvability：</strong>一个组件独立升级而不影响其他组件 </p></li><li><p><strong>可扩展性 Extensibility ：</strong>向系统添加功能，而不会影响到系统的其他部分 </p></li><li><p><strong>可定制性 Customizability ：</strong>临时性、定制性地更改某一要素来提供服务，不对常规客户产生影响 </p></li><li><p><strong>可配置性 Configurability ：</strong>应用部署后可通过修改配置提供新的功能 </p></li><li><p><strong>可重用性 Reusabilit ：</strong>组件可以不做修改在其他应用在使用</p></li></ul></li></ul><p>​    </p><img src="image-20210522184657315.png" alt="REST架构下的Web" style="zoom:70%;" /><h4 id="架构风格"><a href="#架构风格" class="headerlink" title="架构风格"></a>架构风格</h4><blockquote><p>从5种架构风格推导出HTTP的REST架构 </p></blockquote><ul><li><p>5种架构风格</p><ul><li><p><strong>数据流风格 <code>Data-flow Styles</code></strong></p><p>优点：简单性、可进化性、可扩展性、可配置性、可重用性 </p></li><li><p><strong>复制风格 <code>Replication Styles</code></strong></p><p>优点：用户可察觉的性能、可伸缩性，网络效率、可靠性也可以提到提升 </p></li><li><p><strong>分层风格 <code>Hierarchical Styles</code></strong> </p><p>优点：简单性、可进化性、可伸缩性 </p></li><li><p><strong>移动代码风格 <code>Mobile Code Styles</code></strong> </p><p>优点：可移植性、可扩展性、网络效率 </p></li><li><p><strong>点对点风格 <code>Peer-to-Peer Styles</code></strong> </p><p>优点：可进化性、可重用性、可扩展性、可配置性</p></li></ul></li></ul><ul><li><p><strong>数据流风格</strong></p></li><li><p><strong>复制风格</strong></p></li><li><p><strong>分层风格</strong></p></li><li><p><strong>移动代码风格</strong></p></li><li><p><strong>点对点风格</strong></p></li></ul><h4 id="风格演化"><a href="#风格演化" class="headerlink" title="风格演化"></a>风格演化</h4><img src="image-20210522191814125.png" style="zoom:90%;" /><p>​    </p><h3 id="协议的通用规则"><a href="#协议的通用规则" class="headerlink" title="协议的通用规则"></a>协议的通用规则</h3><h3 id="连接与消息的路由"><a href="#连接与消息的路由" class="headerlink" title="连接与消息的路由"></a>连接与消息的路由</h3><h3 id="内容协商与传输"><a href="#内容协商与传输" class="headerlink" title="内容协商与传输"></a>内容协商与传输</h3><p>每个 URI 指向的资源可以是任何事物，可以有多种不同的表述，例如一份文档可以有不同语言的翻译、不同的媒体格式、可以针对不同的浏览器提供不同的压缩编码等。</p><h3 id="Cookie-的设计与问题"><a href="#Cookie-的设计与问题" class="headerlink" title="Cookie 的设计与问题"></a>Cookie 的设计与问题</h3><h3 id="缓存的控制"><a href="#缓存的控制" class="headerlink" title="缓存的控制"></a>缓存的控制</h3><p>​    </p><p>​    </p><p>​    </p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><blockquote><p>支持服务器推送消息</p></blockquote><p>WebSocket是基于TCP的应用层协议，用于在C/S架构的应用中实现<strong>双向通信</strong>。RFC6455（2011.12） </p><p>• 双向通讯的优劣？ </p><p>• 如何管理会话？ </p><p>• 如何维持长连接？ </p><p>• 兼容 HTTP 协议 </p><p>• 端口复用 </p><p>• 支持扩展 </p><p>• 如 permessage-deflate 扩展</p><p>建立会话<br>• 消息传输<br>• 心跳<br>• 关闭会话</p><p>​    </p><p>​    </p><p>​    </p><h2 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h2><p>​    </p><p>​    </p><p>​    </p><h2 id="TLS-SSL"><a href="#TLS-SSL" class="headerlink" title="TLS/SSL"></a>TLS/SSL</h2><blockquote><p>应用层的安全基础设施</p></blockquote><p>​    </p><p>​    </p><p>​    </p><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>传输层的 TCP 协议<br>• 建立连接<br>• 传输数据<br>• 拥塞控制<br>• 关闭连接</p><p><img src="image-20210127183621073.png" alt="发展历史"></p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>​    </p><p>​    </p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>​    </p><h2 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h2><blockquote><p><strong>IP 地址是一个网卡在网络世界的通讯地址</strong>，相当于我们现实世界的门牌号码。IP 是地址，有定位功能，MAC 是身份证，无定位功能。</p></blockquote><p>​    </p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><h4 id="查看-IP-地址"><a href="#查看-IP-地址" class="headerlink" title="查看 IP 地址"></a>查看 IP 地址</h4><p>Windows： <code>ipconfig</code></p><p>Linux： <code>ifconfig</code>、 <code>ip addr</code></p><blockquote><p>大多数时候这两个命令系统自带。如果登录进入一个被裁剪过的非常小的 Linux 系统中，既没有 ifconfig 命令，也没有 ip addr 命令，可以自行安装 <strong>net-tools</strong> 和 <strong>iproute2</strong> 两个工具</p></blockquote><p><strong>net-tools</strong>起源于BSD，自2001年起，Linux社区已经对其停止维护，而<strong>iproute2</strong>旨在取代<strong>net-tools</strong>，并提供了一些新功能。一些Linux发行版已经停止支持<strong>net-tools</strong>，只支持<strong>iproute2</strong>。</p><p><strong>net-tools</strong>通过<code>procfs(/proc)</code>和<code>ioctl</code>系统调用去访问和改变内核网络配置，而<strong>iproute2</strong>则通过<code>netlink</code>套接字接口与内核通讯。</p><p><img src="image-20210208174338316.png" alt="运行ip addr"></p><hr><p><strong>lo</strong> 全称是 <code>loopback</code> ，又称<strong>环回接口</strong>，往往会被分配到 <strong>127.0.0.1</strong> 这个地址。这个地址用于本机通信，经过内核处理后直接返回，不会在任何网络中出现。</p><p><strong>10.0.2.15</strong> 就是一个 IP 地址。这个地址被 <code>.</code> 分隔为四个部分，每个部分 8 个 bit，总共 32 位。这样产生的 IP 地址的数量很快就不够用了，于是就有了 IPv6，也就是上面输出结果里面 <strong>fe80::8680:6dc5:6ac2:c92b/64</strong> ，有 128 位。</p><p><strong>scope</strong>在 IP 地址的后面， <code>global</code>说明这张网卡是可以对外的，可以接收来自各个地方的包。 <code>host</code> 说明这张网卡仅仅可以供本机相互通信。</p><p><strong>link/ether fa:16:3e:c7:79:75 brd ff:ff:ff:ff:ff:ff</strong> 被称为<strong>MAC 地址</strong><code>Media Access Control</code>，是一个网卡的物理地址，用十六进制，6 个 byte 表示。MAC 地址的通信范围比较小，局限在一个子网里面。</p><p><strong>&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</strong> 叫作<strong>网络设备的状态标识</strong> <code>net_device flags</code></p><ul><li><code>UP</code> 表示网卡处于启动的状态 </li><li><code>BROADCAST</code> 表示这个网卡有广播地址，可以发送广播</li><li><code>MULTICAST</code> 表示网卡可以发送多播包</li><li><code>LOWER_UP</code> 表示 L1 是启动的，即插着网线</li><li><code>MTU1500</code> 指最大传输单元 <code>MTU</code> 为 1500，表示的是链路层包的大小，这是以太网的默认值，规定连 MAC 头带正文合起来，不允许超过 1500 个<strong>字节</strong>。<strong>如果放不下就需要分片来传输。</strong></li></ul><p><strong>qdisc</strong> 是<strong>排队规则</strong><code>queueing discipline</code>。内核如果需要通过某个网络接口发送数据包，它都需要按照为这个接口配置的排队规则把数据包加入队列。</p><ul><li><p><code>pfifo</code> 是最简单的规则，它不对进入的数据包做任何的处理，数据包采用先入先出的方式通过队列</p></li><li><p><code>pfifo_fast</code> 稍微复杂一些，它的队列包括三个<strong>波段</strong> <code>band</code> 。在每个波段里面，使用先进先出规则。三个波段的优先级也不相同。<code>band 0</code> 的优先级最高，<code>band 2</code> 的最低。如果 <code>band 0</code> 里面有数据包，系统就不会处理 <code>band 1</code> 里面的数据包。</p><p>数据包是按照<strong>服务类型</strong> <code>Type of Service</code> （<code>TOS</code>）被分配到三个波段里的。TOS 是 IP 头里面的一个字段，代表了当前的包是高优先级的，还是低优先级的</p></li></ul><hr><p>​    </p><p>​        </p><h4 id="配置-IP-地址"><a href="#配置-IP-地址" class="headerlink" title="配置 IP 地址"></a>配置 IP 地址</h4><p><strong>net-tools：</strong></p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo ifconfig eth1 10.0.0.1/24$ sudo ifconfig eth1 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>iproute2：</strong></p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo ip addr add 10.0.0.1/24 dev eth1$ sudo ip link set up eth1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    </p><p>&emsp;&emsp;Linux 首先会判断要去的地址是一个网段的吗，或者和一个网卡是同一网段的吗？只有是一个网段的，它才会发送 ARP 请求，获取 MAC 地址。如果发现不是，<strong>Linux 默认的逻辑是，如果这是一个跨网段的调用，便不会直接将包发送到网络上，而是企图将包发送到网关。</strong>如果配置了网关，Linux 会获取网关的 MAC 地址，然后将包发出去。（网关要和当前的网络至少一个网卡是同一个网段的）</p><p>​    </p><p>​    </p><h4 id="IP-地址分类"><a href="#IP-地址分类" class="headerlink" title="IP 地址分类"></a>IP 地址分类</h4><p>32 位的 IP 地址被分成了 5 类</p><p><img src="image-20210208175314831.png"></p><p>在网络地址中，对于 A、B、 C 类主要分两部分，<strong>前面一部分是网络号，后面一部分是主机号</strong>。</p><p>下面这个表格展示了 A、B、C 三类地址能包含的主机数量</p><p><img src="image-20210208180327902.png"></p><p><strong>问题</strong>： C 类地址能包含的最大主机数量实在太少了，只有 254 个，而 B 类地址能包含的最大主机数量又太多了，6 万多台机器放在一个网络下面，一般的企业基本达不到这个规模，闲着的地址就是浪费。</p><p>一个折中的方式叫作<strong>无类型域间选路</strong></p><p>​    </p><p>​    </p><h4 id="公有-私有-IP-地址"><a href="#公有-私有-IP-地址" class="headerlink" title="公有/私有 IP 地址"></a>公有/私有 IP 地址</h4><p>&emsp;&emsp;上面的表格最右列是私有 IP 地址段。平时看到的数据中心里，办公室、家里或学校的 IP 地址，一般都是私有 IP 地址段。因为这些地址允许组织内部的 IT 人员自己管理、自己分配，而且可以重复。但是出了内网就需要使用公有 IP 地址。</p><p>&emsp;&emsp;表格中的 <strong>192.168.0.x</strong> 是最常用的私有 IP 地址。家里有 Wi-Fi，对应就会有一个 IP 地址。一般家中上网设备不会超过 256 个，所以 /24 基本就够了。 <strong>192.168.0</strong> 是网络号，后面是主机号。而整个网络里面的第一个地址 <strong>192.168.0.1</strong> 往往就是私有网络的出口地址。例如家里的电脑连接 Wi-Fi，Wi-Fi 路由器的地址就是 <strong>192.168.0.1</strong>，而 <strong>192.168.0.255</strong> 就是广播地址。一旦发送这个地址，整个 <strong>192.168.0</strong> 网络里面的所有机器都能收到。</p><p>​    </p><p>​    </p><h4 id="无类型域间选路-CIDR"><a href="#无类型域间选路-CIDR" class="headerlink" title="无类型域间选路 CIDR"></a>无类型域间选路 <code>CIDR</code></h4><p>&emsp;&emsp;CIDR打破了原来设计的几类地址的做法，将 32 位的 IP 地址一分为二，前面是<strong>网络号</strong>，后面是<strong>主机号</strong>。如 IP地址 <strong>10.100.122.2/24</strong>，这种地址表示形式就是 CIDR。 24 的意思是：32 位中前 24 位是网络号，后 8 位是主机号。</p><p>&emsp;&emsp;伴随 CIDR 存在的，一个是<strong>广播地址</strong>，如果发送地址<strong>10.100.122.255</strong>，所有 <strong>10.100.122</strong> 网络里面的机器都可以收到。另一个是<strong>子网掩码</strong>，<strong>将子网掩码和 IP 地址按位计算 AND，就可得到网络号。</strong>将子网掩码 <strong>255.255.255.0</strong> 和 IP 地址进行 AND 计算为 <strong>10.100.122.0</strong></p><p>​    </p><p>​    </p><h4 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 <code>DHCP</code></h4><p>&emsp;&emsp;客户端的机器每次使用都要配置 IP 地址怎么办？因此需要有一个自动配置的协议。</p><p>&emsp;&emsp;<strong>动态主机配置协议</strong>（<code>Dynamic Host Configuration Protocol，DHCP</code>）主要是用来给客户租用 IP 地址，网络管理员只需要配置一段共享的 IP 地址。每一台新接入的机器都通过 DHCP 协议，来这个共享的 IP 地址里申请，然后自动配置好，用完了还回去。DHCP 协议能给客户推荐<code>PXE</code>帮助安装操作系统，在云计算领域大有用处。</p><p>​    </p><p>​    </p><h2 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h2><p>&emsp;&emsp;<strong>ICMP</strong>全称是 <code>Internet Control Message Protocol</code> ，就是<strong>互联网控制报文协议</strong>。是一种基于 IP 协议的控制协议。网络包在异常复杂的网络环境中传输时，常常会遇到各种各样的问题。当遇到问题的时候，要传出消息来报告情况，调整传输策略。</p><p>&emsp;&emsp;<strong>ICMP 报文封装在 IP 包里面</strong>。因为传输指令的时候需要源地址和目标地址。</p><p><img src="image-20210405175650430.png" alt="ICMP 报文"></p><p>ICMP 在 IP 报文后加入了新的内容，这些内容包括：</p><ul><li>类型：ICMP 报文有很多的类型，不同的类型有不同的代码，其中 ping 的请求类型为 8（主动请求），应答为 0</li><li>代码：进一步划分 ICMP 的类型, 用来查找产生错误的原因</li><li>校验和：用于检查错误的数据</li></ul><p>​    </p><p>​    </p><h3 id="查询报文类型"><a href="#查询报文类型" class="headerlink" title="查询报文类型"></a>查询报文类型</h3><p>&emsp;&emsp;例如，<strong>ping 就是查询报文，是一种主动请求，并且获得主动应答的 ICMP 协议。</strong></p><p>&emsp;&emsp;对 ping 的主动请求进行网络抓包，称为<strong>ICMP ECHO REQUEST。</strong>同理主动请求的回复称为<strong>ICMP ECHO REPLY</strong>。比起原生的 ICMP，这里面多了两个字段：<strong>标识符、顺序号</strong>。<strong>顺序号</strong>主要用于区分连续 ping 的时候发出的多个数据包。每发出一个请求数据包，顺序号会自动加 1。为了能够计算往返时间 RTT，它会在报文的数据部分插入发送时间。</p><p>&emsp;&emsp;在选项数据中，ping 还会在报文的数据部分插入发送时间，来计算往返时间，说明路程的长短。</p><p>​    </p><p>​    </p><h3 id="差错报文类型"><a href="#差错报文类型" class="headerlink" title="差错报文类型"></a>差错报文类型</h3><p>&emsp;&emsp;异常情况发起的，来报告发生了不好的事情，对应 ICMP 的<strong>差错报文类型</strong>。<strong>终点不可达为 3，源抑制为 4，超时为 11，重定向为 5</strong>。</p><ul><li><p><strong>源站抑制</strong>，也就是让源站放慢发送速度。</p></li><li><p><strong>时间超时</strong>，也就是超过网络包的生存时间还是没到。</p></li><li><p><strong>路由重定向</strong>，也就是让下次发给另一个路由器。</p></li></ul><p>&emsp;&emsp;差错报文的结构前面还是 IP，ICMP 的前 8 字节不变，后面则跟上出错的那个 IP 包的 IP 头和 IP 正文的前 8 个字节。</p><p>​    </p><p>​    </p><h3 id="ping：查询报文类型的使用"><a href="#ping：查询报文类型的使用" class="headerlink" title="ping：查询报文类型的使用"></a>ping：查询报文类型的使用</h3><p><img src="image-20210405185245423.png"></p><p>&emsp;&emsp;ping 命令执行的时候，源主机首先会构建一个 <strong>ICMP 请求数据包</strong>，ICMP 数据包内包含多个字段。然后，由 ICMP 协议将这个数据包连同地址 <strong>192.168.1.2</strong> 一起交给 IP 层构建一个 IP 数据包。</p><p>&emsp;&emsp;IP 报文通过 ARP 协议，源地址和目的地址被翻译成 MAC 地址，由数据链路层构建一个数据帧后（目的地址是 IP 层传过来的 MAC 地址，源地址则是本机的 MAC 地址），依据以太网的介质访问规则，报文被传输出去。</p><p>&emsp;&emsp;当报文到达目的地址之后，目的地址所在的主机也按照 ICMP 协议进行应答。主机 B 会构建一个 <strong>ICMP 应答包</strong>，应答数据包的类型字段为 0，顺序号为接收到的请求数据包中的顺序号，然后再发送出去给主机 A。</p><p>&emsp;&emsp;应答数据到达源地址之后，ping 命令可以通过再次<strong>解析 ICMP 报文，对比序列号，计算时间戳等</strong>来完成每个发送 - 应答的显示。</p><hr><p>&emsp;&emsp;如果跨网段的话，还会涉及网关的转发、路由器的转发等等。但是对于 ICMP 的头来讲是没什么影响的。</p><p>&emsp;&emsp;如果在自己的可控范围之内，遇到网络不通时，除了直接 ping 目标的 IP 地址之外，应该要清楚地知道一个网络包从源地址到目标地址都经过了哪些设备，然后逐个 ping 中间的这些设备。如果可能的话，在关键点通过 <strong>tcpdump</strong> 查看包有没有到达某个点，回复的包到达了哪个点。</p><p>&emsp;&emsp;如果不在我们的控制范围内，很多中间设备都是禁止 ping 的。这个时候就要使用 <strong>telnet</strong>，或其他协议来测试网络是否通。</p><p>​    </p><p>​    </p><h3 id="Traceroute：差错报文类型的使用"><a href="#Traceroute：差错报文类型的使用" class="headerlink" title="Traceroute：差错报文类型的使用"></a>Traceroute：差错报文类型的使用</h3><p>&emsp;&emsp;Traceroute会使用 ICMP 的规则，故意制造一些能够产生错误的场景。</p><ul><li><p><strong>故意设置特殊的 TTL ，来追踪去往目的地时沿途经过的路由器</strong>。发送一份<strong>TTL字段为1</strong>的 UDP 数据包给目的主机，处理这个数据包的第一个路由器将TTL值减1，然后丢弃该数据包，并给源主机发送一个ICMP报文（<strong>时间超时</strong>，这个报文包含了路由器的IP地址，这样就得到了第一个路由器的地址），然后发送一个TTL为2的数据报来得到第二个路由器的IP地址，继续这个过程，直至这个数据报到达目的主机。（有的路由器不会回 ICMP，这也是 Traceroute 一个公网的地址看不到中间路由的原因）</p><blockquote><p>怎么知道 UDP 到达了目的主机？</p><p>发送一份 UDP 数据报给目的主机，但选择一个大于 30000的值作为 UDP 端口号。当该数据报到达时，将使目的主机的 UDP 模块产生一份<strong>端口不可达</strong>错误 ICMP 报文。如果数据报没有到达，则可能是超时。</p></blockquote></li><li><p><strong>故意设置不分片，从而确定路径的 MTU。</strong>首先发送分组，并设置“不分片”标志。发送的第一个分组的长度正好与出口 MTU 相等。如果中间遇到窄的关口会被卡住，会发送 ICMP 网络差错包，类型为<strong>需要进行分片但设置了不分片位</strong>。每次收到 ICMP不能分片差错时就减小分组的长度，直到到达目标主机。</p></li></ul><p>​    </p><blockquote><p>当发送的报文出问题的时候，会发送一个 ICMP 的差错报文来报告错误，但是如果 ICMP 的差错报文也出问题了呢？</p></blockquote><p>​    </p><p>​    </p><h2 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h2><p>​    </p><p>​    </p><h1 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h1><p>&emsp;&emsp;几台电脑可以通过集线器连接成一个小的局域网。集线器完全在物理层工作，它会将自己收到的每一个字节，都复制到其他端口上去。</p><p>如果每一台电脑发出的包，每个电脑都能收到，这需要解决几个问题：</p><ol><li>这个包是发给谁的？谁应该接收？</li><li>会不会产生混乱？有没有先后规则？</li><li>如果发送的时候出现了错误怎么办？</li></ol><hr><p>&emsp;&emsp;MAC层要控制在往媒体上发数据时的先后问题，防止发生混乱，解决了媒体接入控制的问题。这个问题中的规则叫<strong>多路访问</strong>。有很多算法可以解决这个问题，比如<strong>信道划分</strong>、<strong>轮流协议</strong>、<strong>随机接入协议</strong>。</p><p>&emsp;&emsp;解决第一个问题要用到一个物理地址，叫作<strong>链路层地址。</strong>但是因为第二层主要解决媒体接入控制的问题，所以它常被称为<strong>MAC 地址</strong>。</p><p><img src="image-20210208214737970.png" alt="第二层的网络包格式"></p><p>&emsp;&emsp;有了目标 MAC 地址，数据包在链路上广播，MAC 的网卡才能发现这个包是给它的。返回的时候，源 MAC 就变成了目标 MAC，再返给请求的机器。</p><p>&emsp;&emsp;对于以太网，第二层的最后面是<strong>CRC</strong>，也就是<strong>循环冗余检测</strong>。通过 XOR 异或的算法，来计算整个包是否在发送的过程中出现了错误，主要解决第三个问题。</p><p>&emsp;&emsp;如果源机器不知道目标机器的地址，就会用到<strong>ARP 协议</strong></p><p>​    </p><p>​        </p><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><blockquote><p>已知 IP 地址，求 MAC 地址的协议</p></blockquote><p><img src="image-20210208215910970.png"></p><p>在一个局域网里面，当知道了 IP 地址，不知道 MAC 怎么办呢？靠广播</p><p><img src="image-20210208220005626.png"></p><p>广而告之，发送一个广播包，谁是这个 IP 谁来回答。具体询问和回答的报文就像下面这样：</p><p><img src="image-20210208220045779.png"></p><p>为了避免每次都用 ARP 请求，机器本地也会进行 ARP 缓存。机器会不断地上线下线，IP 也可能会变，所以 ARP 的 MAC 地址缓存过一段时间会过期。</p><p>​    </p><blockquote><p>&emsp;&emsp;RARP 协议：已知 MAC 求 IP</p><ul><li><p>无盘工作站无法持久化IP地址到本地，但有网卡，所以可以用RARP协议来获取IP地址</p></li><li><p>RARP可以用于局域网管理员想指定机器IP，又不想每台机器去设置静态IP的情况，可以在RARP服务器上配置MAC和IP对应的ARP表</p></li></ul></blockquote><p>​    </p><p>​    </p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><blockquote><p><strong>检查目标 MAC 地址</strong>，然后根据策略转发的设备。</p></blockquote><p>&emsp;&emsp;一台 MAC1 电脑将一个包发送给另一台 MAC2 电脑，当这个包到达交换机的时候，一开始交换机也不知道 MAC2 的电脑在哪个口，它只能将包转发给除了来的那个口之外的其他所有的口。但是，这时交换机会记住，MAC1 是来自一个明确的口。</p><p>&emsp;&emsp;过了一段时间之后，就有了整个网络的一个结构了，这个时候，基本上不用广播了，全部可以准确转发。每个机器的 IP 地址会变，所在的口也会变，因而交换机上的学习的结果，称为<strong>转发表</strong>，是有一个过期时间的。</p><p>​    </p><h3 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h3><p>&emsp;&emsp;在复杂的场景下如办公室，一个交换机不够用，需要多台交换机，交换机之间连接起来，这就形成一个<strong>拓扑结构</strong></p><hr><p><img src="image-20210208230459151.png" alt="两台交换机"></p><p>&emsp;&emsp;上图中两台交换机连接三个局域网，每个局域网上有多台机器</p><p>&emsp;&emsp;如果机器 1 只知道机器 4 的 IP 地址，当它想要访问机器 4 把包发出去的时候，必须要知道机器 4 的 MAC 地址，于是机器 1 发起广播。交换机 A 一开始不知道任何拓扑信息，在收到广播后采取的策略是：<strong>除了广播包来的方向外，它还要转发给其他所有的网口。</strong>交换机 B 同理，将包转发到 LAN3 。机器 4 收到了广播信息，主动响应 MAC 地址，<strong>一个 ARP 请求完成</strong>。</p><p>&emsp;&emsp;交换机了解到拓扑信息后，情况就好转起来。</p><p>&emsp;&emsp;当机器 3 要访问机器 1 时也需要发起一个广播的 ARP 请求。交换机 A 和 B 都能够收到这个请求。交换机 A 知道主机 1 是在左边网口，所以会把广播消息转发到 LAN1 。交换机 B 则不会将消息广播到 LAN3 。</p><hr><p>&emsp;&emsp;当交换机的数目越来越多时，交换机之间为了冗余、带宽提升、或错误连接难免会产生一个封闭的物理环路，遭遇<strong>环路问题</strong>，产生广播风暴（网络包迷路，一个包转来转去，每台机器都会发广播包，交换机转发也会复制广播包，当广播包越来越多的时候，路会越来越堵）这就需要使用 <strong>STP 协议，将有环路的图变成没有环路的树</strong>。将物理上存在环路的网络，通过算法在逻辑上阻塞一些端口。</p><p><img src="image-20210405164240615.png"></p><blockquote><p>STP缺点：一个是某个交换机状态发生变化的时候，整个树需要重新构建；被破开的环的链路被浪费了</p></blockquote><p>​    </p><p>​    </p><h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><p>&emsp;&emsp;交换机数目多会面临<strong>隔离问题</strong>，可以通过 VLAN 形成<strong>虚拟局域网</strong>，从而解决<strong>广播问题和安全问题</strong>。</p><p>&emsp;&emsp;交换机可以设置交换机每个口所属的 VLAN，且可以重新设置。交换机区分局域网只需要在原来的二层的头上加一个 <code>TAG</code>，其中有一个12 位的 <code>VLAN ID</code>（<strong>可以划分 4096 个 VLAN</strong>）。如果交换机支持 VLAN ，取下二层的头时，就能够识别 VLAN ID 。只有<strong>相同 VLAN 的包，才会互相转发</strong>，不同 VLAN 的包是看不到的。</p><p><img src="image-20210208225008078.png"></p><p>&emsp;&emsp;对于支持 VLAN 的交换机，交换机之间可以使用<strong>Trunk 口</strong>连接。它可以转发属于任何 VLAN 的口。</p><p><img src="image-20210208225350460.png"></p><p>​    </p><p>​    </p><h2 id="STP"><a href="#STP" class="headerlink" title="STP"></a>STP</h2><blockquote><p>概念：</p><ul><li><strong>Root Bridge</strong>，<strong>根交换机</strong>。是某棵树的老大。</li><li><strong>Designated Bridges</strong>，<strong>指定交换机</strong>。就是一棵树的树枝。</li><li><strong>Bridge Protocol Data Units （BPDU）</strong> ，<strong>网桥协议数据单元</strong>。交换机相连的时候，就需要“相互比较实力”。BPDU 只有根交换机能发。</li><li><strong>Priority Vector</strong>，<strong>优先级向量</strong>。[Root Bridge ID, Root Path Cost, Bridge ID, and Port ID]。先看 Root Bridge ID，再比 Root Path Cost，也即距离老大的距离，最后比 Bridge ID，拿自己的本事比。</li></ul></blockquote><p>生成树协议运行生成树算法过程可以归纳为以下三个步骤：</p><ol><li>选择根交换机</li><li>选择根端口</li><li>选择指定端口</li></ol><p>​    </p><p>​    </p><h1 id="移动网络"><a href="#移动网络" class="headerlink" title="移动网络"></a>移动网络</h1><h2 id="2G-网络"><a href="#2G-网络" class="headerlink" title="2G 网络"></a>2G 网络</h2><p>手机本来是用来打电话的而不是用来上网的，在 2G 时代上网使用的不是 IP 网络而是<strong>电话网络</strong>，走模拟信号，专业名称为公共交换电话网<code>Public Switched Telephone Network</code>（<code>PSTN</code>）</p><p>手机是通过收发无线信号来通信的，专业名称是 Mobile Station，简称 MS，需要嵌入 SIM。手机是客户端，而无线信号的服务端，就是基站子系统（BSS，Base Station SubsystemBSS）。至于什么是基站，你可以回想一下，你在爬山的时候，是不是看到过信号塔？我们平时城市里面的基站比较隐蔽，不容易看到，所以只有在山里才会注意到。正是这个信号塔，通过无线信号，让你的手机可以进行通信。</p><p><strong>无论无线通信如何无线，最终还是要连接到有线的网络里</strong>。前面讲数据中心的时候我也讲过，电商的应用是放在数据中心的，数据中心的电脑都是插着网线的。</p><p>因而，基站子系统分两部分，一部分对外提供无线通信，叫作基站收发信台（BTS，Base Transceiver Station），另一部分对内连接有线网络，叫作基站控制器（BSC，Base Station Controller）。基站收发信台通过无线收到数据后，转发给基站控制器。</p><p>这部分属于无线的部分，统称为无线接入网（RAN，Radio Access Network）。</p><p>基站控制器通过有线网络，连接到提供手机业务的运营商的数据中心，这部分称为核心网（CN，Core Network）。核心网还没有真的进入互联网，这部分还是主要提供手机业务，是手机业务的有线部分。</p><p>首先接待基站来的数据的是移动业务交换中心（MSC，Mobile Service Switching Center），它是进入核心网的入口，但是它不会让你直接连接到互联网上。</p><p>因为在让你的手机真正进入互联网之前，提供手机业务的运营商，需要认证是不是合法的手机接入。别你自己造了一张手机卡，就连接上来。鉴权中心（AUC，Authentication Center）和设备识别寄存器（EIR，Equipment Identity Register）主要是负责安全性的。</p><p>另外，需要看你是本地的号，还是外地的号，这个牵扯到计费的问题，异地收费还是很贵的。访问位置寄存器（VLR，Visit Location Register）是看你目前在的地方，归属位置寄存器（HLR，Home Location Register）是看你的号码归属地。</p><p>当你的手机卡既合法又有钱的时候，才允许你上网，这个时候需要一个网关，连接核心网和真正的互联网。网关移动交换中心（GMSC ，Gateway Mobile Switching Center）就是干这个的，然后是真正的互连网。在 2G 时代，还是电话网络 PSTN。</p><p>数据中心里面的这些模块统称为网络子系统（NSS，Network and Switching Subsystem）。</p><h3 id="2-5G-网络"><a href="#2-5G-网络" class="headerlink" title="2.5G 网络"></a>2.5G 网络</h3><p>后来从 2G 到了 2.5G，也即在原来电路交换的基础上，加入了分组交换业务，支持 Packet 的转发，从而支持 IP 网络。</p><p>在上述网络的基础上，基站一面朝前接无线，一面朝后接核心网。在朝后的组件中，多了一个分组控制单元（PCU，Packet Control Unit），用以提供分组交换通道。</p><p>在核心网里面，有个朝前的接待员（SGSN，Service GPRS Supported Node）和朝后连接 IP 网络的网关型 GPRS 支持节点（GGSN，Gateway GPRS Supported Node）。3G 网络</p><p>到了 3G 时代，主要是无线通信技术有了改进，大大增加了无线的带宽。</p><p>以 W-CDMA 为例，理论最高 2M 的下行速度，因而基站改变了，一面朝外的是 Node B，一面朝内连接核心网的是无线网络控制器（RNC，Radio Network Controller）。核心网以及连接的 IP 网络没有什么变化。</p><h3 id="4G-网络"><a href="#4G-网络" class="headerlink" title="4G 网络"></a>4G 网络</h3><p>然后就到了今天的 4G 网络，基站为 eNodeB，包含了原来 Node B 和 RNC 的功能，下行速度向百兆级别迈进。另外，核心网实现了控制面和数据面的分离，这个怎么理解呢？</p><p>在前面的核心网里面，有接待员 MSC 或者 SGSN，你会发现检查是否合法是它负责，转发数据也是它负责，也即控制面和数据面是合二为一的，这样灵活性比较差，因为控制面主要是指令，多是小包，往往需要高的及时性；数据面主要是流量，多是大包，往往需要吞吐量。</p><p>于是有了下面这个架构。HSS 用于存储用户签约信息的数据库，其实就是你这个号码归属地是哪里的，以及一些认证信息。</p><p>MME 是核心控制网元，是控制面的核心，当手机通过 eNodeB 连上的时候，MME 会根据 HSS 的信息，判断你是否合法。如果允许连上来，MME 不负责具体的数据的流量，而是 MME 会选择数据面的 SGW 和 PGW，然后告诉 eNodeB，我允许你连上来了，你连接它们吧。</p><p>于是手机直接通过 eNodeB 连接 SGW，连上核心网，SGW 相当于数据面的接待员，并通过 PGW 连到 IP 网络。PGW 就是出口网关。在出口网关，有一个组件 PCRF，称为策略和计费控制单元，用来控制上网策略和流量的计费。</p><h2 id="4G-网络协议解析"><a href="#4G-网络协议解析" class="headerlink" title="4G 网络协议解析"></a>4G 网络协议解析</h2><p>我们来仔细看一下 4G 网络的协议，真的非常复杂。我们将几个关键组件放大来看。</p><h3 id="控制面协议"><a href="#控制面协议" class="headerlink" title="控制面协议"></a>控制面协议</h3><p>其中虚线部分是控制面的协议。当一个手机想上网的时候，先要连接 eNodeB，并通过 S1-MME 接口，请求 MME 对这个手机进行认证和鉴权。S1-MME 协议栈如下图所示。</p><p>UE 就是你的手机，eNodeB 还是两面派，朝前对接无线网络，朝后对接核心网络，在控制面对接的是 MME。</p><p>eNodeB 和 MME 之间的连接就是很正常的 IP 网络，但是这里面在 IP 层之上，却既不是 TCP，也不是 UDP，而是 SCTP。这也是传输层的协议，也是面向连接的，但是更加适合移动网络。 它继承了 TCP 较为完善的拥塞控制并改进 TCP 的一些不足之处。</p><p>SCTP 的第一个特点是<strong>多宿主</strong>。一台机器可以有多个网卡，而对于 TCP 连接来讲，虽然服务端可以监听 0.0.0.0，也就是从哪个网卡来的连接都能接受，但是一旦建立了连接，就建立了四元组，也就选定了某个网卡。</p><p>SCTP 引入了联合（association）的概念，将多个接口、多条路径放到一个联合中来。当检测到一条路径失效时，协议就会通过另外一条路径来发送通信数据。应用程序甚至都不必知道发生了故障、恢复，从而提供更高的可用性和可靠性。</p><p>SCTP 的第二个特点是<strong>将一个联合分成多个流</strong>。一个联合中的所有流都是独立的，但均与该联合相关。每个流都给定了一个流编号，它被编码到 SCTP 报文中，通过联合在网络上传送。在 TCP 的机制中，由于强制顺序，导致前一个不到达，后一个就得等待，SCTP 的多个流不会相互阻塞。</p><p>SCTP 的第三个特点是<strong>四次握手，防止 SYN 攻击</strong>。在 TCP 中是三次握手，当服务端收到客户的 SYN 之后，返回一个 SYN-ACK 之前，就建立数据结构，并记录下状态，等待客户端发送 ACK 的 ACK。当恶意客户端使用虚假的源地址来伪造大量 SYN 报文时，服务端需要分配大量的资源，最终耗尽资源，无法处理新的请求。</p><p>SCTP 可以通过四次握手引入 Cookie 的概念，来有效地防止这种攻击的产生。在 SCTP 中，客户机使用一个 INIT 报文发起一个连接。服务器使用一个 INIT-ACK 报文进行响应，其中就包括了 Cookie。然后客户端就使用一个 COOKIE-ECHO 报文进行响应，其中包含了服务器所发送的 Cookie。这个时候，服务器为这个连接分配资源，并通过向客户机发送一个 COOKIE-ACK 报文对其进行响应。</p><p>SCTP 的第四个特点是<strong>将消息分帧</strong>。TCP 是面向流的，也即发送的数据没头没尾，没有明显的界限。这对于发送数据没有问题，但是对于发送一个个消息类型的数据，就不太方便。有可能客户端写入 10 个字节，然后再写入 20 个字节。服务端不是读出 10 个字节的一个消息，再读出 20 个字节的一个消息，而有可能读入 25 个字节，再读入 5 个字节，需要业务层去组合成消息。</p><p>SCTP 借鉴了 UDP 的机制，在数据传输中提供了消息分帧功能。当一端对一个套接字执行写操作时，可确保对等端读出的数据大小与此相同。</p><p>SCTP 的第五个特点是<strong>断开连接是三次挥手</strong>。在 TCP 里面，断开连接是四次挥手，允许另一端处于半关闭的状态。SCTP 选择放弃这种状态，当一端关闭自己的套接字时，对等的两端全部需要关闭，将来任何一端都不允许再进行数据的移动了。</p><p>当 MME 通过认证鉴权，同意这个手机上网的时候，需要建立一个数据面的数据通路。建立通路的过程还是控制面的事情，因而使用的是控制面的协议 GTP-C。</p><p>建设的数据通路分两段路，其实是两个隧道。一段是从 eNodeB 到 SGW，这个数据通路由 MME 通过 S1-MME 协议告诉 eNodeB，它是隧道的一端，通过 S11 告诉 SGW，它是隧道的另一端。第二端是从 SGW 到 PGW，SGW 通过 S11 协议知道自己是其中一端，并主动通过 S5 协议，告诉 PGW 它是隧道的另一端。</p><p>GTP-C 协议是基于 UDP 的，这是<a href="https://time.geekbang.org/column/article/8924">UDP 的“城会玩”</a>中的一个例子。如果看 GTP 头，我们可以看到，这里面有隧道的 ID，还有序列号。</p><p>通过序列号，不用 TCP，GTP-C 自己就可以实现可靠性，为每个输出信令消息分配一个依次递增的序列号，以确保信令消息的按序传递，并便于检测重复包。对于每个输出信令消息启动定时器，在定时器超时前未接收到响应消息则进行重发。</p><h4 id="数据面协议"><a href="#数据面协议" class="headerlink" title="数据面协议"></a>数据面协议</h4><p>当两个隧道都打通，接在一起的时候，PGW 会给手机分配一个 IP 地址，这个 IP 地址是隧道内部的 IP 地址，可以类比为 IPsec 协议里面的 IP 地址。这个 IP 地址是归手机运营商管理的。然后，手机可以使用这个 IP 地址，连接 eNodeB，从 eNodeB 经过 S1-U 协议，通过第一段隧道到达 SGW，再从 SGW 经过 S8 协议，通过第二段隧道到达 PGW，然后通过 PGW 连接到互联网。</p><p>数据面的协议都是通过 GTP-U，如图所示。</p><p>手机每发出的一个包，都由 GTP-U 隧道协议封装起来，格式如下。</p><p>和 IPsec 协议很类似，分为乘客协议、隧道协议、承载协议。其中乘客协议是手机发出来的包，IP 是手机的 IP，隧道协议里面有隧道 ID，不同的手机上线会建立不同的隧道，因而需要隧道 ID 来标识。承载协议的 IP 地址是 SGW 和 PGW 的 IP 地址。</p><h4 id="手机上网流程"><a href="#手机上网流程" class="headerlink" title="手机上网流程"></a>手机上网流程</h4><p>接下来，我们来看一个手机开机之后上网的流程，这个过程称为<strong>Attach</strong>。可以看出来，移动网络还是很复杂的。因为这个过程要建立很多的隧道，分配很多的隧道 ID，所以我画了一个图来详细说明这个过程。</p><ol><li>手机开机以后，在附近寻找基站 eNodeB，找到后给 eNodeB 发送 Attach Request，说“我来啦，我要上网”。</li><li>eNodeB 将请求发给 MME，说“有个手机要上网”。</li><li>MME 去请求手机，一是认证，二是鉴权，还会请求 HSS 看看有没有钱，看看是在哪里上网。</li><li>当 MME 通过了手机的认证之后，开始分配隧道，先告诉 SGW，说要创建一个会话（Create Session）。在这里面，会给 SGW 分配一个隧道 ID t1，并且请求 SGW 给自己也分配一个隧道 ID。</li><li>SGW 转头向 PGW 请求建立一个会话，为 PGW 的控制面分配一个隧道 ID t2，也给 PGW 的数据面分配一个隧道 ID t3，并且请求 PGW 给自己的控制面和数据面分配隧道 ID。</li><li>PGW 回复 SGW 说“创建会话成功”，使用自己的控制面隧道 ID t2，回复里面携带着给 SGW 控制面分配的隧道 ID t4 和控制面的隧道 ID t5，至此 SGW 和 PGW 直接的隧道建设完成。双方请求对方，都要带着对方给自己分配的隧道 ID，从而标志是这个手机的请求。</li><li>接下来 SGW 回复 MME 说“创建会话成功”，使用自己的隧道 ID t1 访问 MME，回复里面有给 MME 分配隧道 ID t6，也有 SGW 给 eNodeB 分配的隧道 ID t7。</li><li>当 MME 发现后面的隧道都建设成功之后，就告诉 eNodeB，“后面的隧道已经建设完毕，SGW 给你分配的隧道 ID 是 t7，你可以开始连上来了，但是你也要给 SGW 分配一个隧道 ID”。</li><li>eNodeB 告诉 MME 自己给 SGW 分配一个隧道，ID 为 t8。</li><li>MME 将 eNodeB 给 SGW 分配的隧道 ID t8 告知 SGW，从而前面的隧道也建设完毕。</li></ol><p>这样，手机就可以通过建立的隧道成功上网了。</p><h4 id="异地上网问题"><a href="#异地上网问题" class="headerlink" title="异地上网问题"></a>异地上网问题</h4><p>接下来我们考虑异地上网的事情。</p><p>为什么要分 SGW 和 PGW 呢，一个 GW 不可以吗？SGW 是你本地的运营商的设备，而 PGW 是你所属的运营商的设备。</p><p>如果你在巴塞罗那，一下飞机，手机开机，周围搜寻到的肯定是巴塞罗那的 eNodeB。通过 MME 去查寻国内运营商的 HSS，看你是否合法，是否还有钱。如果允许上网，你的手机和巴塞罗那的 SGW 会建立一个隧道，然后巴塞罗那的 SGW 和国内运营商的 PGW 建立一个隧道，然后通过国内运营商的 PGW 上网。这样判断你是否能上网的在国内运营商的 HSS，控制你上网策略的是国内运营商的 PCRF，给手机分配的 IP 地址也是国内运营商的 PGW 负责的，给手机分配的 IP 地址也是国内运营商里统计的。运营商由于是在 PGW 里面统计的，这样你的上网流量全部通过国内运营商即可，只不过巴塞罗那运营商也要和国内运营商进行流量结算。</p><p>由于你的上网策略是由国内运营商在 PCRF 中控制的，因而你还是上不了脸书。</p><p>好了，这一节就到这里了，我们来总结一下：</p><ul><li>移动网络的发展历程从 2G 到 3G，再到 4G，逐渐从打电话的功能为主，向上网的功能为主转变；</li><li>请记住 4G 网络的结构，有 eNodeB、MME、SGW、PGW 等，分控制面协议和数据面协议，你可以对照着结构，试着说出手机上网的流程；</li><li>即便你在国外的运营商下上网，也是要通过国内运营商控制的，因而也上不了脸书。</li></ul><p>最后，给你留两个思考题：</p><ol><li>咱们上网都有套餐，有交钱多的，有交钱少的，你知道移动网络是如何控制不同优先级的用户的上网流量的吗？</li><li>前面讲过的所有的网络都是基于物理机的，随着云计算兴起，无论是电商，还是移动网络都要部署在云中了，你知道云中网络的设计有哪些要点吗？</li></ol><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><h3 id="软件定义网络"><a href="#软件定义网络" class="headerlink" title="软件定义网络"></a>软件定义网络</h3><p>​    </p><p>​    </p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>​    </p><p>​    </p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>​    </p><p>​    </p><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="TCP-IP常见攻击"><a href="#TCP-IP常见攻击" class="headerlink" title="TCP/IP常见攻击"></a>TCP/IP常见攻击</h2><h3 id="IP欺骗"><a href="#IP欺骗" class="headerlink" title="IP欺骗"></a>IP欺骗</h3><blockquote><p>通过IP地址我们能知道什么？</p></blockquote><p>通过 IP 地址，我们就可以知道判断访问对象服务器的位置，通过这个 IP 地址就可以判断访问对象服务器的位置，从而将消息发送到服务器。一般发送者发出的消息首先经过子网的集线器，转发到最近的路由器，然后根据路由位置访问下一个路由器的位置，直到重点</p><blockquote><p>IP欺骗技术</p></blockquote><p>IP 欺骗技术就是<strong>伪造</strong>某台主机的 IP 地址的技术。通过IP 地址的伪装使得某台主机能够<strong>伪装</strong>另外的一台主机，而这台主机往往具有某种特权或者被另外的主机所信任。</p><p>假设现在有一个合法用户 <strong>(1.1.1.1)</strong> 已经同服务器建立正常的连接，攻击者构造攻击的 TCP 数据，伪装自己的 IP 为 <strong>1.1.1.1</strong>，并向服务器发送一个带有 RSI 位的 TCP 数据段。服务器接收到这样的数据后，认为从 <strong>1.1.1.1</strong> 发送的连接有错误，就会清空缓冲区中建立好的连接。</p><p>这时，如果合法用户 <strong>1.1.1.1</strong> 再发送合法数据，服务器就已经没有这样的连接了，该用户就必须从新开始建立连接。攻击时，伪造大量的IP地址，向目标发送 RST 数据，使服务器不对合法用户服务。虽然IP地址欺骗攻击有着相当难度，但我们应该清醒地意识到，这种攻击非常广泛，入侵往往从这种攻击开始。</p><h3 id="SYN-Flooding"><a href="#SYN-Flooding" class="headerlink" title="SYN Flooding"></a>SYN Flooding</h3><blockquote><p>SYN Flooding简介</p></blockquote><p>拒绝服务攻击（DDoS）从1970 年出现直到今天都依然在作祟，并给全球范围内的各大组织带来了不可估量的损失。<strong>SYN Flood</strong>是互联网上最经典的DDoS攻击方式之一，最早出现于 1999 年左右，雅虎是当时最著名的受害者。<strong>SYN Flood</strong>攻击利用了 <strong>TCP</strong> 三次握手的缺陷，能够以较小代价使目标服务器无法响应，且难以追查。</p><p><strong>SYN  flood</strong> 是一种常见的 <strong>DOS</strong>（denial of service拒绝服务）和 <strong>DDos</strong> (distributed denial of serivce 分布式拒绝服务）攻击方式。这是一种使用TCP协议缺陷，发送大量的<strong>伪造的 TCP 连接请求</strong>，使得被攻击方 CPU 或内存资源耗尽，最终导致被攻击方无法提供正常的服务。</p><blockquote><p>TCP SYN Flood攻击原理</p></blockquote><p><strong>TCP  SYN Flood</strong> 攻击利用的是 <strong>TCP</strong> 的三次握手（<strong>SYN -&gt; SYN/ACK -&gt; ACK</strong>），假设连接发起方是A，连接接受方是 B，即 B 在某个端口（<strong>Port</strong>）上监听A发出的连接请求，过程如下图所示，左边是A，右边是B。</p><p><img src="D:\Git-repo\hexo\source_posts\cs-network-protocol\640.png" alt="640"></p><p>A 首先发送 <strong>SYN</strong>（Synchronization）消息给 B，要求 B 做好接收数据的准备；B 收到后反馈 <strong>SYN-ACK</strong>（Synchronization-Acknowledgement） 消息给A，这个消息的目的有两个：</p><ul><li>向 A 确认已做好接收数据的准备，</li><li>同时要求 A 也做好接收数据的准备，此时 B 已向 A 确认好接收状态，并等待 A 的确认，连接处于<strong>半开状态（Half-Open）</strong>，顾名思义只开了一半；A 收到后再次发送 <strong>ACK</strong> (Acknowledgement) 消息给B，向 B 确认也做好了接收数据的准备，至此三次握手完成，「<strong>连接</strong>」就建立了，</li></ul><p>大家注意到没有，最关键的一点在于双方是否都按对方的要求进入了<strong>可以接收消息</strong>的状态。而这个状态的确认主要是双方将要使用的<strong>消息序号(**SquenceNum)，</strong>TCP** 为保证消息按发送顺序抵达接收方的上层应用，需要用<strong>消息序号</strong>来标记消息的发送先后顺序的。</p><p><strong>TCP</strong>是「<strong>双工</strong>」(Duplex)连接，同时支持双向通信，也就是双方同时可向对方发送消息，其中 <strong>SYN</strong> 和 <strong>SYN-ACK</strong> 消息开启了A→B的单向通信通道（B 获知了 A 的消息序号）；<strong>SYN-ACK</strong> 和 <strong>ACK</strong> 消息开启了B→A单向通信通道（A获知了B的消息序号）。</p><p>上面讨论的是双方在诚实守信，正常情况下的通信。</p><p>但实际情况是，网络可能不稳定会丢包，使握手消息不能抵达对方，也可能是对方故意不按规矩来，故意延迟或不发送握手确认消息。</p><p>假设  B 通过某 <strong>TCP</strong> 端口提供服务，B 在收到 A 的 <strong>SYN</strong> 消息时，积极的反馈了 <strong>SYN-ACK</strong> 消息，使连接进入<strong>半开状态</strong>，因为 B 不确定自己发给 A 的 <strong>SYN-ACK</strong> 消息或 A 反馈的 ACK 消息是否会丢在半路，所以会给每个待完成的半开连接都设一个<strong>Timer</strong>，如果超过时间还没有收到 A 的 <strong>ACK</strong> 消息，则重新发送一次 <strong>SYN-ACK</strong> 消息给A，直到重试超过一定次数时才会放弃。</p><p>B 为帮助 A 能顺利连接，需要<strong>分配内核资源</strong>维护半开连接，那么当 B 面临海量的连接 A 时，如上图所示，<strong>SYN Flood</strong> 攻击就形成了。攻击方 A 可以控制肉鸡向 B 发送大量 SYN 消息但不响应 ACK 消息，或者干脆伪造 SYN 消息中的 <strong>Source IP</strong>，使 B 反馈的 <strong>SYN-ACK</strong> 消息石沉大海，导致 B 被大量注定不能完成的半开连接占据，直到资源耗尽，停止响应正常的连接请求。</p><h3 id="UDP-Flooding"><a href="#UDP-Flooding" class="headerlink" title="UDP Flooding"></a>UDP Flooding</h3><p><strong>UDP</strong> 洪泛是也是一种拒绝服务攻击，将大量的用户数据报协议（<strong>UDP</strong>）数据包发送到目标服务器，目的是压倒该设备的处理和响应能力。防火墙保护目标服务器也可能因 <strong>UDP</strong> 泛滥而耗尽，从而导致对合法流量的拒绝服务。</p><blockquote><p>UDP Flood攻击如何工作？</p></blockquote><p><strong>UDP Flood</strong> 主要通过利用服务器响应发送到其中一个端口的 <strong>UDP</strong> 数据包所采取的步骤。在正常情况下，当服务器在特定端口接收到 <strong>UDP</strong> 数据包时，会经过两个步骤：</p><ul><li>服务器首先检查是否正在运行正在侦听指定端口的请求的程序。</li><li>如果没有程序在该端口接收数据包，则服务器使用 <strong>ICMP</strong>（ping）数据包进行响应，以通知发送方目的地不可达。</li></ul><p>举个例子。假设今天要联系酒店的小蓝，酒店客服接到电话后先查看房间的列表来确保小蓝在客房内，随后转接给小蓝。</p><p>首先，接待员接收到呼叫者要求连接到特定房间的电话。接待员然后需要查看所有房间的清单，以确保客人在房间中可用，并愿意接听电话。碰巧的是，此时如果突然间所有的电话线同时亮起来，那么他们就会很快就变得不堪重负了。</p><p>当服务器接收到每个新的 <strong>UDP</strong> 数据包时，它将通过步骤来处理请求，并利用该过程中的服务器资源。发送 <strong>UDP</strong> 报文时，每个报文将包含源设备的 <strong>IP</strong> 地址。在这种类型的 <strong>DDoS</strong> 攻击期间，攻击者通常不会使用自己的真实 <strong>IP</strong> 地址，而是会欺骗 <strong>UDP</strong> 数据包的源 <strong>IP</strong> 地址，从而阻止攻击者的真实位置被暴露并潜在地饱和来自目标的响应数据包服务器。</p><p>由于目标服务器利用资源检查并响应每个接收到的 <strong>UDP</strong> 数据包的结果，当接收到大量 <strong>UDP</strong> 数据包时，目标的资源可能会迅速耗尽，导致对正常流量的拒绝服务。</p><p>![640 (1)](D:\Git-repo\hexo\source_posts\cs-network-protocol\640 (1).png)</p><blockquote><p>如何缓解<strong>UDP</strong>洪水攻击？</p></blockquote><p>大多数操作系统部分限制了 <strong>ICMP</strong> 报文的响应速率，以中断需要 ICMP 响应的 <strong>DDoS</strong> 攻击。这种缓解的一个缺点是在攻击过程中，合法的数据包也可能被过滤。如果 <strong>UDP Flood</strong> 的容量足够高以使目标服务器的防火墙的状态表饱和，则在服务器级别发生的任何缓解都将不足以应对目标设备上游的瓶颈。</p><h3 id="4-TCP-重置攻击"><a href="#4-TCP-重置攻击" class="headerlink" title="4 TCP 重置攻击"></a>4 TCP 重置攻击</h3><p>在 <strong>TCP</strong> 重置攻击中，攻击者通过向通信的一方或双方发送伪造的消息，告诉它们立即断开连接，从而使通信双方连接中断。正常情况下，如果客户端收发现到达的报文段对于相关连接而言是不正确的，<strong>TCP</strong> 就会发送一个重置报文段，从而导致 <strong>TCP</strong> 连接的快速拆卸。</p><p><strong>TCP</strong> 重置攻击利用这一机制，通过向通信方发送伪造的重置报文段，欺骗通信双方提前关闭 TCP 连接。如果伪造的重置报文段完全逼真，接收者就会认为它有效，并关闭 <strong>TCP</strong> 连接，防止连接被用来进一步交换信息。服务端可以创建一个新的 <strong>TCP</strong> 连接来恢复通信，但仍然可能会被攻击者重置连接。万幸的是，攻击者需要一定的时间来组装和发送伪造的报文，所以一般情况下这种攻击只对长连接有杀伤力，对于短连接而言，你还没攻击呢，人家已经完成了信息交换。</p><p>从某种意义上来说，伪造 <strong>TCP</strong> 报文段是很容易的，因为 <strong>TCP/IP</strong> 都没有任何内置的方法来验证服务端的身份。有些特殊的 IP 扩展协议（例如 <code>IPSec</code>）确实可以验证身份，但并没有被广泛使用。客户端只能接收报文段，并在可能的情况下使用更高级别的协议（如 <code>TLS</code>）来验证服务端的身份。但这个方法对 <strong>TCP</strong> 重置包并不适用，因为 <strong>TCP</strong> 重置包是 <strong>TCP</strong> 协议本身的一部分，无法使用更高级别的协议进行验证。</p><h3 id="5-模拟攻击"><a href="#5-模拟攻击" class="headerlink" title="5. 模拟攻击"></a>5. 模拟攻击</h3><blockquote><p>以下实验是在 <code>OSX</code> 系统中完成的，其他系统请自行测试。</p></blockquote><p>现在来总结一下伪造一个 <strong>TCP</strong> 重置报文要做哪些事情：</p><ul><li>嗅探通信双方的交换信息。</li><li>截获一个 <code>ACK</code> 标志位置位 1 的报文段，并读取其 <code>ACK</code> 号。</li><li>伪造一个 TCP 重置报文段（<code>RST</code> 标志位置为 1），其序列号等于上面截获的报文的 <code>ACK</code> 号。这只是理想情况下的方案，假设信息交换的速度不是很快。大多数情况下为了增加成功率，可以连续发送序列号不同的重置报文。</li><li>将伪造的重置报文发送给通信的一方或双方，时其中断连接。</li></ul><p>为了实验简单，我们可以使用本地计算机通过 <code>localhost</code> 与自己通信，然后对自己进行 TCP 重置攻击。需要以下几个步骤：</p><ul><li>在两个终端之间建立一个 TCP 连接。</li><li>编写一个能嗅探通信双方数据的攻击程序。</li><li>修改攻击程序，伪造并发送重置报文。</li></ul><p>下面正式开始实验。</p><blockquote><p>建立 TCP 连接</p></blockquote><p>可以使用 netcat 工具来建立 TCP 连接，这个工很多操作系统都预装了。打开第一个终端窗口，运行以下命令：</p><pre><code>$ nc -nvl 8000</code></pre><p>这个命令会启动一个 TCP 服务，监听端口为 <code>8000</code>。接着再打开第二个终端窗口，运行以下命令：</p><pre><code>$ nc 127.0.0.1 8000</code></pre><p>该命令会尝试与上面的服务建立连接，在其中一个窗口输入一些字符，就会通过 TCP 连接发送给另一个窗口并打印出来。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIyMDEzMTA2MQ==&amp;mid=2651155801&amp;idx=1&amp;sn=1e6d78eb10d17eed9b76d9a998dd4721&amp;chksm=8c2176c3bb56ffd58fcf0945b55f61da8276f33ef6e0ac76e65b5879d691d2421e57d53abc5e&amp;mpshare=1&amp;scene=23&amp;srcid=0401A7HxBrZ8LLjyjtiij0y6&amp;sharer_sharetime=1617272795419&amp;sharer_shareid=64abb8dbf61eddce88d292199cd11b73#rd">https://mp.weixin.qq.com/s?__biz=MzIyMDEzMTA2MQ==&amp;mid=2651155801&amp;idx=1&amp;sn=1e6d78eb10d17eed9b76d9a998dd4721&amp;chksm=8c2176c3bb56ffd58fcf0945b55f61da8276f33ef6e0ac76e65b5879d691d2421e57d53abc5e&amp;mpshare=1&amp;scene=23&amp;srcid=0401A7HxBrZ8LLjyjtiij0y6&amp;sharer_sharetime=1617272795419&amp;sharer_shareid=64abb8dbf61eddce88d292199cd11b73#rd</a></p><h1 id="问题和解答"><a href="#问题和解答" class="headerlink" title="问题和解答"></a>问题和解答</h1><p><strong>可以通过路由表得到下一个路由器的 IP 地址，直接通过 IP 地址找就可以了，为什么还要通过本地的 MAC 地址呢？</strong></p><p>在网络包里，有源 IP 地址和目标 IP 地址、源 MAC 地址和目标 MAC 地址。从路由表中取得下一跳的 IP 地址后，应该把这个地址放在哪里呢？如果放在目标 IP 地址里面，谁知道最终的目标在哪里呢？所以要用 MAC 地址。</p><p>所谓的下一跳，看起来是 IP 地址，其实是要通过 ARP 得到 MAC 地址，将下一跳的 MAC 地址放在目标 MAC 地址里面。</p><p>​    </p><p>​    </p><p><strong>MAC 地址可以修改吗？</strong></p><p><strong>MAC地址</strong>（<code>Media Access Control</code>，介质访问控制），也叫硬件地址，长度是 48 比特（6 字节），由 16 进制的数字组成，分为前 24 位和后 24 位。</p><p>前 24 位叫作<strong>组织唯一标志符</strong>（<code>Organizationally Unique Identifier，OUI</code>），是由 IEEE 的注册管理机构给不同厂家分配的代码，用于区分不同的厂家。后 24 位是厂家自己分配的，称为<strong>扩展标识符</strong>。同一个厂家生产的网卡中 MAC 地址后 24 位是不同的。</p><p>MAC 本来设计为唯一性的，但是后来设备越来越多，而且还有虚拟化的设备和网卡，有很多工具可以修改，就很难保证不冲突了。但是至少应该保持一个局域网内是唯一的。</p><p>MAC 的设计，使得即便不能保证绝对唯一，但是能保证一个局域网内出现冲突的概率很小。这样，一台机器启动的时候，就能够在没有 IP 地址的情况下，先用 MAC 地址进行通信，获得 IP 地址。</p><p>好在 MAC 地址是工作在一个局域网中的，因而即便出现了冲突，网络工程师也能够在自己的范围内很快定位并解决这个问题。</p><p>​    </p><p>​    </p><p><strong>TCP 重试有没有可能导致重复下单？</strong></p><p>不会的。因为 TCP 层收到了重复包之后，TCP 层自己会进行去重，发给应用层、HTTP 层。还是一个唯一的下单请求，所以不会重复下单。</p><p>那什么时候会导致重复下单呢？因为网络原因或者服务端错误，导致 TCP 连接断了，这样会重新发送应用层的请求，也即 HTTP 的请求会重新发送一遍。</p><p>如果服务端设计的是无状态的，它记不住上一次已经发送了一次请求。如果处理不好，就会导致重复下单，这就需要服务端除了实现无状态，还需要根据传过来的订单号实现幂等，同一个订单只处理一次。</p><p>还会有的现象是请求被黑客拦截，发送多次，这在 HTTPS 层可以有很多种机制，例如通过 Timestamp 和 Nonce 随机数联合起来，然后做一个不可逆的签名来保证。</p>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络协议 </tag>
            
            <tag> 云计算 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实战</title>
      <link href="2021/01/28/cs-cpp-question/"/>
      <url>2021/01/28/cs-cpp-question/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统基础与实验</title>
      <link href="2021/01/28/cs-my-os/"/>
      <url>2021/01/28/cs-my-os/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境的配置与搭建"><a href="#1-环境的配置与搭建" class="headerlink" title="1. 环境的配置与搭建"></a>1. 环境的配置与搭建</h2><blockquote><p>完成第一个引导扇区启动程序</p></blockquote><p>工具：<code>VirtualBox</code>、<code>Nasm</code> （汇编）</p><p>通过硬盘启动自己的操作系统</p><ol><li><p>生成虚拟磁盘：将虚拟文件当做硬盘挂载</p><p><code>diskpart</code>命令：制作自己的虚拟磁盘</p></li></ol><p><img src="clip_image001.png" alt="执行diskpart命令得到vhd"></p><ol start="2"><li>编写汇编代码</li></ol><p><img src="image-20210219203710096.png"></p><blockquote><p>此代码段是存于磁盘引导扇区的系统引导程序。若存于硬盘第一个扇区，则这段代码称为硬盘主引导记录</p></blockquote><ol start="3"><li>使用<code>Nasm</code>进行编译</li></ol><p><img src="clip_image003.png"></p><ol start="4"><li>使用<code>dd</code>工具将<code>.bin</code>文件写入磁盘</li></ol><img src="clip_image004.png" style="zoom:80%;" /><ol start="5"><li>在虚拟机中运行</li></ol><p><img src="clip_image005.png" alt="VirtualBox"></p><p>​    </p><p>​    </p><h2 id="2-操作系统基础知识"><a href="#2-操作系统基础知识" class="headerlink" title="2. 操作系统基础知识"></a>2. 操作系统基础知识</h2><ol><li>CPU的组成</li></ol><p><img src="clip_image001-1613657815336.png"></p><ol start="2"><li><p>寄存器是CPU内部的信息存储单元，Intel 8086CPU有14个寄存器</p><blockquote><p>IBM 兼容机一般用于指80486及之前的PC机，之后渐渐代之以“标准PC”的说法<br>Intel 8086是由Intel于1978年设计的16位微处理器芯片，是x86架构的鼻祖。它以8080和8085的设计为基础，地址总线扩充为20位，可直接寻址1MB的存储空间，且取指令和执行是同步的</p></blockquote><p><strong>通用寄存器</strong>：</p><p>AX，<code>accumulate register</code>：累加器<br>BX，<code>based register</code>：基地址寄存器<br>CX，<code>count register</code>：计数器<br>DX，<code>data registered</code>：数据寄存器<br>​<br><strong>段寄存器</strong>：</p><p>CS，<code>code segment</code>：代码段<br>DS，<code>data segment</code>：数据段<br>SS，<code>stack segment</code>：栈段寄存器<br>ES，<code>extra segment</code>：附加段寄存器<br>​<br><strong>指令指针寄存器</strong>：</p><p>IP，<code>instructor  point</code><br>​<br><strong>指针寄存器</strong>：</p><p>SP，<code>stack point</code>：堆栈指针寄存器<br>BP，<code>base point</code>：基础指针<br>​<br><strong>变址寄存器</strong>：</p><p>SI，<code>source index</code>：源变址寄存器<br>DI，<code>destination index</code>：目的变址寄存器<br>​<br><strong>标志寄存器</strong>：</p><p>PSW，<code>program state word</code>：程序状态字</p><table><thead><tr><th align="left">PSW的常用标志</th><th>作用</th></tr></thead><tbody><tr><td align="left">OF，<code>overflow flag</code></td><td>溢出标志位</td></tr><tr><td align="left">DF，<code>direction flag</code></td><td>方向标志位</td></tr><tr><td align="left">IF，<code>interrupt flag</code></td><td>中断标志位</td></tr><tr><td align="left">TF，<code>trap flag</code></td><td>陷阱标志位</td></tr><tr><td align="left">SF，<code>sign flag</code></td><td>负号标志位</td></tr><tr><td align="left">ZF，<code>zero flag</code></td><td>零值标志位</td></tr><tr><td align="left">AF，<code>auxiliary carray flag</code></td><td>辅助进位标志位</td></tr><tr><td align="left">PF，<code>parity flag</code></td><td>奇偶标志位</td></tr><tr><td align="left">CF，<code>carry flag</code></td><td>进位标志位</td></tr></tbody></table></li></ol><ol start="3"><li><p>代码段和数据段（逻辑概念，在内存中）</p></li><li><p>8086的分段表示</p></li><li><p>分段机制：通过改变CS寄存器的数字去改变想要推进的程序，程序的加载可以通过一个管理程序进行调度</p></li><li><p>操作系统OS要做什么？</p><p>1）需要让机器做事情</p><p>2）开机后接管CPU的控制权</p><p>3）需要接收和发送消息给硬件</p><p><img src="image-20210327170958294.png"></p><p>4）需要管理和调度应用</p><p><img src="image-20210327170859055.png"></p><p>5）需要让用户可以参与管理</p><p><img src="image-20210327171142182.png"></p><blockquote><p><em>A group of program that controls the execution of application programs. Acts as an interface between applications and hardware</em></p></blockquote></li><li><p>计算机启动过程</p><p><img src="image-20210327164844772.png"></p><p>开机后OS需要接管CPU的控制权，但在OS运行之前是BIOS在管理计算机，之后由OS接管</p><img src="未命名图片.png" alt="内存分布" style="zoom:67%;" /><p><strong>BIOS 初始化</strong></p><ul><li><strong>加电自检</strong> POST，<code>power on self test</code> ：固化在主板的BIOS，检查硬件的好坏，内存地址为 <code>0fff:0000</code><br>打开电源，BIOS开始自检，然后出发19号中断，在处理19号中断时，BIOS检测电脑是否具有软盘、硬盘或是固定磁盘，如果有任何可以使用的磁盘，就把磁盘的第一个扇区（512B）加载到内存</li></ul><p><strong>BIOS加载OS</strong></p><ul><li>MBR将自己复制到内存地址 <code>0000:0600</code> 处，然后开始执行<br>MBR（主引导扇区）位于硬盘的 0 磁道 0 柱面第1扇）区，该磁道均为隐含扇区，普通的磁盘访问命令无法访问，一共512个字节</li><li>在主分区表中搜索标志为活动的分区，如果发现没有活动分区或有不止一个活动分区，则转停止</li><li>将活动分区的第一个扇区读入内存地址 <code>0000:7c00</code> 处</li><li>检查 (WORD) <code>0000:7dfe</code> 是否等于 <code>0xaa55</code>，若不等于则显示 <em>“Missing Operating System”</em> 然后停止</li><li>跳转到 <code>0000:7c00</code> 处继续执行特定系统的启动程序</li></ul></li></ol><blockquote><p><strong>实模式</strong>：CPU复位或加电的时候以实模式启动，处理器以实模式工作。在实模式下，内存寻址方式和8086相同，由基地址加上偏移地址形成20位的物理地址，最大寻址空间1MB，最大分段64KB。在实模式下，所有的段都是可以读、写和可执行的。</p></blockquote><p>​    </p><p>​    </p><h2 id="3-操作显存数据"><a href="#3-操作显存数据" class="headerlink" title="3. 操作显存数据"></a>3. 操作显存数据</h2><blockquote><p>实模式下用汇编显示文字 </p></blockquote><p>​    </p><p>&emsp;&emsp;<strong>显示的原理</strong>：屏幕上的内容=显存中的数据。</p><p>&emsp;&emsp;显卡控制的最小单位是像素，一个像素对应屏幕上一个点。专门用来显示字符的工作方式称为<strong>文本模式</strong>，<strong>文本模式和图形模式是显卡的基本模式</strong>（PC在加电自检后系统会初始化为80 × 25的文本模式）</p><p>&emsp;&emsp;显存的地址空间 <code>A0000h-BFFFFh</code> 共128K空间。其中 <code>B8000h-BFFFFh</code> 共32K的空间是80 × 25彩色字符模式显示缓冲区。80×25彩色字符模式显示缓冲区的结构：</p><ul><li><p>向这个地址空间写入数据，写入的内容将立即出现在显示器上</p></li><li><p>在80×25彩色字符模式下，显示器可以显示25行，每行80个字符，每个字符可以有256种属性（背景色、前景色、闪烁、高亮等组合信息）</p></li><li><p><strong>一个字符在显示缓冲区中要占两个字节</strong>，分别存放字符的ASCII码和属性，显示缓冲区分为8页，每页4KB，显示器可以显示任意一页的内容。通常情况下B8000H - B8F9F中的4000个字节的内容将出现在显示器上</p></li></ul><img src="1352355487_4802.PNG" style="zoom:74%;" /><img src="clip_image001-1613740820108.png" style="zoom:75%;" /><blockquote><p>BIOS有自动寻找硬件功能，且BIOS在实际的物理内存中是有布局的</p></blockquote><p>实验：</p><p>​    </p><ol><li>编写汇编代码</li></ol><img src="image-20210219211835330.png" alt="" style="zoom:85%;" /><ol start="2"><li>编译</li></ol><p><img src="image-20210219210014919.png"></p><ol start="3"><li>写入磁盘</li></ol><p><img src="image-20210219210433335.png"></p><ol start="4"><li>在虚拟机中运行</li></ol><p><img src="image-20210219210605483.png"></p><h2 id="4-从硬盘引导"><a href="#4-从硬盘引导" class="headerlink" title="4. 从硬盘引导"></a>4. 从硬盘引导</h2><ol><li>目前的硬盘一般分为 <strong>HDD</strong>（Hard Disk Drive，传统的磁碟型机械硬盘）和 <strong>SSD</strong>（Solid State Disk，固态硬盘）</li></ol><p><img src="clip_image001.jpg"></p><ul><li><strong>HDD</strong>：Hard Disk Drive（硬碟），即传统机械硬盘。由盘片、磁头、转轴、控制电机等部分组成。工作时盘片转动，磁头定位在盘片的指定位置上进行读写操作。传统硬盘的优势在于容量大、成本低，寿命也相对较长，适合进行大容量的数据写入；但缺点也非常明显，比如体积重量大、发热量大、速度慢、不抗震、噪音大等等。</li><li><strong>SSD</strong>：Solid-State Drive（固态硬盘）。一般使用 <strong>NAND 闪存</strong>制成。由于不存在机械部件，所以稳定性、噪音、发热量、抗震性都要比传统机械硬盘更好，读写速度也更快。当然，闪存的造价较高，所以 SSD 的价格也更高。</li></ul><p>​    </p><p>​    </p><ol start="2"><li><p><strong>磁盘结构</strong></p><p><img src="clip_image001-1618313289573.jpg"></p></li></ol><ul><li>磁道<code>Track</code>。当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道</li><li>柱<code>Cylinder</code>。在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面</li><li>扇区<code>Sector</code>。磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区。硬盘的第一个扇区，叫做引导扇区</li><li>磁头<code>Head</code>。硬盘读取数据的关键部件，它的主要作用就是将存储在硬盘盘片上的磁信息转化为电信号向外传输，而它的工作原理则是利用特殊材料的电阻值会随着磁场变化的原理来读写盘片上的数据，磁头的好坏在很大程度上决定着硬盘盘片的存储密度</li><li>盘片<code>Platter</code>。硬盘中承载数据存储的介质。硬盘盘片是以坚固耐用的材料为盘基，将磁粉附着在铝合金（新材料也有用玻璃）圆盘片的表面上，表面被加工的相当平滑。这些磁粉被划分成称为磁道的若干个同心圆，在每个同心圆的磁道上就好像有无数的任意排列的小磁铁，它们分别代表着 0 和 1 的状态。当这些小磁铁受到来自磁头的磁力影响时，其排列的方向会随之改变。利用磁头的磁力控制指定的一些小磁铁方向，使每个小磁铁都可以用来储存信息。硬盘是由多个盘片叠加在一起，互相之间由垫圈隔开</li></ul><p>​    </p><p>​    </p><ol start="3"><li><p>CPU不会直接和硬盘打交道，而是和IO接口和硬盘控制的主寄存器打交道</p><p>Data寄存器、Error寄存器、Device寄存器（给出硬盘状态）…</p><blockquote><p>CHS：CHS寻址模式将硬盘划分为磁头（Heads）、柱面(Cylinder)、扇区(Sector)</p><p>LBA：用28 bit来描述一个扇区</p></blockquote></li></ol><p>​    </p><p>​    </p><ol start="4"><li><p>读取数据步骤</p><p>​    1）先选择通道，往该通道上的<code>sector count</code>寄存器写入待操作的扇区数</p><p>​    2）往该通道的3个LBA寄存器写入扇区的起始地址</p><p>​    3）往<code>device</code>寄存器写入LBA的24-27位，设为LBA，并设置<code>dev</code>表明是从盘还是主盘</p><p>​    4）往<code>command</code>寄存器写命令</p><p>​    5）检查status寄存器</p><p>​    6）读入数据</p></li></ol><p>​    </p><p>​    </p><ol start="5"><li>实验</li></ol><blockquote><p>将第二个扇区里面的内容加载进入内存</p></blockquote><ol><li>编写汇编代码</li></ol><p><code>mbr.asm</code></p><p><img src="image-20210222175013827.png"></p><p><code>loader.asm</code></p><p><img src="image-20210328204109922.png"></p><ol start="2"><li>使用<code>Nasm</code>进行编译</li></ol><p><img src="image-20210328204354509.png"></p><ol start="3"><li>写入磁盘</li></ol><p><img src="image-20210328205434971.png"></p><ol start="4"><li>在虚拟机中运行</li></ol><p><img src="image-20210328205542679.png"></p><blockquote><p>突破了512字节！</p></blockquote><p>​    </p><p>​    </p><h2 id="5-保护模式入门"><a href="#5-保护模式入门" class="headerlink" title="5. 保护模式入门"></a>5. 保护模式入门</h2><ol><li>在80286以前，CPU只有实模式，最多能够访问1M的内存空间。<ul><li>可以任意访问内存，操作系统和用户程序实际上做不到内存的隔离</li><li>用户程序访问的逻辑地址实际上就是物理地址</li><li>用户程序可以随意修改段基址</li></ul></li></ol><ol start="2"><li>随着CPU的发展，CPU的地址线变为32根，至少可以访问到4G的内存空间。实模式下的内存地址计算方式就已经不再适合了。所以就引入了保护模式，实现更大空间的，更灵活也<strong>更安全</strong>的内存访问。<ul><li>为了保证向下兼容，80286及以后的CPU首先进入实模式，然后通过切换机制再进入到保护模式。</li><li>保护模式下把关于内存段的限制信息放在一个叫做<strong>全局描述符表(GDT)**的结构里。全局描述符表中含有一个个表项，每一个表项称为</strong>段描述符。**</li></ul></li></ol><p><img src="image-20210328210312513.png" alt="保护模式下被扩展成32位寄存器"></p><ol start="3"><li><strong>全局描述符表位于内存中</strong>，CPU用专门的寄存器指向它。这个专门的寄存器是<strong>GDTR</strong>（一个48位的寄存器）,专门用来存储 GDT 的内存地址及大小。</li></ol><p>内核：内核是连接操作系统和硬件和软件的桥梁，它掌控着计算机中的一切资源。</p><p>​    </p><p>​    </p><blockquote><p>未完待续</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门</title>
      <link href="2021/01/27/cs-big-data-basic/"/>
      <url>2021/01/27/cs-big-data-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><h3 id="大数据技术发展史"><a href="#大数据技术发展史" class="headerlink" title="大数据技术发展史"></a>大数据技术发展史</h3><blockquote><p>论文奠定技术发展基石<br>业务催生技术不断突破<br>效率倒逼技术迭代更新</p></blockquote><p>&emsp;&emsp;今天我们常说的大数据技术，其实起源于 <em>Google</em> 在 2004 年前后发表的三篇论文，也就是我们经常听到的“三驾马车”，分别是<strong>分布式文件系统</strong> <code>GFS</code>、<strong>大数据分布式计算框架</strong> <code>MapReduce</code> 和 <strong>NoSQL 数据库系统</strong> BigTable。</p><p>&emsp;&emsp;搜索引擎主要就做两件事情，网页抓取和索引构建，而在这个过程中有大量的数据需要存储和计算。这“三驾马车”其实就是用来解决这个问题的。那时，大多数公司的关注点还聚焦在单机上，在思考如何提升单机的性能，寻找更贵更好的服务器。而 <em>Google</em> 的思路是部署一个大规模的服务器集群，通过分布式的方式将海量数据存储在这个集群上，然后利用集群上的所有机器进行数据计算。 这样其实不需要买很多很贵的服务器，它只要把这些普通的机器组织到一起。</p><p>&emsp;&emsp;当时的天才程序员，也是 <em>Lucene</em> 开源项目的创始人 <em>Doug Cutting</em> 正在开发开源搜索引擎 <em>Nutch</em>，阅读了论文后，他非常兴奋，紧接着就根据论文原理初步实现了类似的功能。</p><p>&emsp;&emsp;2006 年，<em>Doug Cutting</em> 将这些大数据相关的功能从 <em>Nutch</em> 中分离了出来，然后启动了一个独立的项目专门开发维护大数据技术，这就是后来赫赫有名的<code>Hadoop</code>，<strong>主要包括 Hadoop 分布式文件系统 HDFS 和大数据计算引擎 MapReduce</strong>。这个纯用 Java 编写的软件其实并没有什么高深的技术难点，使用的也都是一些最基础的编程技巧，也没有什么出奇之处，但是它却给社会带来巨大的影响，甚至带动一场深刻的科技革命，推动了人工智能的发展与进步。</p><p>&emsp;&emsp;我们在做软件开发的时候，也可以<strong>多思考一下，我们所开发软件的价值点在哪里</strong>？真正需要使用软件实现价值的地方在哪里？你应该关注业务、理解业务，有价值导向，用自己的技术为公司创造真正的价值，进而实现自己的人生价值。而不是整天埋头在需求说明文档里，做一个没有思考的代码机器人。</p><p>&emsp;&emsp;<em>Hadoop</em> 发布之后，<em>Yahoo</em> 很快就用了起来。大概又过了一年到了 2007 年，百度和阿里巴巴也开始使用其进行大数据存储与计算。</p><p>&emsp;&emsp;2008 年，<em>Hadoop</em> 正式成为 <em>Apache</em> 的顶级项目，后来 <em>Doug Cutting</em> 本人也成为了 <em>Apache</em> 基金会的主席。自此，<em>Hadoop</em> 作为软件开发领域的一颗明星冉冉升起。同年，商业公司 <em>Cloudera</em> 成立，<em>Hadoop</em> 得到进一步的商业支持。</p><p>&emsp;&emsp;这时，Yahoo 的一些人觉得用 <em>MapReduce</em> 进行大数据编程太麻烦，于是便开发了 <em>Pig</em>。<em>Pig</em> 是一种脚本语言，使用<strong>类 SQL</strong> 的语法，开发者可以用 <em>Pig</em> 脚本描述要对大数据集上进行的操作，经过编译后会生成 <em>MapReduce</em> 程序，然后在 <em>Hadoop</em> 上运行。编写 <em>Pig</em> 脚本虽然比直接 <em>MapReduce</em> 编程容易，但是依然需要学习新的脚本语法。于是 <em>Facebook</em> 又发布了 <code>Hive</code>。<strong>Hive 支持使用 SQL 语法来进行大数据计算，Hive 会把 SQL 语句转化成 MapReduce 的计算程序</strong>。这样，熟悉数据库的数据分析师和工程师便可以无门槛地使用大数据进行数据分析和处理了。<em>Hive</em> 出现后极大程度地降低了 <em>Hadoop</em> 的使用难度，迅速得到开发者和企业的追捧。</p><p>&emsp;&emsp;随后，众多 <em>Hadoop</em> 周边产品开始出现，<strong>大数据生态体系</strong>逐渐形成，其中包括：专门将关系数据库中的数据导入导出到 <em>Hadoop</em> 平台的 <code>Sqoop</code>；针对大规模日志进行分布式收集、聚合和传输的 <code>Flume</code>；<em>MapReduce</em> 工作流调度引擎 <code>Oozie</code> 等。</p><p>&emsp;&emsp;在 <em>Hadoop</em> 早期，<em>MapReduce</em> 既是一个执行引擎，又是一个资源调度框架，服务器集群的资源调度管理由 <em>MapReduce</em> 自己完成。但是这样不利于资源复用，也使其非常臃肿。于是一个新项目启动了，将 <em>MapReduce</em> 执行引擎和资源调度分离开来，这就是 <code>Yarn</code>。<strong>2012 年，Yarn 成为一个独立的项目开始运营，随后被各类大数据产品支持，成为大数据平台上最主流的资源调度系统</strong>。</p><p>&emsp;&emsp;同样是在 2012 年，UC 伯克利 AMP 实验室开发的 <code>Spark</code> 开始崭露头角。当时 AMP 实验室的马铁博士发现使用 <em>MapReduce</em> <strong>进行机器学习计算的时候性能非常差，因为机器学习算法通常需要进行很多次的迭代计算，而 MapReduce 每执行一次 Map 和 Reduce 计算都需要重新启动一次作业，带来大量的无谓消耗</strong>。还有一点就是 <em>MapReduce</em> 主要使用磁盘作为存储介质，而 2012 年的时候，内存已经突破容量和成本限制，成为数据运行过程中主要的存储介质。<em>Spark</em> 一经推出，立即受到业界的追捧，并逐步替代 <em>MapReduce</em> 在企业应用中的地位。</p><p>​    </p><p>​    </p><p>&emsp;&emsp;一般说来，像 <em>MapReduce</em>、<em>Spark</em> 这类计算框架处理的业务场景都被称作<strong>批处理计算</strong>，因为它们通常针对以“天”为单位产生的数据进行一次计算，然后得到需要的结果，这中间计算需要花费的时间大概是几十分钟甚至更长的时间。因为计算的数据是非在线得到的实时数据，而是历史数据，所以这类计算也被称为<strong>大数据离线计算</strong>。</p><p>&emsp;&emsp;而在大数据领域，还有另外一类应用场景，它们需要对实时产生的大量数据进行即时计算，比如对于遍布城市的监控摄像头进行人脸识别和嫌犯追踪。这类计算称为<strong>大数据流计算</strong>，相应地，有 <code>Storm、Flink、Spark Streaming</code> 等流计算框架来满足此类大数据应用的场景。 流式计算要处理的数据是实时在线产生的数据，所以这类计算也被称为<strong>大数据实时计算</strong>。</p><p>&emsp;&emsp;在典型的大数据的业务场景下，数据业务最通用的做法是，采用批处理的技术处理历史全量数据，采用流式计算处理实时新增数据。 <em>Flink</em> 这样的计算引擎，可以同时支持流式计算和批处理计算。</p><p>​    </p><p>​    </p><p>&emsp;&emsp;除了大数据批处理和流处理，<em>NoSQL</em> 系统处理的主要也是大规模海量数据的存储与访问，所以也被归为大数据技术。 <em>NoSQL</em> 曾经在 2011 年左右非常火爆，涌现出 <code>HBase</code>、<code>Cassandra</code> 等许多优秀的产品，其中 <code>HBase</code> 是<strong>从 Hadoop 中分离出来的、基于 HDFS 的 <em>NoSQL</em> 系统</strong>。</p><p>​    </p><p>​    </p><p>&emsp;&emsp;<strong>大数据处理的主要应用场景包括数据分析、数据挖掘与机器学习</strong>。数据分析主要使用 <code>Hive</code>、<code>Spark SQL</code> 等 SQL 引擎完成；数据挖掘与机器学习则有专门的机器学习框架 <code>TensorFlow</code>、<code>Mahout</code> 以及 <code>MLlib</code> 等，内置了主要的机器学习和数据挖掘算法。此外，大数据要存入分布式文件系统要有序调度 <em>MapReduce</em> 和 <em>Spark</em> 作业执行，并能把执行结果写入到各个应用系统的数据库中，还需要有一个<strong>大数据平台</strong>整合所有这些大数据组件和企业应用系统。下图中的所有这些框架、平台以及相关的算法共同构成了<strong>大数据的技术体系</strong>。</p><p><img src="image-20210224174355347.png"></p><p>​    </p><p>​    </p><h3 id="大数据应用发展史"><a href="#大数据应用发展史" class="headerlink" title="大数据应用发展史"></a>大数据应用发展史</h3><p>&emsp;&emsp;从最开始的 Google 在搜索引擎中开始使用大数据技术，到现在无处不在的各种人工智能应用，伴随着大数据技术的发展，大数据应用也从曲高和寡走到了今天的遍地开花。Google 从最开始发表大数据划时代论文的时候，也许自己也没有想到，自己开启了一个大数据的新时代。</p><p>​    </p><p>​    </p><h4 id="大数据应用的搜索引擎时代"><a href="#大数据应用的搜索引擎时代" class="headerlink" title="大数据应用的搜索引擎时代"></a>大数据应用的搜索引擎时代</h4><p>&emsp;&emsp;作为全球最大的搜索引擎公司，<em>Google</em> 也是我们公认的大数据鼻祖，它存储着全世界几乎所有可访问的网页，数目可能超过万亿规模，全部存储起来大约需要数万块磁盘。为了将这些文件存储起来，<em>Google</em> 开发了 <code>GFS</code>（Google 文件系统），<strong>将数千台服务器上的数万块磁盘统一管理起来，然后当作一个文件系统，统一存储所有这些网页文件</strong>。<em>Google</em> 要构建搜索引擎，需要对所有文件中的单词进行词频统计，然后根据 PageRank 算法计算网页排名。这中间，<em>Google</em> 需要对这数万块磁盘上的文件进行计算处理，也正是基于这些需求，<em>Google</em> 又开发了 <em>MapReduce</em> 大数据计算框架。</p><p>&emsp;&emsp;在 <em>Google</em> 之前，世界上最知名的搜索引擎是 <em>Yahoo</em>。但是 <em>Google</em> 凭借自己的大数据技术和 PageRank 算法，使搜索引擎的搜索体验得到了质的飞跃，人们纷纷弃 <em>Yahoo</em> 而转投 <em>Google</em>。</p><p>&emsp;&emsp;<em>Google</em> 一路走来，从搜索引擎、Gmail、地图、Android、无人驾驶，每一步都将人类的技术边界推向更高的高度。而差一点的公司即使也曾经获得过显赫的地位，但是一旦失去做事的美感和节奏感，在这个快速变革的时代，陨落得比流星还快。</p><p>​    </p><p>​    </p><h4 id="大数据应用的数据仓库时代"><a href="#大数据应用的数据仓库时代" class="headerlink" title="大数据应用的数据仓库时代"></a>大数据应用的数据仓库时代</h4><p>&emsp;&emsp;论文刚发表时，吸引的是 <em>Yahoo</em> 这样的搜索引擎公司和 <em>Doug Cutting</em> 这样的开源搜索引擎开发者。但是当 <em>Facebook</em> 推出 <em>Hive</em> 的时候，科技公司都不淡定了，他们开始意识到大数据的时代真正开启了。</p><p>&emsp;&emsp;曾经我们在进行数据分析与统计时，仅仅局限于数据库，在数据库的计算环境中对数据库中的数据表进行统计分析。并且受数据量和计算能力的限制，我们只能对最重要的数据进行统计和分析。这里所谓最重要的数据，通常指的都是给老板看的数据和财务相关的数据。</p><p>&emsp;&emsp;而 <em>Hive</em> 可以在 <em>Hadoop</em> 上进行 SQL 操作，实现数据统计与分析。也就是说，<strong>我们可以用更低廉的价格获得比以往多得多的数据存储与计算能力</strong>。我们可以把运行日志、应用采集数据、数据库数据放到一起进行计算分析，获得以前无法得到的数据结果，企业的数据仓库也随之呈指数级膨胀。</p><p>&emsp;&emsp;在数据仓库时代，只要有数据，几乎就一定要进行统计分析，如果数据规模比较大，我们就会想到要用 <em>Hadoop</em> 大数据技术，这也是 <em>Hadoop</em> 在这个时期发展特别快的一个原因。技术的发展同时又促进了技术应用，这也为接下来大数据应用走进数据挖掘时代埋下伏笔。</p><p>​    </p><p>​    </p><h4 id="大数据应用的数据挖掘时代"><a href="#大数据应用的数据挖掘时代" class="headerlink" title="大数据应用的数据挖掘时代"></a>大数据应用的数据挖掘时代</h4><p>&emsp;&emsp;大数据一旦进入更多的企业，我们就会对大数据提出更多期望，除了数据统计，我们还希望发掘出更多数据的价值，大数据随之进入数据挖掘时代。</p><p>&emsp;&emsp;在商业环境中，如何解读商品间的关系并不重要，重要的是它们之间只要存在关联，就可以进行<strong>关联分析</strong>，最终目的是让用户尽可能看到想购买的商品。除了商品和商品有关系，还可以利用人和人之间的关系推荐商品。如果两个人购买的商品有很多都是类似甚至相同的，不管这两个人相隔多远他们一定有某种关系，比如可能有差不多的教育背景、经济收入、兴趣爱好。根据这种关系，可以进行关联推荐，让他们看到自己感兴趣的商品。</p><p>&emsp;&emsp;更进一步，大数据还可以将每个人身上的不同特性挖掘出来，打上各种各样的标签，这些标签组成了用户画像，并且只要这样的标签足够多，就可以完整描绘出一个人，甚至比你最亲近的人对你的描述还要完整、准确。</p><p>&emsp;&emsp;除了商品销售，数据挖掘还可以用于人际关系挖掘。基于六度分隔理论，<em>Facebook</em> 研究了十几亿用户的数据，试图找到关联两个陌生人之间的数字，答案是惊人的 3.57。你可以看到，各种各样的社交软件记录着我们的好友关系，通过关系图谱挖掘，几乎可以把世界上所有的人际关系网都描绘出来。</p><p>&emsp;&emsp;现代生活几乎离不开互联网，各种各样的应用无时不刻不在收集数据，这些数据在后台的大数据集群中一刻不停地在被进行各种分析与挖掘。</p><p>​    </p><p>​    </p><h4 id="大数据应用的机器学习时代"><a href="#大数据应用的机器学习时代" class="headerlink" title="大数据应用的机器学习时代"></a>大数据应用的机器学习时代</h4><p>&emsp;&emsp;我们很早就发现，数据中蕴藏着规律，这个规律是所有数据都遵循的，过去发生的事情遵循这个规律，将来要发生的事情也遵循这个规律。一旦找到了这个规律，对于正在发生的事情就可以按照规律进行预测。</p><p>&emsp;&emsp;在过去，我们受数据采集、存储、计算能力的限制，只能通过抽样的方式获取小部分数据，无法得到完整的、全局的、细节的规律。<strong>而现在有了大数据，可以把全部的历史数据都收集起来，统计其规律，进而预测正在发生的事情</strong>。</p><p>​    </p><p>&emsp;&emsp;这就是机器学习</p><p>​    </p><p>&emsp;&emsp;把历史上人类围棋对弈的棋谱数据都存储起来，针对每一种盘面记录如何落子可以得到更高的赢面。得到这个统计规律以后，就可以利用这个规律用机器和人下棋，每一步都计算落在何处将得到更大的赢面，于是我们就得到了一个会下棋的机器人，这就是前两年轰动一时的 <em>AlphaGo</em>，以压倒性优势下赢了人类的顶尖棋手。</p><p>&emsp;&emsp;将人类活动产生的数据，通过机器学习得到统计规律，进而可以模拟人的行为，使机器表现出人类特有的智能，这就是人工智能 AI。</p><p>​    </p><p>​    </p><hr><p>&emsp;&emsp;<strong>大数据从搜索引擎到机器学习，发展思路其实是一脉相承的，就是想发现数据中的规律并为我们所用</strong>。所以很多人把数据称作金矿，大数据应用就是从这座蕴含知识宝藏的金矿中发掘中有商业价值的真金白银出来。</p><p>&emsp;&emsp;数据中蕴藏着价值已经是众所周知的事情了，那么如何从这些庞大的数据中发掘出我们想要的知识价值，这正是大数据技术目前正在解决的事情，包括大数据存储与计算，也包括大数据分析、挖掘、机器学习等应用。</p><p>​    </p><p>​    </p><h3 id="大数据应用领域"><a href="#大数据应用领域" class="headerlink" title="大数据应用领域"></a>大数据应用领域</h3><blockquote><p><strong>数据驱动一切</strong></p></blockquote><p>&emsp;&emsp;大数据出现的时间只有十几年，被人们广泛接受并应用只有几年的时间，但就是这短短几年的时间，大数据呈现出爆炸式增长的态势。在各个领域，大数据的身影几乎无处不在。</p><p>​    </p><p>​    </p><h4 id="医疗健康领域的应用"><a href="#医疗健康领域的应用" class="headerlink" title="医疗健康领域的应用"></a>医疗健康领域的应用</h4><p>&emsp;&emsp;健康医疗领域是最近几年获得最多创业者和投资人青睐的大数据领域。为什么这么说呢？</p><p>&emsp;&emsp;首先，医疗健康领域会产生大量的数据；其次，医疗健康领域有一个万亿级的市场规模；最关键的是，<strong>医疗健康领域里很多工作依赖人的经验，而这正是机器学习的强项</strong>。</p><p>​    </p><p><strong>1. 医学影像智能识别</strong></p><p>&emsp;&emsp;图像识别是机器学习获得的重大突破之一，使用大量的图片数据进行深度机器学习训练，机器可以识别出特定的图像元素，当然也可以识别出病理特征，比如 X 光片里的异常病灶位置。</p><p>&emsp;&emsp;虽然在临床实践方面应用有限，但是医疗影像 AI 还是在一些领域取得一定的进展。医学影像智能识别，一方面可以帮助医生进行辅助诊疗，另一方面对于皮肤病等有外部表现的病症，病人可以自己拍照然后使用 AI 智能识别做一个初步诊断。</p><p>​    </p><p><strong>2. 病历大数据智能诊疗</strong></p><p>&emsp;&emsp;病历，特别是专家写的病历，本身就是一笔巨大的知识财富，利用大数据技术将这些知识进行处理、分析、统计、 挖掘，可以构成一个病历知识库，可以分享给更多人，即构成一个智能辅助诊疗系统。 </p><p><img src="image-20210224184058058.png" alt="一个医疗辅助诊疗系统架构"></p><p>&emsp;&emsp;针对同类疾病和其他上下文信息（化验结果、病史、年龄性别、病人回访信息等）可以挖掘出针对同样的疾病情况，哪种治疗手段可以用更低的治疗成本、更少的病人痛苦，获得更好的治疗效果。从上面的架构图你能看到，将这些病历知识和循证医学知识、科研文献知识、用药知识共同构成一个辅助诊疗知识库， 通过知识匹配搜索引擎可以对外提供服务。</p><p>​    </p><p>​    </p><h4 id="教育领域的应用"><a href="#教育领域的应用" class="headerlink" title="教育领域的应用"></a>教育领域的应用</h4><p>&emsp;在传统教育过程中要做到因人施教，需要老师本身能力很强才能把握好。但是大数据在线教育利用大数据技术进行分析统计，完全可以做到根据学生能力和学习节奏，及时调整学习大纲和学习进度，提供个性化和自适应的学习体验。</p><p>​    </p><p><strong>1. AI 外语老师</strong></p><p>&emsp;&emsp;得益于语音识别和语音合成技术的成熟，一些在线教育网站尝试用人工智能外语老师进行外语教学。这里面的原理其实并不复杂，聊天机器人技术已经普遍应用，只要将学习的知识点设计进聊天的过程中，就可以实现一个简单的 AI 外语老师了。</p><p>​    </p><p><strong>2. 智能解题</strong></p><p>&emsp;&emsp;比较简单的智能解题系统其实是利用搜索引擎技术，在收集大量的试题以及答案的基础上，进行试题匹配，将匹配成功的答案返回。这个过程看起来就像智能做题一样，表面看给个题目就能解出答案，而实际上只是找到答案。</p><p>&emsp;&emsp;进阶一点的智能解题系统，通过图像识别与自然语言处理进行相似性匹配。更改试题的部分数字、文字表述，但是不影响实质性解答思路，依然可以解答。</p><p>&emsp;&emsp;高阶的智能解题系统，利用神经网络机器学习技术，将试题的自然语言描述转化成形式语言，然后分析知识点和解题策略，进行自动推导，从而完成实质性的解题。</p><p>​    </p><p>​    </p><h4 id="社交媒体领域的应用"><a href="#社交媒体领域的应用" class="headerlink" title="社交媒体领域的应用"></a>社交媒体领域的应用</h4><p>&emsp;&emsp;大数据有一个重要的、和我们大多数人密切相关，但是又不太引人注目的一个应用领域是<strong>舆情监控与分析</strong>。我们日常在各种互联网应用和社交媒体上发表各种言论，这些言论事实上反映了最准确的民情舆论。一个个体的言论基本没有意义，但是大量的、全国乃至全球的言论数据表现出的统计特性，就有了非常重要的意义。</p><p>&emsp;&emsp;编写数据爬虫，实时爬取各个社交新媒体上的各种用户内容和媒体信息，然后通过自然语言处理，就可以进行情感分析、热点事件追踪等。舆情实时监控可用于商业领域，引导智能广告投放；可用于金融领域，辅助执行自动化股票、期权、数字货币交易；可用于社会管理，及时发现可能引发社会问题的舆论倾向。</p><p>​    </p><p>​    </p><h4 id="金融领域的应用"><a href="#金融领域的应用" class="headerlink" title="金融领域的应用"></a>金融领域的应用</h4><p>&emsp;&emsp;大数据在金融领域应用比较成熟的是<strong>大数据风控</strong>。在金融借贷中，如何识别出高风险用户，要求其提供更多抵押、支付更高利息、调整更低的额度，甚至拒绝贷款，从而降低金融机构的风险？事实上，金融行业已经沉淀了大量的历史数据，利用这些数据进行计算，可以得到用户特征和风险指数的曲线（即风控模型）。当新用户申请贷款的时候，将该用户特征带入曲线进行计算，就可以得到该用户的风险指数，进而自动给出该用户的贷款策略。</p><p>&emsp;&emsp;利用股票、外汇等历史交易记录，分析交易规律，结合当前的新闻热点、舆论倾向、财经数据构建交易模型，进行自动化交易，这就是金融领域的量化交易。这些数据量特别巨大，交易涉及金额也同样巨大。</p><p>​    </p><p>​    </p><h4 id="新零售领域的应用"><a href="#新零售领域的应用" class="headerlink" title="新零售领域的应用"></a>新零售领域的应用</h4><p>&emsp;&emsp;区别于传统零售，新零售使用大数据进行全链路管理。从生产、物流、购物体验，使用大数据进行分析和预判，实现精准生产、零库存、全新的购物体验。</p><p>&emsp;&emsp;亚马逊 Go 无人店使用大量的摄像头，实时捕捉用户行为，判断用户取出还是放回商品、取了何种商品等。这实际上是大数据流计算与机器学习的结合，最终实现的购物效果是，无需排队买单，进去就拿东西，拿好了就走。</p><p>&emsp;&emsp;虽然无人店看起来噱头的意味更多一点，但是利用大数据技术提升购物体验、节省商家人力成本一定是正确的方向。</p><p>​    </p><p>​    </p><h4 id="交通领域的应用"><a href="#交通领域的应用" class="headerlink" title="交通领域的应用"></a>交通领域的应用</h4><p>&emsp;&emsp;交通也是一个对大数据实时采集与处理应用比较广的领域。现在几乎所有的城市路段、交通要点都有不止一个监控摄像头在实时监控，一线城市大约有百万计的摄像头在不停地采集数据。</p><p>&emsp;&emsp;此外，各种导航软件也在不停采集数据，通过分析用户当前位置和移动速度，判断道路拥堵状态，并实时修改推荐的导航路径。</p><p>&emsp;&emsp;还有无人驾驶技术，无人驾驶就是在人的驾驶过程中实时采集车辆周边数据和驾驶控制信息，然后通过机器学习，获得周边信息与驾驶方式的对应关系（自动驾驶模型）。然后将这个模型应用到无人驾驶汽车上，传感器获得车辆周边数据后，就可以通过自动驾驶模型计算出车辆控制信息（转向、刹车等）。</p><p>​    </p><p>​    </p><hr><p>&emsp;&emsp;利用大数据和机器学习，发掘数据中的规律，进而对当前的事情做出预测和判断，使机器表现出智能的特性，正变得越来越普及。</p><p>&emsp;&emsp;数据汇聚在一起，计算其内在的关系，可以发现很多肉眼和思维无法得到的知识。然后进一步计算其内在的模型，可以使系统获得智能的特性。当系统具备智能的特性，可以使机器对当前的事情做出预测和判断，大数据技术应用正变得越来越普及。</p><p>​    </p><p>​    </p><h2 id="1-Hadoop原理与架构"><a href="#1-Hadoop原理与架构" class="headerlink" title="1. Hadoop原理与架构"></a>1. Hadoop原理与架构</h2><p>​    </p><p>​    </p><h2 id="2-大数据生态体系产品原理与架构"><a href="#2-大数据生态体系产品原理与架构" class="headerlink" title="2. 大数据生态体系产品原理与架构"></a>2. 大数据生态体系产品原理与架构</h2><p>​    </p><p>​    </p><h2 id="4-大数据平台与系统集成"><a href="#4-大数据平台与系统集成" class="headerlink" title="4. 大数据平台与系统集成"></a>4. 大数据平台与系统集成</h2><p>​    </p><p>​    </p><h2 id="6-大数据算法"><a href="#6-大数据算法" class="headerlink" title="6. 大数据算法"></a>6. 大数据算法</h2><p>​    </p><p>​    </p><blockquote><p>未完待续……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏程序设计</title>
      <link href="2021/01/27/cs-game-program-design/"/>
      <url>2021/01/27/cs-game-program-design/</url>
      
        <content type="html"><![CDATA[<h2 id="1-游戏开发导论"><a href="#1-游戏开发导论" class="headerlink" title="1. 游戏开发导论"></a>1. 游戏开发导论</h2><p><strong>什么是游戏</strong></p><p><strong>电子游戏</strong><code>Electronic Game</code>，是一种在电脑、手机或其它专用电子设备上运行的，具有目标和规则的娱乐形式，简称为游戏</p><p>​    </p><h3 id="1-1-游戏的发展历史"><a href="#1-1-游戏的发展历史" class="headerlink" title="1.1 游戏的发展历史"></a>1.1 游戏的发展历史</h3><ul><li><p><strong>第一世代</strong>，1972 - 1977，代表机型：<em>Odyssey</em>、<em>Telstar</em>系列</p><p><strong>1972年</strong>是整个家用游戏主机发展的起点，第一款商业化产品<em>Odyssey</em>的推出标志着家用游戏主机正式迈入第一个世代</p></li></ul><ul><li><p><strong>第二世代</strong>，1977 - 1983，代表机型：<em>Atari 2600、ColeoVersion、Odyssey2、Color TV Game</em></p><p>8 - bit处理器，可更换式游戏的设计，标志着家用游戏主机进入第二个世代</p><p>第三方游戏合法化，由于缺乏监管标准导致出现大量垃圾游戏，最终引发了“雅达利震荡”事件</p><p>美国游戏业陷入萧条，家用市场开始由美国向日本转移</p></li></ul><ul><li><p><strong>第三世代</strong>，19873 - 1987，代表机型：任天堂<em>FC</em>、世嘉<em>Master System</em>、<em>Atari 7800</em></p><p>进入第三世代后，家用游戏主机的重心完全倒向日本，甚至可以说是任天堂与世嘉一对一竞争</p><p>涌现出诸如《超吸马里奥兄弟》《勇者斗龙》《最终幻想》等至今仍活跃的经典游戏系列</p><p>无论硬件产品还是软件，第三世代都是重大的转折点，对未来游系主机的发展产生了深远的影响</p></li></ul><p><img src="%E7%AC%AC%E4%B8%89%E4%B8%96%E4%BB%A3.png"></p><ul><li><p><strong>第四世代</strong>，1987-1994</p><p>家用游戏主机开始步入16 - bit芯片时代</p></li></ul><ul><li><strong>第五世代</strong>，1993-1999</li></ul><ul><li><strong>第六世代</strong>，1999-2004</li></ul><ul><li>当代，</li></ul><p><img src="D:\Git-repo\hexo\source_posts\cs-game-program-design\image-20210207214435080.png" alt="image-20210207214435080"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-game-program-design\image-20210207214450743.png" alt="image-20210207214450743"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-game-program-design\image-20210207214514120.png" alt="image-20210207214514120"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-game-program-design\image-20210207214600434.png" alt="image-20210207214600434"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-game-program-design\image-20210207214640136.png" alt="image-20210207214640136"></p><p><img src="D:\Git-repo\hexo\source_posts\cs-game-program-design\image-20210207214747281.png" alt="image-20210207214747281"></p><ul><li>工具及资产管道</li></ul><img src="1111111.png" alt="1111111" style="zoom:100%;" /><img src="image-20200414151929208.png" alt="image-20200414151929208" style="zoom:100%;" /><h3 id="运行时游戏的架构"><a href="#运行时游戏的架构" class="headerlink" title="运行时游戏的架构"></a>运行时游戏的架构</h3><img src="image-20200414152947308.png" alt="image-20200414152947308" style="zoom: 50%;" /><ul><li><p><code>硬件</code>：执行游戏的计算机系统或游戏主机</p><p>​    基于Lunux/Windows平台的PC</p><p>​    苹果的MAC</p><p>​    ios/Android平台的设备</p><p>​    微软的Xbox</p><p>​    索尼的PlayStation系列</p><p>​    任天堂的NDS/Wii/Switch</p></li><li><p><code>驱动</code>：设备驱动程序</p></li><li><p>操作系统：PC/游戏主机</p></li><li><p><code>第三方的软件开发包</code></p><p>​    <strong>四大三维SDK</strong></p></li></ul><img src="image-20200414153722765.png" alt="image-20200414153722765" style="zoom:80%;" /><p>​            <strong>三大物理模拟引擎</strong></p><img src="D:\Git-repo\hexo\source\_posts\cs-game-program-design\image-20200414153830259.png" alt="image-20200414153830259" style="zoom:80%;" /><p>​            <strong>其他SDK VR</strong></p><img src="image-20200414153915613.png" alt="image-20200414153915613" style="zoom:80%;" /><ul><li><code>平台独立层</code></li></ul><img src="image-20200414154019969.png" alt="image-20200414154019969" style="zoom:80%;" /><ul><li><code>核心系统层</code>：抽象一些基础的框架</li></ul><p><img src="image-20200414154057557.png" alt="image-20200414154057557"></p><h2 id="2-服务器概述"><a href="#2-服务器概述" class="headerlink" title="2.服务器概述"></a>2.服务器概述</h2><h2 id="3-三维几何学"><a href="#3-三维几何学" class="headerlink" title="3.三维几何学"></a>3.三维几何学</h2><h2 id="4-游戏循环及实时模拟"><a href="#4-游戏循环及实时模拟" class="headerlink" title="4.游戏循环及实时模拟"></a>4.游戏循环及实时模拟</h2>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="2021/01/27/cs-docker-basic/"/>
      <url>2021/01/27/cs-docker-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Docker概述"><a href="#1-Docker概述" class="headerlink" title="1. Docker概述"></a>1. Docker概述</h2><p><strong>目标</strong>：了解Docker是什么、应用场景及其组成部分</p><p><strong>小结</strong>：</p><ul><li>Docker是一个应用容器引起；</li><li>应用场景：web的自动化打包发布，自动化测试、可持续集成，安装各种组件；</li><li>与传统虚拟机比较：docker启动速度比较快，占用体积较小；</li><li>组成：docker守护进程，仓库，镜像，容器，docker客户端</li></ul><h2 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2. Docker安装与启动"></a>2. Docker安装与启动</h2><p><strong>目标</strong>：在线安装docker并使用命令启动、停止docker</p><p><strong>分析</strong>：</p><ol><li>更新yum源为ustc；</li><li>安装docker;</li><li>更新docker的镜像源为ustc；</li><li>使用docker命令操作docker</li></ol><p><strong>小结</strong>：</p><p>需求更新yum源和镜像源安装docker；安装之后可以使用 <code>docker -v</code></p><pre class="line-numbers language-sh"><code class="language-sh"># 启动systemctl start docker# 停止systemctl stop docker#查看docker启动状态systemctl status docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-镜像相关命令"><a href="#3-镜像相关命令" class="headerlink" title="3. 镜像相关命令"></a>3. 镜像相关命令</h2><p><strong>目标</strong>：能够使用镜像的查看、搜索、拉取、删除命令</p><p><strong>小结</strong>：</p><blockquote><p>拉取：docker pull 镜像名称:版本号（若不指定则会拉取最新的版本）</p><p>删除全部镜像：docker rmi ` docker images -q ` （慎用）</p></blockquote><h2 id="4-查看-amp-创建并启动交互式容器"><a href="#4-查看-amp-创建并启动交互式容器" class="headerlink" title="4. 查看&amp;创建并启动交互式容器"></a>4. 查看&amp;创建并启动交互式容器</h2><p><strong>目标</strong>：使用查看容器命令；拉取centos:7的镜像之后结合容器启动命令和选项 -it 启动交互式容器</p><p><strong>分析</strong>：</p><ol><li>拉取镜像（容器是基于镜像运行）；</li><li>创建并启动交互式容器，docker交互式容器（启动容器之后会直接进入容器的命令行终端，如果退出则容器停止运行）</li></ol><p><strong>小结</strong>：</p><pre class="line-numbers language-sh"><code class="language-sh"># 查看容器docker ps -a# 创建并启动交互式容器docker run -it --name=mycentos7 centos:7 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动交互式容器之后是直接进入容器终端；可以查看容器的文件结构；使用exit命令则会退出终端并且停止容器。</p></blockquote><h2 id="5-创建并启动守护式容器"><a href="#5-创建并启动守护式容器" class="headerlink" title="5. 创建并启动守护式容器"></a>5. 创建并启动守护式容器</h2><p><strong>目标</strong>：结合容器启动命令和选项 -di 启动守护式容器</p><p><strong>分析</strong>：</p><p>创建并启动docker容器，可以在后台运行；</p><p>在创建交互式容器之后如果退出的话，容器处于停止状态，可以使用命令再次启动容器，使用命令进入容器并操作。</p><pre class="line-numbers language-sh"><code class="language-sh"># 创建并启动守护式容器docker run -di --name=mycentos2 centos:7# 启动容器后再进入容器docker exec -it mycentos2 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong>：</p><blockquote><p>守护式容器在启动之后会一直在后台运行，即使进入容器之后执行exit命令也不会停止容器；</p><p>适用于需要长期运行容器的情况</p></blockquote><h2 id="6-停止-amp-拷贝-amp-挂载-amp-查看ip-amp-删除容器"><a href="#6-停止-amp-拷贝-amp-挂载-amp-查看ip-amp-删除容器" class="headerlink" title="6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器"></a>6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器</h2><p><strong>目标</strong>：能够使用容器的停止、拷贝文件、目录挂载、查看IP、删除命令</p><p><strong>小结</strong>：</p><ul><li><p>容器停止、启动</p></li><li><p>拷贝文件：容器与宿主机之间的文件互拷</p></li><li><p>目录挂载：将宿主机的目录映射到容器对于目录</p></li><li><p>查看容器IP</p><p><img src="D:\Git-repo\hexo\source_posts\cs-docker-basic\1559728403934.png" alt="1559728403934"></p></li><li><p>容器删除：只能删除停止状态的容器；docker rm `docker ps -a -q`</p></li></ul><h2 id="7-MySQL容器部署"><a href="#7-MySQL容器部署" class="headerlink" title="7. MySQL容器部署"></a>7. MySQL容器部署</h2><p><strong>目标</strong>：拉取mysql镜像，启动容器，操作容器中的mysql</p><p><strong>分析</strong>：</p><ol><li><p>拉取mysql镜像；</p></li><li><p>创建并启动守护式容器；</p></li><li><p>在容器中操作mysql；</p></li><li><p>使用图形界面工具（windows）操作在docker中安装的mysql；在创建mysql容器的时候使用-p指定端口映射实现连接</p><p>在创建容器的时候mysql的root用户可以指定远程访问的密码。</p></li></ol><p><strong>小结</strong>：</p><blockquote><p>在创建容器的时候指定环境变量MYSQL_ROOT_PASSWORD表示使用root进行远程连接时候的密码。如果需要进行远程连接的话可以使用-p进行端口映射。</p></blockquote><h2 id="8-Tomcat容器部署"><a href="#8-Tomcat容器部署" class="headerlink" title="8. Tomcat容器部署"></a>8. Tomcat容器部署</h2><p><strong>目标</strong>：拉取tomcat镜像，启动容器，操作容器中的tomcat</p><p><strong>分析</strong>：</p><ul><li><p>将项目文件上传到容器中的tomcat目录（webapps）</p><p>创建容器的时候可以指定-v进行目录挂载，tomcat在容器中的目录（/usr/local/tomcat/webapps）</p></li><li><p>可以通过外部浏览器访问容器中的项目</p><p>创建容器的时候可以指定-p进行端口映射</p></li></ul><ol><li>拉取tomcat镜像；<code>docker pull tomcat</code></li><li>创建并启动tomcat容器；</li></ol><pre class="line-numbers language-sh"><code class="language-sh">docker run -di --name=mytomcat -p 9000:8080 -v /usr/local/tomcat/webapps:/usr/local/tomcat/webapps tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>访问容器中tomcat</p><p><a href="http://192.168.76.128:9000/">http://192.168.76.128:9000</a></p></li></ol><p><strong>小结</strong>：</p><blockquote><p>上传项目文件可以使用容器的目录挂载功能，外部访问可以使用端口映射</p></blockquote><h2 id="9-Nginx容器部署"><a href="#9-Nginx容器部署" class="headerlink" title="9. Nginx容器部署"></a>9. Nginx容器部署</h2><p><strong>目标</strong>：拉取nginx镜像，启动容器，访问nginx</p><p><strong>分析</strong>：</p><p>nginx的默认访问端口是：80</p><p>在创建容器的时候需要进行端口映射，指定-p，映射的端口80</p><ol><li>拉取nginx镜像；</li><li>创建并启动nginx容器；</li><li>在浏览器上访问容器中nginx，<a href="http://192.168.76.128/">http://192.168.76.128</a></li></ol><p><strong>小结</strong>：</p><blockquote><p>如果被占用了80端口，那么在指定映射的时候可以改变宿主机的端口映射，在访问时也需要带上端口号。</p></blockquote><h2 id="10-Redis容器部署"><a href="#10-Redis容器部署" class="headerlink" title="10. Redis容器部署"></a>10. Redis容器部署</h2><p><strong>目标</strong>：拉取redis镜像，启动容器，操作容器中的redis</p><p><strong>分析</strong>：</p><ol><li>拉取redis镜像；</li><li>创建并启动redis容器；默认端口是6379，如果需要外部访问则可以使用端口映射；</li><li>连接redis: ①使用命令行客户端 ②使用图形界面工具</li></ol><p><strong>小结</strong>：</p><pre class="line-numbers language-sh"><code class="language-sh"># 创建容器docker run -di --name=myredis -p 6379:6379 redis# 进入容器docker exec -it myredis /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-docker-compose简介-amp-安装"><a href="#11-docker-compose简介-amp-安装" class="headerlink" title="11. docker-compose简介&amp;安装"></a>11. docker-compose简介&amp;安装</h2><p><strong>目标</strong>：docker-compose的作用；能够安装docker-compose</p><p><strong>小结</strong>：</p><p>docker-compose是一个应用工具；可以通过配置docker-compose.yml文件同时启动多个容器。</p><blockquote><p>部署项目时可以编写一个docker-compose.yml文件作为启动项目单位，同时启动项目相关的那些容器。</p></blockquote><h2 id="12-docker-compose应用"><a href="#12-docker-compose应用" class="headerlink" title="12. docker-compose应用"></a>12. docker-compose应用</h2><p><strong>目标</strong>：编写模版文件同时启动docker容器</p><p><strong>分析</strong>：</p><p>docker-compose可以实现一次启动多个容器；通过配置docker-compose模板文件（docker-compose.yml）,在这个配置文件中去配置各个容器及其相关的依赖。</p><ol><li>编写模板文件；</li><li>创建并启动docker-compose项目（模板文件所在的目录，docker-compose.yml）</li><li>测试</li></ol><p><strong>小结</strong>：</p><p>docker-compose可以配置一个模板文件实现一次可以启动多个容器，运行时候可以执行一个up则会创建并启动模板文件中的各个服务。</p><blockquote><p>模板文件是yml格式的；编写的时候需要注意其格式。</p></blockquote><h2 id="13-迁移与备份"><a href="#13-迁移与备份" class="headerlink" title="13. 迁移与备份"></a>13. 迁移与备份</h2><p><strong>目标</strong>：能够将容器保存为镜像，备份，恢复镜像再启动以恢复的镜像作为基础的容器</p><p><strong>分析</strong>：</p><p>在当前的容器中安装了各种组件；期望在其他服务器上也能快速拥有该容器的一切环境；可以将当前的容器制作为一个镜像，再将该奖项复制到其他服务器，其他服务器再基于镜像运行容器。</p><ol><li>将容器保存为一个镜像；</li><li>备份镜像；</li><li>恢复镜像；</li><li>基于镜像运行容器</li></ol><p><strong>小结</strong>：</p><p>docker容器可以保存为一个镜像；备份为一个镜像包（*.tar）可以复制迁移到其他服务器，再恢复该tar包中的镜像，基于镜像运行容器实现环境的一致。</p><h2 id="14-使用Dockerfile创建镜像"><a href="#14-使用Dockerfile创建镜像" class="headerlink" title="14. 使用Dockerfile创建镜像"></a>14. 使用Dockerfile创建镜像</h2><p><strong>目标</strong>：使用Dockerfile创建一个自定义jdk1.8的镜像</p><p><strong>分析</strong>：</p><p>假设在centos7作为基础镜像上；添加jdk1.8并构建一个包含jdk1.8的centos7新镜像。</p><p>– Dockerfile可以实现；Dockerfile是由一系列命令和参数构成的文本文件，在文件中可以指定各个组件资源和运行命令等。</p><p>实现步骤：</p><ol><li>拉取centos7镜像；</li><li>上传jdk1.8；</li><li>编写Dockerfile文件；</li><li>构建镜像；</li><li>测试（基于新镜像创建并运行容器，运行java -version）</li></ol><p><strong>小结</strong>：</p><p>Dockerfile可以基于镜像制作镜像；<code>docker build -t=&#39;jdk1.8&#39; . </code></p><h2 id="15-私有仓库搭建与配置"><a href="#15-私有仓库搭建与配置" class="headerlink" title="15. 私有仓库搭建与配置"></a>15. 私有仓库搭建与配置</h2><p><strong>目标</strong>：拉取、启动私有仓库镜像并可以访问私有仓库</p><p><strong>小结</strong>：</p><p>拉取registry镜像；基于镜像创建私有仓库容器；需要去修改docker的一个配置文件指定私有仓库地址；再访问私有仓库：<a href="http://ip:5000/v2/_catalog">http://ip:5000/v2/_catalog</a></p><h2 id="16-将镜像上传至私有仓库"><a href="#16-将镜像上传至私有仓库" class="headerlink" title="16. 将镜像上传至私有仓库"></a>16. 将镜像上传至私有仓库</h2><p><strong>目标</strong>：将制作的jdk1.8的镜像上传到私有仓库</p><p><strong>小结</strong>：</p><p>将本地镜像打标签（标记本地镜像为一个私有仓库中的镜像）；将打了标签的镜像推送到私有仓库。</p><h2 id="17-从私有仓库拉取镜像"><a href="#17-从私有仓库拉取镜像" class="headerlink" title="17. 从私有仓库拉取镜像"></a>17. 从私有仓库拉取镜像</h2><p><strong>目标</strong>：将私有仓库中的jdk1.8镜像拉取到本地</p><p><strong>小结</strong>：</p><ul><li>私有仓库与拉取镜像的服务器是在同一台机器上：直接拉取镜像； <code>docker pull 私有仓库地址/镜像名称</code></li><li>私有仓库与拉取镜像的服务器是不在同一台机器上：需要去修改docker的配置文件，指定私有仓库地址；再执行拉取镜像的命令。</li></ul><blockquote><p>如果本地存在同名的镜像需要先删除镜像后拉取</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全</title>
      <link href="2021/01/27/blog-sc-web-security-basic/"/>
      <url>2021/01/27/blog-sc-web-security-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="web安全基础"><a href="#web安全基础" class="headerlink" title="web安全基础"></a>web安全基础</h2><p>1.1 前端基础</p><p><img src="image-20210202223222691.png"></p><p>web攻防实战</p><p>互联网企业安全运营</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL实践</title>
      <link href="2021/01/25/mysql-question/"/>
      <url>2021/01/25/mysql-question/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL实践"><a href="#MySQL实践" class="headerlink" title="MySQL实践"></a>MySQL实践</h1><p><img src="D:\Git-repo\hexo\source_posts\mysql-question\14c75d48-1eea-4d6a-abc9-31c6cbab4b24.jpg"></p><h2 id="普通索引和唯一索引，应该怎么选择？"><a href="#普通索引和唯一索引，应该怎么选择？" class="headerlink" title="普通索引和唯一索引，应该怎么选择？"></a>普通索引和唯一索引，应该怎么选择？</h2><p>在前面的基础篇文章中，我给你介绍过索引的基本概念，相信你已经了解了唯一索引和普通索引的区别。今天我们就继续来谈谈，在不同的业务场景下，应该选择普通索引，还是唯一索引？</p><p>假设你在维护一个市民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果市民系统需要按照身份证号查姓名，就会执行类似这样的 SQL 语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> CUser <span class="token keyword">where</span> id_card <span class="token operator">=</span> <span class="token string">'xxxxxxxyyyyyyzzzzz'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，你一定会考虑在 id_card 字段上建索引。</p><p>由于身份证号字段比较大，我不建议你把身份证号当做主键，那么现在你有两个选择，要么给 id_card 字段创建唯一索引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。</p><p>现在我要问你的是，从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？</p><p>简单起见，我们还是用第 4 篇文章<a href="https://time.geekbang.org/column/article/69236">《深入浅出索引（上）》</a>中的例子来说明，假设字段 k 上的值都不重复。</p><p>接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。</p><h3 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h3><p>假设，执行查询的语句是 select id from T where k=5。这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p><ul><li>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。</li><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li></ul><p>那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。</p><p>你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。</p><p>因为引擎是按页读写的，所以说，当找到 k=5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p><p>当然，如果 k=5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。</p><p>但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以，我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。</p><h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><p>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，我需要先跟你介绍一下 change buffer。</p><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><p>需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p><p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 merge。除了访问这个数据页会触发 merge 外，系统有后台线程会定期 merge。在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p><p>显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率。</p><p>那么，<strong>什么条件下可以使用 change buffer 呢？</strong></p><p>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入 (4,400) 这个记录，就要先判断现在表中是否已经存在 k=4 的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。</p><p>因此，唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。</p><p>change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。</p><p>现在，你已经理解了 change buffer 的机制，那么我们再一起来看看<strong>如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。</strong></p><p>第一种情况是，<strong>这个记录要更新的目标页在内存中</strong>。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</li></ul><p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的 CPU 时间。</p><p>但，这不是我们关注的重点。</p><p>第二种情况是，<strong>这个记录要更新的目标页不在内存中</strong>。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</li></ul><p>将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><p>之前我就碰到过一件事儿，有个 DBA 的同学跟我反馈说，他负责的某个业务的库内存命中率突然从 99% 降低到了 75%，整个系统处于阻塞状态，更新语句全部堵住。而探究其原因后，我发现这个业务有大量插入数据的操作，而他在前一天把其中的某个普通索引改成了唯一索引。</p><h3 id="change-buffer-的使用场景"><a href="#change-buffer-的使用场景" class="headerlink" title="change buffer 的使用场景"></a>change buffer 的使用场景</h3><p>通过上面的分析，你已经清楚了使用 change buffer 对更新过程的加速作用，也清楚了 change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？</p><p>因为 merge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做 merge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。</p><p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。</p><p>反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在 change buffer，但之后由于马上要访问这个数据页，会立即触发 merge 过程。这样随机访问 IO 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这种业务模式来说，change buffer 反而起到了副作用。</p><h3 id="索引选择和实践"><a href="#索引选择和实践" class="headerlink" title="索引选择和实践"></a>索引选择和实践</h3><p>回到我们文章开头的问题，普通索引和唯一索引应该怎么选择。其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，我建议你尽量选择普通索引。</p><p>如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。</p><p>在实际使用中，你会发现，普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的。</p><p>特别地，在使用机械硬盘时，change buffer 这个机制的收效是非常显著的。所以，当你有一个类似“历史数据”的库，并且出于成本考虑用的是机械硬盘时，那你应该特别关注这些表里的索引，尽量使用普通索引，然后把 change buffer 尽量开大，以确保这个“历史数据”表的数据写入速度。</p><h3 id="change-buffer-和-redo-log"><a href="#change-buffer-和-redo-log" class="headerlink" title="change buffer 和 redo log"></a>change buffer 和 redo log</h3><p>理解了 change buffer 的原理，你可能会联想到我在前面文章中和你介绍过的 redo log 和 WAL。</p><p>在前面文章的评论中，我发现有同学混淆了 redo log 和 change buffer。WAL 提升性能的核心机制，也的确是尽量减少随机读写，这两个概念确实容易混淆。所以，这里我把它们放到了同一个流程里来说明，便于你区分这两个概念。</p><blockquote><p>备注：这里，你可以再回顾下第 2 篇文章<a href="https://time.geekbang.org/column/article/68633">《日志系统：一条 SQL 更新语句是如何执行的？》</a>中的相关内容。</p></blockquote><p>现在，我们要在表上执行这个插入语句：</p><pre><code>mysql&gt; insert into t(id,k) values(id1,k1),(id2,k2);</code></pre><p>这里，我们假设当前 k 索引树的状态，查找到位置后，k1 所在的数据页在内存 (InnoDB buffer pool) 中，k2 所在的数据页不在内存中。如图 2 所示是带 change buffer 的更新状态图。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统安全基础</title>
      <link href="2021/01/25/blog-sc-windows-security-basic/"/>
      <url>2021/01/25/blog-sc-windows-security-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="1-账号安全"><a href="#1-账号安全" class="headerlink" title="1. 账号安全"></a>1. 账号安全</h2>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习基础</title>
      <link href="2021/01/25/deeplearning-basic/"/>
      <url>2021/01/25/deeplearning-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><h2 id="1-1-深度学习和神经网络"><a href="#1-1-深度学习和神经网络" class="headerlink" title="1.1 深度学习和神经网络"></a>1.1 深度学习和神经网络</h2><h3 id="1-1-1-深度学习简介"><a href="#1-1-1-深度学习简介" class="headerlink" title="1.1.1 深度学习简介"></a>1.1.1 深度学习简介</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>深度学习</strong><code>deep learning</code>是机器学习的分支，是一种以人工神经网络为架构，对数据进行特征学习的算法</p><p>机器学习和深度学习的区别：</p><ul><li><p>从<strong>特征提取</strong>的角度出发：</p><ul><li><p>机器学习需要有人工的特征提取的过程</p></li><li><p>深度学习中特征提取的过程可以通过深度神经网络自动完成</p></li></ul></li><li><p>从<strong>数据量</strong>的角度出发：</p><ul><li><p>深度学习需要大量的训练数据集，会有更好的效果</p></li><li><p>深度学习训练有更多的参数的深度神经网络需要大量的算力</p></li></ul></li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p>图像识别</p></li><li><p>自然语言处理技术</p></li><li><p>语音技术</p></li></ul><h3 id="1-1-2-神经网络简介"><a href="#1-1-2-神经网络简介" class="headerlink" title="1.1.2 神经网络简介"></a>1.1.2 神经网络简介</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><strong>人工神经网络</strong><code>Artificial Neural Network</code>，简称<strong>神经网络</strong><code>Neural Network</code>或<strong>类神经网络</strong>，是一种模仿生物神经网络的结构和功能的数学模型，用于对函数进行估计或近似。</p><p>​    </p><h4 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h4><p>1943 年，McCulloch 和 Pitts 将生物的神经网络抽象为一个简单模型，即 <strong>M-P 神经元模型</strong>。把许多这样的神经元按一定的层次结构连接起来，就得到神经网络。</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/simple-neuron.png" alt="一个简单的神经元"></p><p>其中：</p><ol><li>$a_1,a_2\dots a_n$ 为各个输入的分量</li><li>$w_1,w_2 \cdots w_n$ 为各个输入分量对应的权重参数</li><li>$b$ 为偏置</li><li>$f$ 为<strong>激活函数</strong>，常见的激活函数有<code>tanh</code>，<code>sigmoid</code>，<code>relu</code></li><li>$t$ 为神经元的输出</li></ol><p>​    </p><p>使用数学公式表示：<br>$$<br>t = f(W^TA+b)<br>$$<br>可见：<strong>一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果</strong></p><p>​    </p><h4 id="单层神经网络"><a href="#单层神经网络" class="headerlink" title="单层神经网络"></a>单层神经网络</h4><p>最基本的神经元网络形式，由有限个神经元构成，所有神经元的输入向量都是同一个向量。由于每一个神经元都会产生一个标量结果，所以单层神经元的输出是一个向量，向量的维数等于神经元的数目。</p><p><img src="%E5%8D%95%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png"></p><p>​        </p><h4 id="1-3-4-感知机"><a href="#1-3-4-感知机" class="headerlink" title="1.3.4 感知机"></a>1.3.4 感知机</h4><p>感知机由<strong>两层</strong>神经网络组成，输入层接收外界输入信号后传递给输出层<strong>（输出+1正例，-1反例）</strong>，输出层是 M-P 神经元，其中从$w_0,w_1\cdots w_n$都表示权重</p><p><img src="%E6%84%9F%E7%9F%A5%E6%9C%BA.png"></p><p><strong>感知机的作用：</strong></p><p>简单的二分类模型，把一个n维向量空间用一个超平面分割成两部分，给定一个输入向量，超平面可以判断出这个向量位于超平面的哪一边，得到输入正类或者是反类，<strong>对应到2维空间就是一条直线把一个平面分为两个部分</strong>。</p><p>​    </p><h4 id="1-3-5-多层神经网络"><a href="#1-3-5-多层神经网络" class="headerlink" title="1.3.5 多层神经网络"></a>1.3.5 多层神经网络</h4><p>多层神经网络就是由单层神经网络进行叠加之后得到的，所以就形成了<strong>层</strong>的概念，常见的多层神经网络有如下结构</p><ul><li><p>输入层<code>Input layer</code>，众多神经元<code>Neuron</code>接受大量输入消息。输入的消息称为输入向量。</p></li><li><p>输出层<code>Output layer</code>，消息在神经元链接中传输、分析、权衡，形成输出结果。输出的消息称为输出向量。</p></li><li><p>隐藏层<code>Hidden layer</code>，是输入层和输出层之间众多神经元和链接组成的各个层面。隐层可以有一层或多层。隐层的节点数目不定，但数目越多神经网络的非线性越显著，从而神经网络的强健性<code>robustness</code>更显著。</p></li></ul><p><img src="%E5%A4%9A%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png"></p><p><strong>概念：全连接层</strong></p><p>全连接层：当前一层和前一层每个神经元相互链接，称当前这一层为全连接层。</p><p><img src="%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%B1%82.png"></p><p>从上图看出，全连接层就是在前一层的输出的基础上进行一次 $Y=Wx+b$ 的变化(不考虑激活函数的情况下就是一次线性变化，所谓线性变化就是平移和缩放的组合)</p><p>​    </p><h4 id="1-3-6-激活函数"><a href="#1-3-6-激活函数" class="headerlink" title="1.3.6 激活函数"></a>1.3.6 激活函数</h4><p>引入：假设我们有这样一组数据，三角形和四边形，需要把他们分为两类</p><img src="激活函数1.png" style="zoom: 80%;" /><p>通过不带激活函数的感知机模型我们可以划出一条线, 把平面分割开</p><p><img src="%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B02.png"></p><p>假设确定了参数 $w$ 和 $b$ 之后带入需要预测的数据，如果y&gt;0，认为这个点在直线的右边，也就是正类（三角形），否则在左边（四边形）</p><p>但是三角形和四边形是没有办法通过直线分开的，可以考虑使用多层神经网络来进行尝试，比如在前面的感知机模型中再增加一层</p><p><img src="%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B03.png"></p><p>对上图中的等式进行合并，我们可以得到：<br>$$<br>y = (w_{1-11}w_{2-1}+\cdots)x_1+(w_{1-21}w_{2-1}+\cdots)x_2 + (w_{2-1}+\cdots)b_{1-1}<br>$$<br>上式依然只能够绘制出直线，即使是多层神经网络相比于前面的感知机也没有改进。但是如果在前面感知机的基础上加上<strong>非线性的激活函数</strong>之后，输出的结果就不再是一条直线</p><p><img src="%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B04.png"></p><p>如果给定合适的参数 $w$ 和 $b$ ，就可以得到合适的曲线，能够完成对最开始问题的非线性分割，所以激活函数很重要的一个作用就是<strong>增加模型的非线性分割能力</strong></p><img src="clip_image001.jpg" alt="常见的激活函数" style="zoom:80%;" /><ul><li><p><code>sigmoid</code> 只会输出正数，以及靠近0的输出变化率最大</p></li><li><p><code>tanh</code>输出可以是负数</p></li><li><p><code>Relu</code>是输入只能大于0，常用于输入是图片格式，因为图片的像素值作为输入时取值为[0,255]</p></li></ul><p>激活函数的作用：</p><ul><li><p><strong>增加模型的非线性分割能力</strong></p></li><li><p><strong>提高模型鲁棒性</strong></p></li><li><p><strong>缓解梯度消失问题</strong></p></li><li><p><strong>加速模型收敛</strong></p><p>……</p></li></ul><p>深度学习的<strong>思想</strong>：</p><p>输出的最原始、最基本的数据，通过模型来进行特征工程，进行更加高级特征的学习，然后通过传入的数据来确定合适的参数，让模型去更好的拟合数据。</p><p>​    </p><p>​    </p><p>​    </p><h3 id="1-4-梯度下降"><a href="#1-4-梯度下降" class="headerlink" title="1.4 梯度下降"></a>1.4 梯度下降</h3><h4 id="1-4-1-梯度是什么"><a href="#1-4-1-梯度是什么" class="headerlink" title="1.4.1 梯度是什么?"></a>1.4.1 梯度是什么?</h4><p>梯度是一个向量，是参数更新的方向</p><p>机器学习中，收集数据$x$ ，构建机器学习模型$f$，得到$f(x,w) = Y_{predict}$</p><p>判断模型好坏的方法：</p><ul><li><p>回归损失    $loss = (Y_{predict}-Y_{true})^2$</p></li><li><p>分类损失    $loss = Y_{true} \cdot log(Y_{predict})$</p></li></ul><p>目标：通过调整参数$w$，尽可能的降低$loss$</p><img src="梯度1.png" style="zoom: 68.5%;" /><p>随机选择一个起始点$w_0$,通过调整$w_0$，让$loss$函数取到最小值</p><p><img src="%E6%A2%AF%E5%BA%A62.png"></p><p><strong>$w$的更新方法</strong>：</p><ol><li>计算$w$的梯度</li></ol><p>$$<br>\nabla w = \frac{f(w+0.000001)-f(w-0.000001)}{2*0.000001}<br>$$</p><ol start="2"><li>更新$w$<br>$$<br>w = w - \alpha \nabla w<br>$$</li></ol><p>其中：</p><ol><li>$\nabla w &lt;0 $ ,意味着w将增大</li><li>$\nabla w &gt;0 $ ,意味着w将减小</li></ol><p>总结：梯度就是多元函数参数的变化趋势，只有一个自变量时称为<strong>导数</strong></p><p>​    </p><h4 id="2-3-2-偏导的计算"><a href="#2-3-2-偏导的计算" class="headerlink" title="2.3.2 偏导的计算"></a>2.3.2 偏导的计算</h4><h5 id="常见的导数计算"><a href="#常见的导数计算" class="headerlink" title="常见的导数计算"></a>常见的导数计算</h5><ul><li><p>多项式求导数：$f(x) = x^5$ ,$f^{‘}(x) = 5x^{(5-1)}$</p></li><li><p>基本运算求导：$f(x) = xy$ ，$f^{‘}(x) = y$</p></li><li><p>指数求导：$f(x) = 5e^x$ ，$f^{‘}(x) = 5e^x$</p></li><li><p>对数求导：$f(x) = 5lnx$ ，$f^{‘}(x) = \frac{5}{x}$</p></li><li><p>导数的微分形式：$f^{‘}(x) = \frac{d f(x)}{dx}$</p></li></ul><h5 id="多元函数求偏导"><a href="#多元函数求偏导" class="headerlink" title="多元函数求偏导"></a>多元函数求偏导</h5><p>一元函数，即有一个自变量。类似$f(x)$</p><p>多元函数，即有多个自变量。类似$f(x,y,z),三个自变量x,y,z$</p><p>多元函数求偏导过程中：<strong>对某一个自变量求导，其他自变量当做常量即可</strong></p><p>​    </p><p>​    </p><h3 id="1-5-反向传播算法"><a href="#1-5-反向传播算法" class="headerlink" title="1.5 反向传播算法"></a>1.5 反向传播算法</h3><h4 id="1-5-1-计算图和反向传播"><a href="#1-5-1-计算图和反向传播" class="headerlink" title="1.5.1 计算图和反向传播"></a>1.5.1 计算图和反向传播</h4><p><strong>计算图</strong>：通过图的方式来描述函数的图形</p><p>$J(a,b,c) = 3(a+bc),令u=a+v,v = bc$，绘制成计算图可以表示为：</p><p><img src="%E8%AE%A1%E7%AE%97%E5%9B%BE.png"></p><p>绘制成为计算图之后，可以清楚的看到向前计算的过程。之后，对每个节点求偏导可有：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%A2%AF%E5%BA%A6.png"></p><p>反向传播的过程就是一个上图的从右往左的过程，自变量$a,b,c$各自的偏导就是连线上的梯度的乘积：<br>$$<br>\frac{dJ}{da} = 3 \cdot 1 \\<br>\frac{dJ}{db} = 3 \cdot 1 \cdot c \\<br>\frac{dJ}{dc} = 3 \cdot 1 \cdot b<br>$$<br>​    </p><p>​    </p><h4 id="1-5-2-神经网络的反向传播"><a href="#1-5-2-神经网络的反向传播" class="headerlink" title="1.5.2 神经网络的反向传播"></a>1.5.2 神经网络的反向传播</h4><h5 id="神经网络示意图"><a href="#神经网络示意图" class="headerlink" title="神经网络示意图"></a>神经网络示意图</h5><p><img src="%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97%E5%9B%BE.png"></p><p>$w1,w2,….wn$表示网络第n层权重</p><p>$w_n[i,j]$表示第n层第i个神经元，连接到第n+1层第j个神经元的权重</p><h5 id="神经网络计算图"><a href="#神经网络计算图" class="headerlink" title="神经网络计算图"></a>神经网络计算图</h5><p><img src="%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97%E5%9B%BE2.png"></p><p>其中：</p><ol><li>$\nabla out$是根据损失函数对预测值进行求导得到的结果</li><li>$f$函数可以理解为激活函数</li></ol><p>​    </p><p>​    </p><p><strong>问题：</strong>那么此时$w_1[1,2]$的偏导该如何求解？</p><p>通过观察，发现从$out$ 到$w_1[1,2]$的来连接线有两条</p><p><img src="%E5%81%8F%E5%AF%BC%E7%9A%84%E8%AE%A1%E7%AE%97.png"></p><p>公式分为两部分：左边红线部分（右边红线部分 + 蓝线部分），结果：<br>$$<br>\frac{dout} {dW_1[1,2]} = x1 \cdot f’(a2) \cdot ( W_2[2,1] \cdot f’(b1) \cdot W_3[1,1] \cdot \nabla out +W_2[2,2] \cdot f’(b2) \cdot W_3[2,1] \cdot \nabla out)<br>$$<br>但是当模型很大的时候，计算量非常大，所以反向传播的思想就是<strong>对其中的某一个参数单独求梯度</strong>之后更新，如下图所示：</p><p><img src="%E5%81%8F%E5%AF%BC%E7%9A%84%E8%AE%A1%E7%AE%972.png"></p><p>计算过程如下<br>$$<br>\begin{array}{c}<br>\nabla W_3[1,1] = f(b_1) \cdot \nabla out \\<br>\nabla W_3[2,1] = f(b_2) \cdot \nabla out \\<br>\nabla b_1= f’(b_1) \cdot W_3[1,1] \cdot \nabla out \\<br>\nabla b_2= f’(b_2) \cdot W_3[2,1] \cdot \nabla out<br>\end{array}<br>$$<br>更新参数之后，继续反向传播</p><p><img src="%E5%81%8F%E5%AF%BC%E7%9A%84%E8%AE%A1%E7%AE%973.png"></p><p>计算过程如下：<br>$$<br>\begin{array}{c}<br>\nabla W_2[1,2] = f(a_1)\cdot \nabla b_2 \\<br>\nabla a_2 = f’(a_2)\cdot (w_2[2,1]\nabla b_1 +W_2[2,2] \nabla b_2)<br>\end{array}<br>$$<br>继续反向传播</p><p><img src="%E5%81%8F%E5%AF%BC%E7%9A%84%E8%AE%A1%E7%AE%974.png"></p><p>计算过程如下：<br>$$<br>\begin{array}{c}<br>\nabla W_1[1,2]= x_1\cdot \nabla a_2 \\<br>\nabla x_1 = (W_1[1,1]\cdot \nabla a_1+w_1[1,2]\cdot \nabla a_2)<br>\end{array}<br>$$</p><p><strong>通用的描述如下</strong>：<br>$$<br>\nabla w^l_{i,j} = f(a^l_i)\cdot \nabla a^{i+1}_{j}<br>$$</p><p>$$<br>\nabla a^l_i = f’(a^l_i)\cdot (\sum_{j=1}^m w_{i,j}\cdot \nabla a_j^{l+1})<br>$$</p><p>​    </p><p>​    </p><h2 id="1-2-PyTorch"><a href="#1-2-PyTorch" class="headerlink" title="1.2 PyTorch"></a>1.2 PyTorch</h2><h3 id="1-6-PyTorch实现线性回归"><a href="#1-6-PyTorch实现线性回归" class="headerlink" title="1.6 PyTorch实现线性回归"></a>1.6 PyTorch实现线性回归</h3><h4 id="1-6-1-向前计算"><a href="#1-6-1-向前计算" class="headerlink" title="1.6.1 向前计算"></a>1.6.1 向前计算</h4><p>对于pytorch中的一个tensor，如果设置它的属性 <code>.requires_grad</code>为<code>True</code>，那么它将会追踪对于该张量的所有操作。或者可以理解为，这个tensor是一个参数，后续会被计算梯度，更新该参数。</p><p>​    </p><p><strong>计算过程</strong></p><p>假设有以下条件（1/4表示求均值，xi中有4个数），使用torch完成其向前计算的过程<br>$$<br>\begin{array}{c}<br>&amp;o = \frac{1}{4}\sum_iz_i \\<br>&amp;z_i = 3(x_i+2)^2\\<br>其中:&amp;z_i|_{x_i=1}=27<br>\end{array}<br>$$<br>如果$x$为参数，需要对其进行梯度的计算和更新，那么在最开始随机设置$x$的值的过程中，需要设置他的<code>requires_grad</code>属性为True，其<strong>默认值为False</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#初始化参数x并设置requires_grad=True用来追踪其计算历史</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#tensor([[1., 1.],</span><span class="token comment" spellcheck="true">#        [1., 1.]], requires_grad=True)</span>y <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#tensor([[3., 3.],</span><span class="token comment" spellcheck="true">#        [3., 3.]], grad_fn=&lt;AddBackward0>)</span>z <span class="token operator">=</span> y<span class="token operator">*</span>y<span class="token operator">*</span><span class="token number">3</span>  <span class="token comment" spellcheck="true">#平方x3</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#tensor([[27., 27.],</span><span class="token comment" spellcheck="true">#        [27., 27.]], grad_fn=&lt;MulBackward0>) </span>out <span class="token operator">=</span> z<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#求均值</span><span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#tensor(27., grad_fn=&lt;MeanBackward0>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$x$的<code>requires_grad</code>属性为True之后的每次计算都会修改其<code>grad_fn</code>属性，用来记录做过的操作</p><p>​    </p><p>​    </p><p><strong>requires_grad和grad_fn</strong></p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#False</span>a<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#修改</span>b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>grad_fn<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># &lt;SumBackward0 object at 0x4e2b14345d21></span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_gard<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#tensor(151.6830),此时c没有gard_fn</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>防止跟踪历史记录和使用内存，可以将代码块包装在<code>with torch.no_grad():</code>中，这在<strong>评估模型时有用</strong>，因为模型可能具有<code>requires_grad = True</code>的可训练的参数，但是我们不需要在此过程中对他们进行梯度计算。</p><p>​    </p><p>​    </p><h4 id="1-6-2-梯度计算"><a href="#1-6-2-梯度计算" class="headerlink" title="1.6.2 梯度计算"></a>1.6.2 梯度计算</h4><p>可以使用<code>backward</code>方法来进行反向传播，计算梯度<code>out.backward()</code>,此时便能够求出导数$\frac{d out}{dx}$,调用<code>x.gard</code>能够获取导数值</p><p>得到</p><pre class="line-numbers language-python"><code class="language-python">tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4.5000</span><span class="token punctuation">,</span> <span class="token number">4.5000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">4.5000</span><span class="token punctuation">,</span> <span class="token number">4.5000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 因为：<br>$$<br>\frac{d(O)}{d(x_i)} = \frac{3}{2}(x_i+2)<br>$$<br>在$x_i$等于1时其值为4.5</p><p>​    </p><p><strong>注意：</strong></p><ol><li><p>在输出为一个标量的情况下，我们可以调用输出<code>tensor</code>的<code>backword()</code> 方法，但是在数据是一个向量的时候，调用<code>backward()</code>的时候还需要传入其他参数。</p></li><li><p><code>loss.backward()</code>就是根据损失函数，对参数为（requires_grad=True）的去计算梯度，并且累加保存到<code>x.gard</code>，此时还并未更新其梯度，所以每次反向传播之前需要先把梯度置为0后</p></li><li><p><code>tensor.data</code>：</p><ul><li><p>require_grad=False时，tensor.data和tensor等价</p></li><li><p>require_grad=True时，tensor.data仅仅是获取tensor中的数据</p></li></ul></li><li><p><code>tensor.numpy()</code>：</p><ul><li>require_grad=True不能够直接转换，需要使用<code>tensor.detach().numpy()</code>，能够实现对数据的深拷贝</li></ul></li></ol><p>​    </p><p>​    </p><h4 id="1-6-3-线性回归"><a href="#1-6-3-线性回归" class="headerlink" title="1.6.3 线性回归"></a>1.6.3 线性回归</h4><blockquote><p>使用自定义的数据，使用Torch实现一个简单的线性回归</p></blockquote><p>假设基础模型是$y = wx+b$，其中$w$和$b$均为参数，使用$y = 3x+0.8$来构造数据，最后通过模型应该能够得出$w$和$b$应该分别接近3和0.8</p><p>​    </p><ol><li>准备数据</li><li>计算预测值</li><li>计算损失，把参数的梯度置为0，进行反向传播</li><li>更新参数</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#1. 准备数据</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">0.8</span>w <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">loss_fn</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span><span class="token punctuation">:</span>    loss <span class="token operator">=</span> <span class="token punctuation">(</span>y_predict<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>w<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#每次反向传播前把梯度置为0</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>grad <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            i<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># [i.grad.data.zero_() for i in [w,b] if i.grad is not None]</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> loss<span class="token punctuation">.</span>data<span class="token keyword">def</span> <span class="token function">optimize</span><span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>    w<span class="token punctuation">.</span>data <span class="token operator">-=</span> learning_rate<span class="token operator">*</span> w<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data    b<span class="token punctuation">.</span>data <span class="token operator">-=</span> learning_rate<span class="token operator">*</span> b<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#2. 计算预测值</span>    y_predict <span class="token operator">=</span> x<span class="token operator">*</span>w <span class="token operator">+</span> b    <span class="token comment" spellcheck="true">#3.计算损失，把参数的梯度置为0，进行反向传播 </span>    loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>y<span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span>    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>loss<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#4. 更新参数w和b</span>    optimize<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制图形，观察训练结束的预测值和真实值</span>predict <span class="token operator">=</span>  x<span class="token operator">*</span>w <span class="token operator">+</span> b  <span class="token comment" spellcheck="true">#使用训练后的w和b计算预测值</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predict<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形效果如下：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\线性回归1.png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印w和b</span>w tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.9280</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>b tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.8372</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><h3 id="1-7-PyTorch完成基础模型"><a href="#1-7-PyTorch完成基础模型" class="headerlink" title="1.7 PyTorch完成基础模型"></a>1.7 PyTorch完成基础模型</h3><h4 id="1-7-1-常用API"><a href="#1-7-1-常用API" class="headerlink" title="1.7.1 常用API"></a>1.7.1 常用API</h4><p>在pytorch中预设了一些更加灵活简单的对象，让我们来构造模型、定义损失，优化损失等</p><h5 id="nn-Module"><a href="#nn-Module" class="headerlink" title="nn.Module"></a>nn.Module</h5><p><code>nn.Modul</code> 是<code>torch.nn</code>提供的一个类，是pytorch中自定义网络的一个基类，在这个类中定义了很多方法让继承这个类定义网络的时候非常简单</p><p>自定义网络的时候，有两个方法需要特别注意：</p><ol><li><code>__init__</code>需要调用<code>super</code>方法，继承父类的属性和方法</li><li><code>farward</code>方法必须实现，用来定义我们的网络的向前计算的过程</li></ol><blockquote><p>前面的$y = wx+b$的模型举例如下：</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">class</span> <span class="token class-name">Lr</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Lr<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#继承父类init的参数</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li><code>nn.Linear</code>为预定义好的线性模型，也称为<strong>全链接层</strong>，传入的参数为输入的数量，输出的数量<code>(in_features, out_features)</code></li><li><code>nn.Module</code>定义了<code>__call__</code>方法，实现的就是调用<code>forward</code>方法，即<code>Lr</code>的实例，能够直接被传入参数调用，实际上调用的是<code>forward</code>方法并传入参数</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 实例化模型</span>model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 传入数据，计算结果</span>predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><h5 id="优化器类"><a href="#优化器类" class="headerlink" title="优化器类"></a>优化器类</h5><p>优化器<code>optimizer</code>可以理解为torch为我们封装的用来进行更新参数的方法，比如常见的<code>SGD</code>、<code>Adam</code></p><p><strong>注意：</strong></p><ol><li><p>参数可以使用<code>model.parameters()</code>来获取，获取模型中所有<code>requires_grad=True</code>的参数</p></li><li><p>优化类的使用方法</p><ul><li><p>实例化</p></li><li><p>所有参数的梯度，将其值置为0</p></li><li><p>反向传播计算梯度</p></li><li><p>更新参数值</p></li></ul></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 示例</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1. 实例化</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2. 梯度置为0</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3. 计算梯度</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#4. 更新参数的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><h5 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h5><ol><li>均方误差:<code>nn.MSELoss()</code>,常用于回归问题</li><li>交叉熵损失：<code>nn.CrossEntropyLoss()</code>，常用于分类问题</li></ol><p>使用方法：</p><pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1. 实例化模型</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2. 实例化损失函数</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3. 实例化优化器类</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x_true<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4. 向前计算预测值</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#5. 调用损失函数传入真实值和预测值，得到损失结果</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#5. 当前循环参数梯度置为0</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#6. 计算梯度</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#7. 更新参数的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><p><strong>完整代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 1. 定义数据</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0.8</span><span class="token comment" spellcheck="true">#2 .定义模型</span><span class="token keyword">class</span> <span class="token class-name">Lr</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Lr<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span class="token comment" spellcheck="true"># 2. 实例化模型，loss，和优化器</span>model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3. 训练模型</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3.1 获取预测值</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3.2 计算损失</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#3.3 梯度归零</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3.4 计算梯度</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3.5 更新梯度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch[{}/{}], loss: {:.6f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4. 模型评估</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置模型为评估模式，即预测模式</span>predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>predict <span class="token operator">=</span> predict<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>predict<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\线性回归2.png"></p><p><strong>注意：</strong></p><p><code>model.eval()</code>表示设置模型为评估模式，即预测模式</p><p><code>model.train(mode=True)</code> 表示设置模型为训练模式</p><p>在当前的线性回归中，上述并无区别，但是在其他的一些模型中，<strong>训练的参数和预测的参数会不相同</strong>，到时候就需要具体告诉程序我们是在进行训练还是预测，比如模型中存在<strong>Dropout</strong>，<strong>BatchNorm</strong>时</p><p>​    </p><p>​    </p><h4 id="1-7-2-在GPU上运行代码"><a href="#1-7-2-在GPU上运行代码" class="headerlink" title="1.7.2 在GPU上运行代码"></a>1.7.2 在GPU上运行代码</h4><p>当模型太大或者参数太多的情况下，为了加快训练速度，经常会使用GPU来进行训练，此时我们的代码需要稍作调整：</p><ol><li><p>判断GPU是否可用<code>torch.cuda.is_available()</code></p></li><li><p>把模型参数和input数据转化为cuda的支持类型</p><pre class="line-numbers language-python"><code class="language-python">model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>x_true<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在GPU上计算结果也为cuda的数据类型，需要转化为numpy或者tensor类型</p><pre class="line-numbers language-python"><code class="language-python">predict <span class="token operator">=</span> predict<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>​    </p><p>完整代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 1. 定义数据</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0.8</span><span class="token comment" spellcheck="true">#2 .定义模型</span><span class="token keyword">class</span> <span class="token class-name">Lr</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Lr<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span class="token comment" spellcheck="true"># 2. 实例化模型，loss，和优化器</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3. 训练模型</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y<span class="token punctuation">,</span>out<span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch[{}/{}], loss: {:.6f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4. 模型评估</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#</span>predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>predict <span class="token operator">=</span> predict<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转化为numpy数组</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>predict<span class="token punctuation">,</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><h4 id="1-7-3-常见的优化算法介绍"><a href="#1-7-3-常见的优化算法介绍" class="headerlink" title="1.7.3 常见的优化算法介绍"></a>1.7.3 常见的优化算法介绍</h4><p>​    </p><h5 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h5><p><code>batch gradient descent</code></p><p>每次迭代都需要把所有样本都送入，这样的好处是每次迭代都顾及了全部的样本，做的是全局最优化，但是有可能达到<strong>局部最优</strong>。</p><p>​    </p><h5 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h5><p><code>Stochastic gradient descent</code></p><p>针对梯度下降算法训练速度过慢的缺点，提出了随机梯度下降算法。</p><p>算法从样本中随机抽出一组，训练后按梯度更新一次，然后再抽取一组，再更新一次，在样本量及其大的情况下，可能不用训练完所有的样本就可以获得一个损失值在可接受范围之内的模型了。</p><p>torch API：<code>torch.optim.SGD()</code></p><p>​    </p><h5 id="小批量梯度下降法"><a href="#小批量梯度下降法" class="headerlink" title="小批量梯度下降法"></a>小批量梯度下降法</h5><p> <code>Mini-batch gradient descent</code></p><p>SGD也存在问题，由于<strong>单个样本的训练可能会带来很多噪声，使得SGD并不是每次迭代都向着整体最优化方向，因此在刚开始训练时可能收敛得很快，但是训练一段时间后就会变得很慢</strong>。在此基础上又提出了小批量梯度下降法，它是每次从样本中随机抽取一小批进行训练，而不是一组，这样即保证了效果又保证的速度。</p><p>​       </p><h5 id="动量法"><a href="#动量法" class="headerlink" title="动量法"></a>动量法</h5><p><code>Momentum</code></p><p>MSGD算法虽然能带来很好的训练速度，但是在到达最优点的时候<strong>并不能够总是真正到达最优点</strong>，而是在最优点附近徘徊。另一个缺点是算法需要一个合适的学习率。当我们采用小的学习率的时候，会导致网络在训练的时候收敛太慢；当我们采用大的学习率的时候，会导致在训练过程中优化的幅度跳过函数的范围，也就是可能跳过最优点。我们所希望的仅仅是网络在优化的时候网络的损失函数有一个<strong>很好的收敛速度同时又不至于摆动幅度太大</strong>。</p><p>Momentum优化器可以解决问题，它主要是<strong>基于梯度的移动指数加权平均，对网络的梯度进行平滑处理的，让梯度的摆动幅度变得更小</strong>。<br>$$<br>\begin{array}{c}<br>&amp;gradent = 0.8 \nabla w + 0.2 history\_gradent  &amp;\\<br>&amp;w = w - \alpha \cdot gradent &amp;<br>\end{array}<br>$$</p><p>注：t+1的的<em>histroy_gradent</em> 为第t次的<em>gradent</em></p><p>​    </p><h5 id="AdaGrad"><a href="#AdaGrad" class="headerlink" title="AdaGrad"></a>AdaGrad</h5><p>AdaGrad算法就是将每一个参数的每一次迭代的梯度取平方累加后在开方，用全局学习率除以这个数，作为学习率的动态更新，从而达到<strong>自适应学习率</strong>的效果<br>$$<br>\begin{array}{c}<br>&amp;gradent = history_gradent + (\nabla w)^2 \\<br>&amp;w = w - \frac{\alpha}{\sqrt{gradent}+\delta} \nabla w<br>\end{array}<br>$$</p><p>注：$\delta$为小常数，为了数值稳定大约设置为$10^{-7}$</p><p>​    </p><h5 id="RMSProp"><a href="#RMSProp" class="headerlink" title="RMSProp"></a>RMSProp</h5><p>为了<strong>进一步优化损失函数在更新中存在摆动幅度过大的问题，并进一步加快函数的收敛速度</strong>，RMSProp算法对参数的梯度使用了平方加权平均数。<br>$$<br>\begin{array}{c}<br>&amp; gradent = 0.8 \cdot history_gradent + 0.2 \cdot (\nabla w)^2 \\<br>&amp; w = w - \frac{\alpha}{\sqrt{gradent}+\delta} \nabla w<br>\end{array}<br>$$</p><p>​    </p><h5 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h5><p><code>Adaptive Moment Estimation</code></p><p>Adam算法是将Momentum算法和RMSProp算法结合起来使用的一种算法，能够防止梯度的摆幅过大，同时还能够加收敛速度<br>$$<br>\begin{array}{c}<br>&amp; v_w = 0,s_w = 0 \\<br>&amp; v_w = 0.8v  + 0.2 \nabla w \qquad \\<br>&amp; s_w = 0.8s + 0.2(\nabla w)^2 \qquad \\<br>&amp; w = w - \frac{\alpha}{\sqrt{s_w}+\delta} v_w<br>\end{array}<br>$$</p><ol><li>需要初始化梯度的累积量和平方累积量</li><li>第 t 轮训练中可以计算得到<code>Momentum</code>和<code>RMSProp</code>的参数更新</li><li>对其中的值进行处理后</li></ol><p>torch API：<code>torch.optim.Adam()</code></p><p>​    </p><p>​    </p><h3 id="1-8-PyTorch数据加载"><a href="#1-8-PyTorch数据加载" class="headerlink" title="1.8 PyTorch数据加载"></a>1.8 PyTorch数据加载</h3><h4 id="1-8-1-模型中使用数据加载器的目的"><a href="#1-8-1-模型中使用数据加载器的目的" class="headerlink" title="1.8.1 模型中使用数据加载器的目的"></a>1.8.1 模型中使用数据加载器的目的</h4><p>在深度学习中，数据量通常非常大，不可能一次性的在模型中进行向前的计算和反向传播。我们经常会对整个数据随机打乱顺序，把数据处理成一个个<code>batch</code>，同时还会对数据进行预处理。</p><p>​    </p><p>​    </p><h4 id="1-8-2-数据集类"><a href="#1-8-2-数据集类" class="headerlink" title="1.8.2  数据集类"></a>1.8.2  数据集类</h4><h5 id="Dataset基类介绍"><a href="#Dataset基类介绍" class="headerlink" title="Dataset基类介绍"></a>Dataset基类介绍</h5><p>torch中提供了数据集基类<code>torch.utils.data.Dataset</code>，继承这个基类，我们能够非常快速的实现对数据的加载。</p><p><code>torch.utils.data.Dataset</code>源码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dataset</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""An abstract class representing a Dataset.    All other datasets should subclass it. All subclasses should override    ``__len__``, that provides the size of the dataset, and ``__getitem__``,    supporting integer indexing in range from 0 to len(self) exclusive.    """</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ConcatDataset<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">,</span> other<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要在自定义的数据集类中继承Dataset类，同时还需要实现两个方法：</p><ol><li><code>__len__</code>方法，能够实现通过全局的<code>len()</code>方法获取其中的元素个数</li><li><code>__getitem__</code>方法，能够通过传入索引的方式获取数据，例如通过<code>dataset[i]</code>获取其中的第<code>i</code>条数据</li></ol><p>​    </p><p>​    </p><h5 id="数据加载案例"><a href="#数据加载案例" class="headerlink" title="数据加载案例"></a>数据加载案例</h5><p><a href="http://archive.ics.uci.edu/ml/datasets/SMS+Spam+Collection">数据来源</a></p><p>数据介绍：SMS Spam Collection是用于骚扰短信识别的经典数据集，完全来自真实短信内容，包括4831条正常短信和747条骚扰短信。正常短信和骚扰短信保存在一个文本文件中。 每行完整记录一条短信内容，每行开头通过ham和spam标识正常短信和骚扰短信</p><p>数据实例：</p><p><img src="dataset%E6%95%B0%E6%8D%AE%E7%A4%BA%E4%BE%8B.png"></p><p>实现如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span>DataLoader<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata_path <span class="token operator">=</span> r<span class="token string">"data\SMSSpamCollection"</span><span class="token keyword">class</span> <span class="token class-name">CifarDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        lines <span class="token operator">=</span> open<span class="token punctuation">(</span>data_path<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#对数据进行处理，前4个为label，后面的为短信内容</span>        lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#转化为dataFrame</span>        self<span class="token punctuation">.</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>lines<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">,</span><span class="token string">"sms"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        single_item <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> single_item<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>single_item<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后对Dataset进行实例化，可以跌倒获取其中的数据</p><pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span> CifarDataset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-8-3-迭代数据集"><a href="#1-8-3-迭代数据集" class="headerlink" title="1.8.3 迭代数据集"></a>1.8.3 迭代数据集</h4><p><code>torch.utils.data.DataLoader</code>提供了的方法</p><ul><li>批处理数据<code>Batching the data</code></li><li>打乱数据<code>Shuffling the data</code></li><li>使用多线程 <code>multiprocessing</code> 并行加载数据</li></ul><p>​    </p><p><code>DataLoader</code>使用示例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoaderdataset <span class="token operator">=</span> CifarDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>data_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>drop_last<span class="token operator">=</span>Ture<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#遍历，获取其中的每个batch的结果</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span>label<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>data_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>label<span class="token punctuation">,</span>context<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数：</p><ul><li><code>dataset</code>：提前定义的dataset的实例</li><li><code>batch_siz</code>e:传入数据的batch的大小，常用128,256等等</li><li><code>shuffle</code>：bool类型，表示是否在每次获取数据的时候提前打乱数据</li><li><code>num_workers</code>：加载数据的线程数</li></ul><p>​    </p><p><strong>注意：</strong></p><ol><li><code>len(dataset)</code> = 数据集的样本数</li><li><code>len(dataloader) = math.ceil(样本数/batch_size)</code> 即向上取整</li></ol><p>​    </p><p>​    </p><h4 id="1-8-4-PyTorch自带的数据集"><a href="#1-8-4-PyTorch自带的数据集" class="headerlink" title="1.8.4 PyTorch自带的数据集"></a>1.8.4 PyTorch自带的数据集</h4><p>pytorch中自带的数据集由两个上层API提供，分别是<code>torchvision</code>和<code>torchtext</code></p><p>其中：</p><ol><li><p><code>torchvision</code>提供了对图片数据处理相关的api和数据</p><p>数据位置：<code>torchvision.datasets</code>，例如：<code>torchvision.datasets.MNIST</code>（手写数字图片数据）</p></li><li><p><code>torchtext</code>提供了对文本数据处理相关的API和数据</p><p>数据位置：<code>torchtext.datasets</code>,例如：<code>torchtext.datasets.IMDB</code>（电影评论文本数据）</p></li></ol><p>​    </p><p>​    </p><h5 id="torchversion-datasets"><a href="#torchversion-datasets" class="headerlink" title="torchversion.datasets"></a>torchversion.datasets</h5><p><code>torchversoin.datasets</code>中的数据集类都是继承自<code>Dataset</code>，意味着：直接对<code>torchvision.datasets.MNIST</code>进行实例化就可以得到<code>Dataset</code>的实例</p><p>API中的参数：</p><p><code> torchvision.datasets.MNIST(root=&#39;/files/&#39;, train=True, download=True, transform=)</code></p><ol><li><code>root</code>参数表示数据存放的位置</li><li><code>train：</code>bool类型，表示是使用训练集的数据还是测试集的数据</li><li><code>download：</code>bool类型，表示是否需要下载数据到root目录</li><li><code>transform:</code>实现的对图片的处理函数</li></ol><p>​    </p><h5 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h5><p>数据集原始<a href="http://yann.lecun.com/exdb/mnist/">地址</a></p><p>MNIST是由<code>Yann LeCun</code>等人提供的免费的图像识别的数据集，其中包括60000个训练样本和10000个测试样本，其中图拍了的尺寸已经进行的标准化的处理，都是黑白的图像，大小为<code>28X28</code></p><p>​    </p><p>执行代码，下载数据，观察数据类型：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvisiondataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>transform<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载的数据如下：</p><p><img src="MNIST-dataset.png"></p><p>返回值的第0个为Image类型，可以调用show() 方法打开，发现为手写数字5</p><pre class="line-numbers language-python"><code class="language-python">img <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打开图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="MNIST-dataset-5.png"></p><p>​    </p><p>​    </p><h3 id="1-9-PyTorch手写数字识别"><a href="#1-9-PyTorch手写数字识别" class="headerlink" title="1.9 PyTorch手写数字识别"></a>1.9 PyTorch手写数字识别</h3><h4 id="1-思路和流程分析"><a href="#1-思路和流程分析" class="headerlink" title="1. 思路和流程分析"></a>1. 思路和流程分析</h4><ol><li>准备数据，准备DataLoader</li><li>构建模型，使用torch构造一个深层的神经网络</li><li>模型训练</li><li>模型保存</li><li>模型评估，使用测试集观察模型好坏</li></ol><p>​    </p><p>​    </p><h4 id="2-准备训练集和测试集"><a href="#2-准备训练集和测试集" class="headerlink" title="2. 准备训练集和测试集"></a>2. 准备训练集和测试集</h4><p>调用MNIST返回的结果中图形数据是一个Image对象,需要对其进行处理</p><p>​    </p><h5 id="torchvision-transforms的图形数据处理方法"><a href="#torchvision-transforms的图形数据处理方法" class="headerlink" title="torchvision.transforms的图形数据处理方法"></a><code>torchvision.transforms</code>的图形数据处理方法</h5><p><code>torchvision.transforms.ToTensor</code></p><p>把一个取值范围是**[0,255]<strong>的<code>PIL.Image</code>或者shape为</strong>(H,W,C)<strong>的<code>numpy.ndarray</code>转换成形状为</strong>[C,H,W]**</p><p>其中**(H,W,C)<strong>意思为</strong>(高，宽，通道数)<strong>，黑白图片的通道数只有1，其中每个像素点的取值为</strong>[0,255]<strong>，彩色图片的通道数为</strong>(R,G,B)<strong>，每个通道的每个像素点的取值为</strong>[0,255]**，三个通道的颜色相互叠加，形成了各种颜色</p><p>​    </p><p>示例如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>img <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>img_tensor <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 转换成tensor</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_tensor<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-python"><code class="language-python">shape<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>img_tensor<span class="token punctuation">:</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span> <span class="token number">34</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">,</span>  <span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>new shape<span class="token punctuation">:</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p><code>transforms.ToTensor</code>对象中有<code>__call__</code>方法，所以可以对其示例能够传入数据获取结果</p><p><code>torchvision.transforms.Normalize(mean, std)</code></p><p>给定均值：mean，shape和图片的通道数相同(指的是每个通道的均值)，方差：std，和图片的通道数相同(指的是每个通道的方差)，将会把<code>Tensor</code>规范化处理。</p><p>即：<code>Normalized_image=(image-mean)/std</code>。</p><p>例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torchvisiondata <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>img <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>img <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 转换成tensor</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>norm_img <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#进行规范化处理</span><span class="token keyword">print</span><span class="token punctuation">(</span>norm_img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre><code>tensor([[[177, 223],         [ 71, 182]],        [[153, 120],         [173,  33]],        [[162, 233],         [194,  73]]], dtype=torch.int32)***************************************************************************************tensor([[[167, 213],         [ 61, 172]],        [[143, 110],         [163,  23]],        [[152, 223],         [184,  63]]], dtype=torch.int32)</code></pre><p>注意：在sklearn中，默认上式中的std和mean为数据每列的std和mean，sklearn会在标准化之前算出每一列的std和mean。</p><p>但是在api：Normalize中并没有帮我们计算，所以我们需要手动计算</p><ol><li><p>当mean为全部数据的均值，std为全部数据的std的时候，才是进行了标准化。</p></li><li><p>如果mean(x)不是全部数据的mean的时候，std(y)也不是的时候，Normalize后的数据分布满足下面的关系<br>$$<br>\begin{align*}<br>&amp;new_mean = \frac{mean-x}{y}&amp;， mean为原数据的均值，x为传入的均值x \<br>&amp;new_std = \frac{std}{y} &amp;，y为传入的标准差y\<br>\end{align*}<br>$$</p></li></ol><p>2.1.3 <code>torchvision.transforms.Compose(transforms)</code></p><p>将多个<code>transform</code>组合起来使用。</p><p>例如</p><pre class="line-numbers language-python"><code class="language-python">transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>     torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#先转化为Tensor</span>     torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token punctuation">,</span>std<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#在进行正则化</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h5 id="准备MNIST数据集的Dataset和DataLoader"><a href="#准备MNIST数据集的Dataset和DataLoader" class="headerlink" title="准备MNIST数据集的Dataset和DataLoader"></a>准备MNIST数据集的Dataset和DataLoader</h5><p>准备训练集</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token comment" spellcheck="true">#准备数据集，其中0.1307，0.3081为MNIST数据的均值和标准差，这样操作能够对其进行标准化</span><span class="token comment" spellcheck="true">#因为MNIST只有一个通道（黑白图片）,所以元组中只有一个值</span>dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                             transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                               torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>                                 <span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                             <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#准备数据迭代器                          </span>train_dataloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备测试集</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token comment" spellcheck="true">#准备数据集，其中0.1307，0.3081为MNIST数据的均值和标准差，这样操作能够对其进行标准化</span><span class="token comment" spellcheck="true">#因为MNIST只有一个通道（黑白图片）,所以元组中只有一个值</span>dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                             transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                               torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>                                 <span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                             <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#准备数据迭代器                          </span>train_dataloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><h4 id="3-构建模型"><a href="#3-构建模型" class="headerlink" title="3. 构建模型"></a>3. 构建模型</h4><p>补充：<strong>全连接层</strong>：当前一层的神经元和前一层的神经元相互链接，其核心操作就是$y = wx$，即矩阵的乘法，实现对前一层的数据的变换</p><p>模型的构建使用了一个三层的神经网络，其中包括两个全连接层和一个输出层，第一个全连接层会经过激活函数的处理，将处理后的结果交给下一个全连接层，进行变换后输出结果</p><p>那么在这个模型中有两个地方需要注意：</p><ol><li>激活函数如何使用</li><li>每一层数据的形状</li><li>模型的损失函数</li></ol><h5 id="3-1-激活函数的使用"><a href="#3-1-激活函数的使用" class="headerlink" title="3.1 激活函数的使用"></a>3.1 激活函数的使用</h5><p>前面介绍了激活函数的作用，常用的激活函数为Relu激活函数，他的使用非常简单</p><p>Relu激活函数由<code>import torch.nn.functional as F</code>提供，<code>F.relu(x)</code>即可对x进行处理</p><p>例如：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> FIn <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>b<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-模型中数据的形状（【添加形状变化图形】）"><a href="#3-2-模型中数据的形状（【添加形状变化图形】）" class="headerlink" title="3.2  模型中数据的形状（【添加形状变化图形】）"></a>3.2  模型中数据的形状（【添加形状变化图形】）</h5><ol><li>原始输入数据为的形状:<code>[batch_size,1,28,28]</code></li><li>进行形状的修改：<code>[batch_size,28*28]</code> ,(全连接层是在进行矩阵的乘法操作)</li><li>第一个全连接层的输出形状：<code>[batch_size,28]</code>，这里的28是个人设定的，你也可以设置为别的</li><li>激活函数不会修改数据的形状</li><li>第二个全连接层的输出形状：<code>[batch_size,10]</code>,因为手写数字有10个类别</li></ol><p>构建模型的代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">MnistNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MnistNet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#定义Linear的输入和输出的形状</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#定义Linear的输入和输出的形状</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#对数据形状变形，-1表示该位置根据后面的形状自动调整</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[batch_size,28]</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#[batch_size,28]</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[batch_size,10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现：pytorch在构建模型的时候<code>形状上</code>并不会考虑<code>batch_size</code></p><h5 id="3-3-模型的损失函数"><a href="#3-3-模型的损失函数" class="headerlink" title="3.3 模型的损失函数"></a>3.3 模型的损失函数</h5><p>首先，我们需要明确，当前我们手写字体识别的问题是一个多分类的问题，所谓多分类对比的是之前学习的2分类</p><p>回顾之前的课程，我们在逻辑回归中，我们使用sigmoid进行计算对数似然损失，来定义我们的2分类的损失。</p><ul><li><p>在2分类中我们有正类和负类，正类的概率为$P(x) =  \frac{1}{1+e^{-x}} = \frac{e^x}{1+e^x}$,那么负类的概率为$1-P(x)$</p></li><li><p>将这个结果进行计算对数似然损失$-\sum y log(P(x))$就可以得到最终的损失</p></li></ul><p>那么在多分类的过程中我们应该怎么做呢？</p><ul><li><p>多分类和2分类中唯一的区别是我们不能够再使用sigmoid函数来计算当前样本属于某个类别的概率，而应该使用softmax函数。</p></li><li><p>softmax和sigmoid的区别在于我们需要去计算样本属于每个类别的概率，需要计算多次，而sigmoid只需要计算一次</p></li></ul><p>softmax的公式如下：<br>$$<br>\sigma(z)_j = \frac{e^{z_j}}{\sum^K_{k=1}e^{z_K}}  ,j=1 \cdots k<br>$$</p><p>例如下图：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\softmax.png"></p><p>假如softmax之前的输出结果是<code>2.3, 4.1, 5.6</code>,那么经过softmax之后的结果是多少呢？<br>$$<br>Y1 = \frac{e^{2.3}}{e^{2.3}+e^{4.1}+e^{5.6}} \<br>Y2 = \frac{e^{4.1}}{e^{2.3}+e^{4.1}+e^{5.6}} \<br>Y3 = \frac{e^{5.6}}{e^{2.3}+e^{4.1}+e^{5.6}} \<br>$$</p><p>对于这个softmax输出的结果，是在[0,1]区间，我们可以把它当做概率</p><p>和前面2分类的损失一样，多分类的损失只需要再把这个结果进行对数似然损失的计算即可</p><p>即：<br>$$<br>\begin{align*}<br>&amp; J = -\sum Y log(P) &amp;, 其中 P = \frac{e^{z_j}}{\sum^K_{k=1}e^{z_K}} ,Y表示真实值<br>\end{align*}<br>$$<br>最后，会计算每个样本的损失，即上式的平均值</p><p>我们把softmax概率传入对数似然损失得到的损失函数称为<strong>交叉熵损失</strong></p><p>在pytorch中有两种方法实现交叉熵损失</p><ol><li><pre><code>criterion = nn.CrossEntropyLoss()loss = criterion(input,target)</code></pre></li><li><pre><code>#1. 对输出值计算softmax和取对数output = F.log_softmax(x,dim=-1)#2. 使用torch中带权损失loss = F.nll_loss(output,target)</code></pre></li></ol><p>带权损失定义为：$l_n = -\sum w_{i} x_{i}$，其实就是把$log(P)$作为$x_i$,把真实值Y作为权重</p><h4 id="4-模型的训练"><a href="#4-模型的训练" class="headerlink" title="4. 模型的训练"></a>4. 模型的训练</h4><p>训练的流程：</p><ol><li>实例化模型，设置模型为训练模式</li><li>实例化优化器类，实例化损失函数</li><li>获取，遍历dataloader</li><li>梯度置为0</li><li>进行向前计算</li><li>计算损失</li><li>反向传播</li><li>更新参数</li></ol><pre class="line-numbers language-python"><code class="language-python">mnist_net <span class="token operator">=</span> MnistNet<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>mnist_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">True</span>    mnist_net<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token operator">=</span>mode<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#模型设置为训练模型</span>    train_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>train<span class="token operator">=</span>mode<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取训练数据集</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#梯度置为0</span>        output <span class="token operator">=</span> mnist_net<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#进行向前计算</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#带权损失</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#进行反向传播，计算梯度</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#参数更新</span>        <span class="token keyword">if</span> idx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> idx <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> idx <span class="token operator">/</span> len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-模型的保存和加载"><a href="#5-模型的保存和加载" class="headerlink" title="5. 模型的保存和加载"></a>5. 模型的保存和加载</h4><h5 id="5-1-模型的保存"><a href="#5-1-模型的保存" class="headerlink" title="5.1 模型的保存"></a>5.1 模型的保存</h5><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>mnist_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"model/mnist_net.pt"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#保存模型参数</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'results/mnist_optimizer.pt'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#保存优化器参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-2-模型的加载"><a href="#5-2-模型的加载" class="headerlink" title="5.2 模型的加载"></a>5.2 模型的加载</h5><pre class="line-numbers language-python"><code class="language-python">mnist_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"model/mnist_net.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"results/mnist_optimizer.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-模型的评估"><a href="#6-模型的评估" class="headerlink" title="6. 模型的评估"></a>6. 模型的评估</h4><p>评估的过程和训练的过程相似，但是：</p><ol><li>不需要计算梯度</li><li>需要收集损失和准确率，用来计算平均损失和平均准确率</li><li>损失的计算和训练时候损失的计算方法相同</li><li>准确率的计算：<ul><li>模型的输出为[batch_size,10]的形状</li><li>其中最大值的位置就是其预测的目标值（预测值进行过sotfmax后为概率，sotfmax中分母都是相同的，分子越大，概率越大）</li><li>最大值的位置获取的方法可以使用<code>torch.max</code>,返回最大值和最大值的位置</li><li>返回最大值的位置后，和真实值（<code>[batch_size]</code>）进行对比，相同表示预测成功</li></ul></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    test_loss <span class="token operator">=</span> <span class="token number">0</span>    correct <span class="token operator">=</span> <span class="token number">0</span>    mnist_net<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#设置模型为评估模式</span>    test_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取评估数据集</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#不计算其梯度</span>        <span class="token keyword">for</span> data<span class="token punctuation">,</span> target <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            output <span class="token operator">=</span> mnist_net<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            test_loss <span class="token operator">+=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> output<span class="token punctuation">.</span>data<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#获取最大值的位置,[batch_size,1]</span>            correct <span class="token operator">+=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">.</span>view_as<span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#预测准备样本数累加</span>    test_loss <span class="token operator">/=</span> len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#计算平均损失</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        test_loss<span class="token punctuation">,</span> correct<span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> correct <span class="token operator">/</span> len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-完整的代码如下："><a href="#7-完整的代码如下：" class="headerlink" title="7. 完整的代码如下："></a>7. 完整的代码如下：</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torchvisiontrain_batch_size <span class="token operator">=</span> <span class="token number">64</span>test_batch_size <span class="token operator">=</span> <span class="token number">1000</span>img_size <span class="token operator">=</span> <span class="token number">28</span><span class="token keyword">def</span> <span class="token function">get_dataloader</span><span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>train<span class="token punctuation">,</span>bool<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"train 必须是bool类型"</span>    <span class="token comment" spellcheck="true">#准备数据集，其中0.1307，0.3081为MNIST数据的均值和标准差，这样操作能够对其进行标准化</span>    <span class="token comment" spellcheck="true">#因为MNIST只有一个通道（黑白图片）,所以元组中只有一个值</span>    dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span>train<span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                         transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                         torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#准备数据迭代器</span>    batch_size <span class="token operator">=</span> train_batch_size <span class="token keyword">if</span> train <span class="token keyword">else</span> test_batch_size    dataloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dataloader<span class="token keyword">class</span> <span class="token class-name">MnistNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MnistNet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[batch_size,28]</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#[batch_size,28]</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[batch_size,10]</span>        <span class="token comment" spellcheck="true"># return x</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>x<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>mnist_net <span class="token operator">=</span> MnistNet<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>mnist_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># criterion = nn.NLLLoss()</span><span class="token comment" spellcheck="true"># criterion = nn.CrossEntropyLoss()</span>train_loss_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>train_count_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">True</span>    mnist_net<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token operator">=</span>mode<span class="token punctuation">)</span>    train_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>train<span class="token operator">=</span>mode<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> mnist_net<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#对数似然损失</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> idx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> idx <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> idx <span class="token operator">/</span> len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_loss_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_count_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token operator">*</span>train_batch_size<span class="token operator">+</span><span class="token punctuation">(</span>epoch<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>mnist_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"model/mnist_net.pkl"</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'results/mnist_optimizer.pkl'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    test_loss <span class="token operator">=</span> <span class="token number">0</span>    correct <span class="token operator">=</span> <span class="token number">0</span>    mnist_net<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    test_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data<span class="token punctuation">,</span> target <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            output <span class="token operator">=</span> mnist_net<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            test_loss <span class="token operator">+=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> output<span class="token punctuation">.</span>data<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#获取最大值的位置,[batch_size,1]</span>            correct <span class="token operator">+=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">.</span>view_as<span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>    test_loss <span class="token operator">/=</span> len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        test_loss<span class="token punctuation">,</span> correct<span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> correct <span class="token operator">/</span> len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#模型训练5轮</span>        train<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><p>​    </p><h2 id="1-3-循环神经网络"><a href="#1-3-循环神经网络" class="headerlink" title="1.3 循环神经网络"></a>1.3 循环神经网络</h2><h3 id="2-1-RNN和NLP介绍"><a href="#2-1-RNN和NLP介绍" class="headerlink" title="2.1 RNN和NLP介绍"></a>2.1 RNN和NLP介绍</h3><h4 id="2-1-1-文本的tokenization"><a href="#2-1-1-文本的tokenization" class="headerlink" title="2.1.1 文本的tokenization"></a>2.1.1 文本的tokenization</h4><p><code>tokenization</code>就是通常所说的分词，分出的每一个词语我们把它称为<code>token</code></p><p>常见的分词工具很多，比如：</p><ul><li><a href="https://github.com/fxsjy/jieba">jieba分词</a></li><li>清华分词工具<a href="https://github.com/thunlp/THULAC-Python">THULAC</a></li></ul><p>​    </p><p>​    </p><h4 id="2-1-2-N-garm"><a href="#2-1-2-N-garm" class="headerlink" title="2.1.2  N-garm"></a>2.1.2  N-garm</h4><p>准备词语特征的方法。有时我们可以用2个、3个或者多个词来表示。<code>N-gram</code>其中的<code>N</code>表示能够被一起使用的词的数量</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> text <span class="token operator">=</span> <span class="token string">"深度学习（英语：deep learning）是机器学习的分支，是一种以人工神经网络为架构，对数据进行表征学习的算法。"</span>In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cuted <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cuted<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cuted<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#N-gram 中n=2时</span>Out<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'深度'</span><span class="token punctuation">,</span> <span class="token string">'学习'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span> <span class="token string">'（'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'（'</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token string">'：'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'：'</span><span class="token punctuation">,</span> <span class="token string">'deep'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'deep'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'learning'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'learning'</span><span class="token punctuation">,</span> <span class="token string">'）'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'）'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'机器'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'机器'</span><span class="token punctuation">,</span> <span class="token string">'学习'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'分支'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'分支'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'一种'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'一种'</span><span class="token punctuation">,</span> <span class="token string">'以'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'以'</span><span class="token punctuation">,</span> <span class="token string">'人工神经网络'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'人工神经网络'</span><span class="token punctuation">,</span> <span class="token string">'为'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'为'</span><span class="token punctuation">,</span> <span class="token string">'架构'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'架构'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'对'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'对'</span><span class="token punctuation">,</span> <span class="token string">'数据'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'数据'</span><span class="token punctuation">,</span> <span class="token string">'进行'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'进行'</span><span class="token punctuation">,</span> <span class="token string">'表征'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'表征'</span><span class="token punctuation">,</span> <span class="token string">'学习'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'算法'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'算法'</span><span class="token punctuation">,</span> <span class="token string">'。'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在传统的机器学习中，使用N-gram方法往往能够取得非常好的效果，但是在深度学习比如RNN中会自带N-gram的效果。</p><p>​    </p><p>​    </p><h4 id="2-1-3-向量化"><a href="#2-1-3-向量化" class="headerlink" title="2.1.3 向量化"></a>2.1.3 向量化</h4><p>文本不能够直接被模型计算，所以需要将其转化为向量</p><p>把文本转化为向量有两种方法：</p><ol><li>转化为one-hot编码</li><li>转化为word embedding</li></ol><p>​    </p><p>​    </p><h5 id="one-hot-编码"><a href="#one-hot-编码" class="headerlink" title="one-hot 编码"></a>one-hot 编码</h5><p>在one-hot编码中，每一个token使用一个长度为N的向量表示，N表示词典的数量</p><p>即：把待处理的文档进行分词或者是N-gram处理，然后进行去重得到词典，假设我们有一个文档：<code>深度学习</code>，那么进行one-hot处理后的结果：</p><table><thead><tr><th>token</th><th>one-hot encoding</th></tr></thead><tbody><tr><td>深</td><td>1000</td></tr><tr><td>度</td><td>0100</td></tr><tr><td>学</td><td>0010</td></tr><tr><td>习</td><td>0001</td></tr></tbody></table><p>​    </p><p>​    </p><h5 id="word-embedding"><a href="#word-embedding" class="headerlink" title="word embedding"></a>word embedding</h5><p>word embedding使用了<strong>浮点型的稠密矩阵</strong>来表示token。根据词典的大小，我们的向量通常使用不同的维度，例如100,256,300等。其中向量中的每一个值是一个参数，其初始值是随机生成的，之后会在训练的过程中进行学习而获得。</p><p>如果我们文本中有20000个词语，如果使用one-hot编码，那么我们会有20000<em>20000的矩阵，其中大多数的位置都为0，但是如果我们使用word embedding来表示的话，只需要20000\</em> 维度，比如20000*300</p><p>形象的表示就是：</p><table><thead><tr><th>token</th><th>num</th><th>vector</th></tr></thead><tbody><tr><td>词1</td><td>0</td><td><code>[w11,w12,w13...w1N]</code> ,其中N表示维度（dimension）</td></tr><tr><td>词2</td><td>1</td><td><code>[w21,w22,w23...w2N] </code></td></tr><tr><td>词3</td><td>2</td><td><code>[w31,w23,w33...w3N] </code></td></tr><tr><td>…</td><td>….</td><td>…</td></tr><tr><td>词m</td><td>m</td><td><code>[wm1,wm2,wm3...wmN]</code>,其中m表示词典的大小</td></tr></tbody></table><p>我们会把所有的文本转化为向量，把句子用向量来表示</p><p>但是在这中间，<strong>我们会先把token使用数字来表示，再把数字使用向量来表示。</strong></p><p>即：<code>token---&gt; num ----&gt;vector</code></p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\word_embedding.png"></p><p><strong>word embedding API</strong></p><p><code>torch.nn.Embedding(num_embeddings,embedding_dim)</code></p><p>参数介绍：</p><ol><li><code>num_embeddings</code>：词典的大小</li><li><code>embedding_dim</code>：embedding的维度</li></ol><p>使用方法：</p><pre class="line-numbers language-python"><code class="language-python">embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#实例化</span>input_embeded <span class="token operator">=</span> embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#进行embedding的操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><h5 id="数据的形状变化"><a href="#数据的形状变化" class="headerlink" title="数据的形状变化"></a>数据的形状变化</h5><p>思考：每个batch中的每个句子有10个词语，经过形状为[20，4]的Word emebedding之后，原来的句子会变成什么形状？</p><p>每个词语用长度为4的向量表示，所以，最终句子会变为<code>[batch_size,10,4]</code>的形状。</p><p>增加了一个维度，这个维度是embedding的dim</p><p>​    </p><p>​    </p><h3 id="2-2-文本情感分类"><a href="#2-2-文本情感分类" class="headerlink" title="2.2 文本情感分类"></a>2.2 文本情感分类</h3><h4 id="1-案例介绍"><a href="#1-案例介绍" class="headerlink" title="1. 案例介绍"></a>1. 案例介绍</h4><p>为了对前面的word embedding这种常用的文本向量化的方法进行巩固，这里我们会完成一个文本情感分类的案例</p><p>现在我们有一个经典的数据集<code>IMDB</code>数据集，地址：<code>http://ai.stanford.edu/~amaas/data/sentiment/</code>，这是一份包含了5万条流行电影的评论数据，其中训练集25000条，测试集25000条。数据格式如下：</p><p>下图左边为名称，其中名称包含两部分，分别是序号和情感评分，（1-4为neg，5-10为pos），右边为评论内容</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\样本名称.png"></p><p>根据上述的样本，需要使用pytorch完成模型，实现对评论情感进行预测</p><h4 id="2-思路分析"><a href="#2-思路分析" class="headerlink" title="2. 思路分析"></a>2. 思路分析</h4><p>首先可以把上述问题定义为分类问题，情感评分分为1-10，10个类别（也可以理解为回归问题，这里当做分类问题考虑）。那么根据之前的经验，我们的大致流程如下：</p><ol><li>准备数据集</li><li>构建模型</li><li>模型训练</li><li>模型评估</li></ol><p>知道思路之后，那么我们一步步来完成上述步骤</p><h4 id="3-准备数据集"><a href="#3-准备数据集" class="headerlink" title="3. 准备数据集"></a>3. 准备数据集</h4><p>准备数据集和之前的方法一样，实例化dataset，准备dataloader，最终我们的数据可以处理成如下格式：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\情感分类-data加载1.png"></p><p>其中有两点需要注意：</p><ol><li>如何完成基础打Dataset的构建和Dataloader的准备</li><li>每个batch中文本的长度不一致的问题如何解决</li><li>每个batch中的文本如何转化为数字序列</li></ol><h5 id="3-1-基础Dataset的准备"><a href="#3-1-基础Dataset的准备" class="headerlink" title="3.1 基础Dataset的准备"></a>3.1 基础Dataset的准备</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span>Dataset<span class="token keyword">import</span> os<span class="token keyword">import</span> redata_base_path <span class="token operator">=</span> r<span class="token string">"data\aclImdb"</span><span class="token comment" spellcheck="true">#1. 定义tokenize的方法</span><span class="token keyword">def</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># fileters = '!"#$%&amp;()*+,-./:;&lt;=>?@[\\]^_`{|}~\t\n'</span>    fileters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'!'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'$'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'\('</span><span class="token punctuation">,</span><span class="token string">'\)'</span><span class="token punctuation">,</span><span class="token string">'\*'</span><span class="token punctuation">,</span><span class="token string">'\+'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">'\.'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'\?'</span><span class="token punctuation">,</span><span class="token string">'@'</span>        <span class="token punctuation">,</span><span class="token string">'\['</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'^'</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'`'</span><span class="token punctuation">,</span><span class="token string">'\{'</span><span class="token punctuation">,</span><span class="token string">'\|'</span><span class="token punctuation">,</span><span class="token string">'\}'</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\x97'</span><span class="token punctuation">,</span><span class="token string">'\x96'</span><span class="token punctuation">,</span><span class="token string">'”'</span><span class="token punctuation">,</span><span class="token string">'“'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"&lt;.*?>"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>text<span class="token punctuation">,</span>flags<span class="token operator">=</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>fileters<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>text<span class="token punctuation">,</span>flags<span class="token operator">=</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#2. 准备dataset</span><span class="token keyword">class</span> <span class="token class-name">ImdbDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>mode<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ImdbDataset<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> mode<span class="token operator">==</span><span class="token string">"train"</span><span class="token punctuation">:</span>            text_path <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_base_path<span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"train/neg"</span><span class="token punctuation">,</span><span class="token string">"train/pos"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            text_path <span class="token operator">=</span>  <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_base_path<span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"test/neg"</span><span class="token punctuation">,</span><span class="token string">"test/pos"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>total_file_path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> text_path<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>total_file_path_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur_path <span class="token operator">=</span> self<span class="token punctuation">.</span>total_file_path_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        cur_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span>        label <span class="token operator">=</span> int<span class="token punctuation">(</span>cur_filename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#处理标题，获取label，转化为从[0-9]</span>        text <span class="token operator">=</span> tokenize<span class="token punctuation">(</span>open<span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#直接按照空格进行分词</span>        <span class="token keyword">return</span> label<span class="token punctuation">,</span>text    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>total_file_path_list<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2. 实例化，准备dataloader</span>dataset <span class="token operator">=</span> ImdbDataset<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3. 观察数据输出结果</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span>text<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"idx："</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"table:"</span><span class="token punctuation">,</span>label<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"text:"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>    <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-python"><code class="language-python">idx： <span class="token number">0</span>table<span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>text<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'Want'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'thought'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token string">'great'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'was'</span><span class="token punctuation">,</span> <span class="token string">'recipe'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'great'</span><span class="token punctuation">,</span> <span class="token string">'failure'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'idea'</span><span class="token punctuation">,</span> <span class="token string">'Take'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'but'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'boy'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'was'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'it'</span><span class="token punctuation">,</span> <span class="token string">'plot'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'poorly'</span><span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'executed'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'We'</span><span class="token punctuation">,</span> <span class="token string">'some'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'do'</span><span class="token punctuation">,</span> <span class="token string">'weak'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'completely'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'undeveloped'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'broad'</span><span class="token punctuation">,</span> <span class="token string">'characters'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'sense'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'of'</span><span class="token punctuation">,</span> <span class="token string">'than'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'how'</span><span class="token punctuation">,</span> <span class="token string">'throw'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'complex'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'the'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'challenging'</span><span class="token punctuation">,</span> <span class="token string">'worst'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'special'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'backstage'</span><span class="token punctuation">,</span> <span class="token string">'effects'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'operations'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'of'</span><span class="token punctuation">,</span> <span class="token string">'horror'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'movie'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">,</span> <span class="token string">'has'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'are'</span><span class="token punctuation">,</span> <span class="token string">'known'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'but'</span><span class="token punctuation">,</span> <span class="token string">'Let'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'virtually'</span><span class="token punctuation">,</span> <span class="token string">'stew'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">,</span> <span class="token string">'somehow'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'rather'</span><span class="token punctuation">,</span> <span class="token string">'destroy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'than'</span><span class="token punctuation">,</span> <span class="token string">'every'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'anything'</span><span class="token punctuation">,</span> <span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'worth'</span><span class="token punctuation">,</span> <span class="token string">'of'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'watching'</span><span class="token punctuation">,</span> <span class="token string">'this'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'film'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'its'</span><span class="token punctuation">,</span> <span class="token string">'so'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'own'</span><span class="token punctuation">,</span> <span class="token string">'it'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'merit'</span><span class="token punctuation">,</span> <span class="token string">'will'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>明显，其中的text内容出现对应，和想象的不太相似，出现问题的原因在于<code>Dataloader</code>中的参数<code>collate_fn</code></p><p><code>collate_fn</code>的默认值为torch自定义的<code>default_collate</code>,<code>collate_fn</code>的作用就是对每个batch进行处理，而默认的<code>default_collate</code>处理出错。</p><p>解决问题的思路：</p><p>手段1：考虑先把数据转化为数字序列，观察其结果是否符合要求，之前使用DataLoader并未出现类似错误</p><p>手段2：考虑自定义一个<code>collate_fn</code>，观察结果</p><p>这里使用方式2，自定义一个<code>collate_fn</code>,然后观察结果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#batch是list，其中是一个一个元组，每个元组是dataset中__getitem__的结果</span>    batch <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    labes <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    texts <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">del</span> batch    <span class="token keyword">return</span> labes<span class="token punctuation">,</span>textsdataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#此时输出正常</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span>text<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"idx："</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"table:"</span><span class="token punctuation">,</span>label<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"text:"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>    <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-文本序列化"><a href="#3-2-文本序列化" class="headerlink" title="3.2 文本序列化"></a>3.2 文本序列化</h5><blockquote><p>再介绍word embedding的时候，我们说过，不会直接把文本转化为向量，而是先转化为数字，再把数字转化为向量，那么这个过程该如何实现呢？</p></blockquote><p>这里我们可以考虑把文本中的每个<strong>词语和其对应的数字，使用字典保存</strong>，同时实现方法<strong>把句子通过字典映射为包含数字的列表</strong>。</p><p>实现文本序列化之前，考虑以下几点:</p><ol><li>如何使用字典把词语和数字进行对应</li><li>不同的词语出现的次数不尽相同，是否需要对高频或者低频词语进行过滤，以及总的词语数量是否需要进行限制</li><li>得到词典之后，如何把句子转化为数字序列，如何把数字序列转化为句子</li><li>不同句子长度不相同，每个batch的句子如何构造成相同的长度（可以对短句子进行填充，填充特殊字符）</li><li>对于新出现的词语在词典中没有出现怎么办（可以使用特殊字符代理）</li></ol><p>思路分析：</p><ol><li>对所有句子进行分词</li><li>词语存入字典，根据次数对词语进行过滤，并统计次数</li><li>实现文本转数字序列的方法</li><li>实现数字序列转文本方法</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Word2Sequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    UNK_TAG <span class="token operator">=</span> <span class="token string">"UNK"</span>    PAD_TAG <span class="token operator">=</span> <span class="token string">"PAD"</span>    UNK <span class="token operator">=</span> <span class="token number">0</span>    PAD <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span>            self<span class="token punctuation">.</span>UNK_TAG <span class="token punctuation">:</span>self<span class="token punctuation">.</span>UNK<span class="token punctuation">,</span>            self<span class="token punctuation">.</span>PAD_TAG <span class="token punctuation">:</span>self<span class="token punctuation">.</span>PAD        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>fited <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">to_index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""word -> index"""</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>fited <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">"必须先进行fit操作"</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span>self<span class="token punctuation">.</span>UNK<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">to_word</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""index -> word"""</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>fited <span class="token punctuation">,</span> <span class="token string">"必须先进行fit操作"</span>        <span class="token keyword">if</span> index <span class="token keyword">in</span> self<span class="token punctuation">.</span>inversed_dict<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>inversed_dict<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>UNK_TAG    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentences<span class="token punctuation">,</span> min_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_count<span class="token operator">=</span>None<span class="token punctuation">,</span> max_feature<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param sentences:[[word1,word2,word3],[word1,word3,wordn..],...]        :param min_count: 最小出现的次数        :param max_count: 最大出现的次数        :param max_feature: 总词语的最大数量        :return:        """</span>        count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>            <span class="token keyword">for</span> a <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>                <span class="token keyword">if</span> a <span class="token operator">not</span> <span class="token keyword">in</span> count<span class="token punctuation">:</span>                    count<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                count<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 比最小的数量大和比最大的数量小的需要</span>        <span class="token keyword">if</span> min_count <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            count <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v <span class="token operator">>=</span> min_count<span class="token punctuation">}</span>        <span class="token keyword">if</span> max_count <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            count <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v <span class="token operator">&lt;=</span> max_count<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 限制最大的数量</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>max_feature<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            count <span class="token operator">=</span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">(</span>count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> max_feature <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> len<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">></span> max_feature<span class="token punctuation">:</span>                count <span class="token operator">=</span> count<span class="token punctuation">[</span><span class="token operator">-</span>int<span class="token punctuation">(</span>max_feature<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> w<span class="token punctuation">,</span> _ <span class="token keyword">in</span> count<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dict<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>count<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dict<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fited <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true"># 准备一个index->word的字典</span>        self<span class="token punctuation">.</span>inversed_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentence<span class="token punctuation">,</span>max_len<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        实现吧句子转化为数组（向量）        :param sentence:        :param max_len:        :return:        """</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>fited<span class="token punctuation">,</span> <span class="token string">"必须先进行fit操作"</span>        <span class="token keyword">if</span> max_len <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            r <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>PAD<span class="token punctuation">]</span><span class="token operator">*</span>max_len        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>PAD<span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>        <span class="token keyword">if</span> max_len <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> len<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token operator">></span>max_len<span class="token punctuation">:</span>            sentence<span class="token operator">=</span>sentence<span class="token punctuation">[</span><span class="token punctuation">:</span>max_len<span class="token punctuation">]</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span>word <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>            r<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>to_index<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>r<span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inverse_transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>indices<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        实现从数组 转化为文字        :param indices: [1,2,3....]        :return:[word1,word2.....]        """</span>        sentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">:</span>            word <span class="token operator">=</span> self<span class="token punctuation">.</span>to_word<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            sentence<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    w2s <span class="token operator">=</span> Word2Sequence<span class="token punctuation">(</span><span class="token punctuation">)</span>    w2s<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"你"</span><span class="token punctuation">,</span> <span class="token string">"好"</span><span class="token punctuation">,</span> <span class="token string">"么"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"你"</span><span class="token punctuation">,</span> <span class="token string">"好"</span><span class="token punctuation">,</span> <span class="token string">"哦"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w2s<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w2s<span class="token punctuation">.</span>fited<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w2s<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"你"</span><span class="token punctuation">,</span><span class="token string">"好"</span><span class="token punctuation">,</span><span class="token string">"嘛"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w2s<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"你好嘛"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>max_len<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成了<code>wordsequence</code>之后，接下来就是保存现有样本中的数据字典，方便后续的使用。</p><p>实现对IMDB数据的处理和保存</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1. 对IMDB的数据记性fit操作</span><span class="token keyword">def</span> <span class="token function">fit_save_word_sequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> wordSequence <span class="token keyword">import</span> Word2Sequence    ws <span class="token operator">=</span> Word2Sequence<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_path <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_base_path<span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"train/neg"</span><span class="token punctuation">,</span><span class="token string">"train/pos"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    total_file_path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> train_path<span class="token punctuation">:</span>        total_file_path_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> cur_path <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>total_file_path_list<span class="token punctuation">,</span>ascii<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>desc<span class="token operator">=</span><span class="token string">"fitting"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ws<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>tokenize<span class="token punctuation">(</span>open<span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>build_vocab<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对wordSequesnce进行保存</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>ws<span class="token punctuation">,</span>open<span class="token punctuation">(</span><span class="token string">"./model/ws.pkl"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2. 在dataset中使用wordsequence</span>ws <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">"./model/ws.pkl"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    MAX_LEN <span class="token operator">=</span> <span class="token number">500</span>     <span class="token comment" spellcheck="true">#MAX_LEN = max([len(i) for i in texts]) #取当前batch的最大值作为batch的最大长度</span>    batch <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    labes <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int<span class="token punctuation">)</span>    texts <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#获取每个文本的长度</span>    lengths <span class="token operator">=</span> <span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span>MAX_LEN <span class="token keyword">else</span> MAX_LEN <span class="token keyword">for</span> i <span class="token keyword">in</span> texts<span class="token punctuation">]</span>    texts <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>ws<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>i<span class="token punctuation">,</span> MAX_LEN<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> texts<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> batch    <span class="token keyword">return</span> labes<span class="token punctuation">,</span>texts<span class="token punctuation">,</span>lengths<span class="token comment" spellcheck="true">#3. 获取输出</span>dataset <span class="token operator">=</span> ImdbDataset<span class="token punctuation">(</span>ws<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span>    dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span>text<span class="token punctuation">,</span>length<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"idx："</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"table:"</span><span class="token punctuation">,</span>label<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"text:"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"length:"</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下</p><pre class="line-numbers language-python"><code class="language-python">idx： <span class="token number">0</span>table<span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>         <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>text<span class="token punctuation">:</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">50983</span><span class="token punctuation">,</span>  <span class="token number">77480</span><span class="token punctuation">,</span>  <span class="token number">82366</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">54702</span><span class="token punctuation">,</span>  <span class="token number">57262</span><span class="token punctuation">,</span> <span class="token number">102035</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">80474</span><span class="token punctuation">,</span>  <span class="token number">56457</span><span class="token punctuation">,</span>  <span class="token number">63180</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">26991</span><span class="token punctuation">,</span>  <span class="token number">57693</span><span class="token punctuation">,</span>  <span class="token number">88450</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">51138</span><span class="token punctuation">,</span>  <span class="token number">73263</span><span class="token punctuation">,</span>  <span class="token number">80428</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>  <span class="token number">7022</span><span class="token punctuation">,</span>  <span class="token number">78114</span><span class="token punctuation">,</span>  <span class="token number">83498</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>  <span class="token number">5353</span><span class="token punctuation">,</span> <span class="token number">101803</span><span class="token punctuation">,</span>  <span class="token number">99148</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>length<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">296</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">221</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">407</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">322</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">317</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">379</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>思考：前面我们自定义了MAX_LEN作为句子的最大长度，如果我们需要把每个batch中的最长的句子长度作为当前batch的最大长度，该如何实现？</p></blockquote><h4 id="4-构建模型"><a href="#4-构建模型" class="headerlink" title="4. 构建模型"></a>4. 构建模型</h4><p>这里我们只练习使用word embedding，所以模型只有一层，即：</p><ol><li>数据经过word embedding</li><li>数据通过全连接层返回结果，计算<code>log_softmax</code></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">from</span> build_dataset <span class="token keyword">import</span> get_dataloader<span class="token punctuation">,</span>ws<span class="token punctuation">,</span>MAX_LEN<span class="token keyword">class</span> <span class="token class-name">IMDBModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>max_len<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>IMDBModel<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>padding_idx<span class="token operator">=</span>ws<span class="token punctuation">.</span>PAD<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[N,300]</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>max_len<span class="token operator">*</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#[max_len*300,10]</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        embed <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[batch_size,max_len,300]</span>        embed <span class="token operator">=</span> embed<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>embed<span class="token punctuation">)</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-模型的训练和评估"><a href="#5-模型的训练和评估" class="headerlink" title="5. 模型的训练和评估"></a>5. 模型的训练和评估</h4><p>训练流程和之前相同</p><ol><li>实例化模型，损失函数，优化器</li><li>遍历dataset_loader，梯度置为0，进行向前计算</li><li>计算损失，反向传播优化损失，更新参数</li></ol><pre class="line-numbers language-python"><code class="language-python">train_batch_size <span class="token operator">=</span> <span class="token number">128</span>test_batch_size <span class="token operator">=</span> <span class="token number">1000</span>imdb_model <span class="token operator">=</span> IMDBModel<span class="token punctuation">(</span>MAX_LEN<span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>imdb_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">True</span>    imdb_model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token punctuation">)</span>    train_dataloader <span class="token operator">=</span>get_dataloader<span class="token punctuation">(</span>mode<span class="token punctuation">,</span>train_batch_size<span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>input<span class="token punctuation">,</span>input_lenght<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> imdb_model<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#traget需要是[0,9]，不能是[1-10]</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> idx <span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> idx <span class="token operator">*</span> len<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> idx <span class="token operator">/</span> len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>imdb_model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"model/mnist_net.pkl"</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'model/mnist_optimizer.pkl'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    test_loss <span class="token operator">=</span> <span class="token number">0</span>    correct <span class="token operator">=</span> <span class="token number">0</span>    mode <span class="token operator">=</span> <span class="token boolean">False</span>    imdb_model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    test_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>mode<span class="token punctuation">,</span> test_batch_size<span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> target<span class="token punctuation">,</span> input<span class="token punctuation">,</span> input_lenght <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            output <span class="token operator">=</span> imdb_model<span class="token punctuation">(</span>input<span class="token punctuation">)</span>            test_loss  <span class="token operator">+=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">,</span>reduction<span class="token operator">=</span><span class="token string">"sum"</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>output<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>keepdim<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            correct <span class="token operator">=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>        test_loss <span class="token operator">=</span> test_loss<span class="token operator">/</span>len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>            test_loss<span class="token punctuation">,</span> correct<span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> correct <span class="token operator">/</span> len<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们仅仅使用了一层全连接层，其分类效果不会很好，这里重点是理解常见的模型流程和word embedding的使用方法</p><h3 id="2-3-循环神经网络"><a href="#2-3-循环神经网络" class="headerlink" title="2.3 循环神经网络"></a>2.3 循环神经网络</h3><h4 id="2-3-1-循环神经网络的介绍"><a href="#2-3-1-循环神经网络的介绍" class="headerlink" title="2.3.1 循环神经网络的介绍"></a>2.3.1 循环神经网络的介绍</h4><blockquote><p>为什么有了神经网络还需要有循环神经网络？</p></blockquote><p>在普通的神经网络中，信息的传递是单向的，这种限制虽然使得网络变得更容易学习，但在一定程度上也减弱了神经网络模型的能力。特别是在很多现实任务中，网络的输出不仅和当前时刻的输入相关，也和其过去一段时间的输出相关。此外，普通网络难以处理时序数据，比如视频、语音、文本等，时序数据的长度一般是不固定的，而前馈神经网络要求输入和输出的维数都是固定的，不能任意改变。因此，当处理这一类和时序相关的问题时，就需要一种能力更强的模型。</p><p>循环神经网络（Recurrent Neural Network，RNN）是一类具有短期记忆能力的神经网络。在循环神经网络中，神经元不但可以接受其它神经元的信息，也可以接受自身的信息，形成具有环路的网络结构。换句话说：神经元的输出可以在下一个时间步直接作用到自身（</p><p>入）</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\RNN图.png"></p><p>通过简化图，我们看到RNN比传统的神经网络多了一个循环圈，这个循环表示的就是在下一个时间步（<strong>Time Step</strong>）上会返回作为输入的一部分，我们把RNN在时间点上展开，得到的图形如下：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\RNN展开.png"></p><p>或者是：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\基础的RNN展开图.png"></p><p>在不同的时间步，RNN的输入都将与之前的时间状态有关，$t_n$时刻网络的输出结果是该时刻的输入和所有历史共同作用的结果，这就达到了对时间序列建模的目的。</p><p>RNN的不同表示和功能可以通过下图看出：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\RNN功能.png"></p><ul><li>图1：固定长度的输入和输出 (e.g. 图像分类)</li><li>图2：序列输出 (e.g.图像转文字)</li><li>图3：数列输入 (e.g. 文本分类)</li><li>图4：异步的序列输入和输出(e.g.文本翻译).</li><li>图5：同步的序列输入和输出 (e.g. 根据视频的每一帧来对视频进行分类)</li></ul><h4 id="2-1-LSTM的基础介绍"><a href="#2-1-LSTM的基础介绍" class="headerlink" title="2.1 LSTM的基础介绍"></a>2.1 LSTM的基础介绍</h4><p>假如现在有这样一个需求，根据现有文本预测下一个词语，比如<code>天上的云朵漂浮在__</code>，通过间隔不远的位置就可以预测出来词语是<code>天上</code>，但是对于其他一些句子，可能需要被预测的词语在前100个词语之前，那么此时由于间隔非常大，随着间隔的增加可能会导致真实的预测值对结果的影响变的非常小，而无法非常好的进行预测（RNN中的长期依赖问题（long-Term Dependencies））</p><p>那么为了解决这个问题需要<strong>LSTM</strong>（<strong>Long Short-Term Memory网络</strong>）</p><p>LSTM是一种RNN特殊的类型，可以学习长期依赖信息。在很多问题上，LSTM都取得相当巨大的成功，并得到了广泛的应用。</p><p>一个LSMT的单元就是下图中的一个绿色方框中的内容：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\LSTM1.jpg"></p><p>其中$\sigma$表示sigmod函数，其他符号的含义：</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\LSTM2.jpg"></p><h4 id="2-2-LSTM的核心"><a href="#2-2-LSTM的核心" class="headerlink" title="2.2 LSTM的核心"></a>2.2 LSTM的核心</h4><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\LSTM3.png"></p><p>LSTM的核心在于单元（细胞）中的状态，也就是上图中最上面的那根线。</p><p>但是如果只有上面那一条线，那么没有办法实现信息的增加或者删除，所以在LSTM是通过一个叫做<code>门</code>的结构实现，门可以选择让信息通过或者不通过。</p><p>这个门主要是通过sigmoid和点乘（<code>pointwise multiplication</code>）实现的</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\LSTM4.png"></p><p>我们都知道，$sigmoid$的取值范围是在(0,1)之间，如果接近0表示不让任何信息通过，如果接近1表示所有的信息都会通过</p><h4 id="2-3-逐步理解LSTM"><a href="#2-3-逐步理解LSTM" class="headerlink" title="2.3 逐步理解LSTM"></a>2.3 逐步理解LSTM</h4><h5 id="2-3-1-遗忘门"><a href="#2-3-1-遗忘门" class="headerlink" title="2.3.1 遗忘门"></a>2.3.1 遗忘门</h5><p>遗忘门通过sigmoid函数来决定哪些信息会被遗忘</p><p>在下图就是$h_{t-1}和x_t$进行合并（concat）之后乘上权重和偏置，通过sigmoid函数，输出0-1之间的一个值，这个值会和前一次的细胞状态($C_{t-1}$)进行点乘，从而决定遗忘或者保留</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\易王门.png"></p><h5 id="2-3-2-输入门"><a href="#2-3-2-输入门" class="headerlink" title="2.3.2 输入门"></a>2.3.2 输入门</h5><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\输入门.png"></p><p>下一步就是决定哪些新的信息会被保留，这个过程有两步：</p><ol><li>一个被称为<code>输入门</code>的sigmoid 层决定哪些信息会被更新</li><li><code>tanh</code>会创造一个新的候选向量$\widetilde{C}_{t}$，后续可能会被添加到细胞状态中</li></ol><p>例如：</p><p><code>我昨天吃了苹果，今天我想吃菠萝</code>，在这个句子中，通过遗忘门可以遗忘<code>苹果</code>,同时更新新的主语为<code>菠萝</code></p><p>现在就可以更新旧的细胞状态$C_{t-1}$为新的$C_{ t }$ 了。</p><p>更新的构成很简单就是：</p><ol><li>旧的细胞状态和遗忘门的结果相乘</li><li>然后加上 输入门和tanh相乘的结果</li></ol><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\LSTM-update.png"></p><h5 id="2-3-3-输出门"><a href="#2-3-3-输出门" class="headerlink" title="2.3.3 输出门"></a>2.3.3 输出门</h5><p>最后，我们需要决定什么信息会被输出，也是一样这个输出经过变换之后会通过sigmoid函数的结果来决定那些细胞状态会被输出。</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\输出门.png"></p><p>步骤如下：</p><ol><li>前一次的输出和当前时间步的输入的组合结果通过sigmoid函数进行处理得到$O_t$</li><li>更新后的细胞状态$C_t$会经过tanh层的处理，把数据转化到(-1,1)的区间</li><li>tanh处理后的结果和$O_t$进行相乘，把结果输出同时传到下一个LSTM的单元</li></ol><h4 id="2-4-GRU，LSTM的变形"><a href="#2-4-GRU，LSTM的变形" class="headerlink" title="2.4 GRU，LSTM的变形"></a>2.4 GRU，LSTM的变形</h4><p>GRU(Gated Recurrent Unit),是一种LSTM的变形版本， 它将遗忘和输入门组合成一个“更新门”。它还合并了单元状态和隐藏状态，并进行了一些其他更改，由于他的模型比标准LSTM模型简单，所以越来越受欢迎。</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\GRU.png"></p><p>LSTM内容参考地址：<a href="https://colah.github.io/posts/2015-08-Understanding-LSTMs/">https://colah.github.io/posts/2015-08-Understanding-LSTMs/</a></p><h4 id="3-双向LSTM"><a href="#3-双向LSTM" class="headerlink" title="3. 双向LSTM"></a>3. 双向LSTM</h4><p>单向的 RNN，是根据前面的信息推出后面的，但有时候只看前面的词是不够的， 可能需要预测的词语和后面的内容也相关，那么此时需要一种机制，能够让模型不仅能够从前往后的具有记忆，还需要从后往前需要记忆。此时双向LSTM就可以帮助我们解决这个问题</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\bidir_lstm.png"></p><p>由于是双向LSTM，所以每个方向的LSTM都会有一个输出，最终的输出会有2部分，所以往往需要concat的操作</p><h3 id="2-4-循环神经网络实现文本情感分类"><a href="#2-4-循环神经网络实现文本情感分类" class="headerlink" title="2.4 循环神经网络实现文本情感分类"></a>2.4 循环神经网络实现文本情感分类</h3><h4 id="1-Pytorch中LSTM和GRU模块使用"><a href="#1-Pytorch中LSTM和GRU模块使用" class="headerlink" title="1. Pytorch中LSTM和GRU模块使用"></a>1. Pytorch中LSTM和GRU模块使用</h4><h5 id="1-1-LSTM介绍"><a href="#1-1-LSTM介绍" class="headerlink" title="1.1 LSTM介绍"></a>1.1 LSTM介绍</h5><p>LSTM和GRU都是由<code>torch.nn</code>提供</p><p>通过观察文档，可知LSMT的参数，</p><p><code>torch.nn.LSTM(input_size,hidden_size,num_layers,batch_first,dropout,bidirectional)</code></p><ol><li><code>input_size </code>：输入数据的形状，即embedding_dim</li><li><code>hidden_size</code>：隐藏层神经元的数量，即每一层有多少个LSTM单元</li><li><code>num_layer</code> ：即RNN的中LSTM单元的层数</li><li><code>batch_first</code>：默认值为False，输入的数据需要<code>[seq_len,batch,feature]</code>,如果为True，则为<code>[batch,seq_len,feature]</code></li><li><code>dropout</code>:dropout的比例，默认值为0。dropout是一种训练过程中让部分参数随机失活的一种方式，能够提高训练速度，同时能够解决过拟合的问题。这里是在LSTM的最后一层，对每个输出进行dropout</li><li><code>bidirectional</code>：是否使用双向LSTM,默认是False</li></ol><p>实例化LSTM对象之后,<strong>不仅需要传入数据，还需要前一次的h_0(前一次的隐藏状态)和c_0（前一次memory）</strong></p><p>即：<code>lstm(input,(h_0,c_0))</code></p><p>LSTM的默认输出为<code>output, (h_n, c_n)</code></p><ol><li><code>output</code>：<code>(seq_len, batch, num_directions * hidden_size)</code>—&gt;batch_first=False</li><li><code>h_n</code>:<code>(num_layers * num_directions, batch, hidden_size)</code></li><li><code>c_n</code>: <code>(num_layers * num_directions, batch, hidden_size)</code></li></ol><h5 id="1-2-LSTM使用示例"><a href="#1-2-LSTM使用示例" class="headerlink" title="1.2 LSTM使用示例"></a>1.2 LSTM使用示例</h5><p>假设数据输入为 input ,形状是<code>[10,20]</code>，假设embedding的形状是<code>[100,30]</code></p><p>则LSTM使用示例如下：</p><pre class="line-numbers language-python"><code class="language-python">batch_size <span class="token operator">=</span><span class="token number">10</span>seq_len <span class="token operator">=</span> <span class="token number">20</span>embedding_dim <span class="token operator">=</span> <span class="token number">30</span>word_vocab <span class="token operator">=</span> <span class="token number">100</span>hidden_size <span class="token operator">=</span> <span class="token number">18</span>num_layer <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">#准备输入数据</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>seq_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#准备embedding</span>embedding  <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>word_vocab<span class="token punctuation">,</span>embedding_dim<span class="token punctuation">)</span>lstm <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>embedding_dim<span class="token punctuation">,</span>hidden_size<span class="token punctuation">,</span>num_layer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#进行mebed操作</span>embed <span class="token operator">=</span> embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[10,20,30]</span><span class="token comment" spellcheck="true">#转化数据为batch_first=False</span>embed <span class="token operator">=</span> embed<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[20,10,30]</span><span class="token comment" spellcheck="true">#初始化状态， 如果不初始化，torch默认初始值为全0</span>h_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>num_layer<span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span>c_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>num_layer<span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span>output<span class="token punctuation">,</span><span class="token punctuation">(</span>h_1<span class="token punctuation">,</span>c_1<span class="token punctuation">)</span> <span class="token operator">=</span> lstm<span class="token punctuation">(</span>embed<span class="token punctuation">,</span><span class="token punctuation">(</span>h_0<span class="token punctuation">,</span>c_0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#output [20,10,1*18]</span><span class="token comment" spellcheck="true">#h_1 [2,10,18]</span><span class="token comment" spellcheck="true">#c_1 [2,10,18]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> output<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> h_1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c_1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过前面的学习，我们知道，最后一次的h_1应该和output的最后一个time step的输出是一样的</p><p>通过下面的代码，我们来验证一下：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">==</span> bOut<span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3-GRU的使用示例"><a href="#1-3-GRU的使用示例" class="headerlink" title="1.3 GRU的使用示例"></a>1.3 GRU的使用示例</h5><p>GRU模块<code>torch.nn.GRU</code>，和LSTM的参数相同，含义相同，具体可参考文档</p><p>但是输入只剩下<code>gru(input,h_0)</code>，输出为<code>output, h_n</code></p><p>其形状为：</p><ol><li><code>output</code>:<code>(seq_len, batch, num_directions * hidden_size)</code></li><li><code>h_n</code>:<code>(num_layers * num_directions, batch, hidden_size)</code></li></ol><p>大家可以使用上述代码，观察GRU的输出形式</p><h5 id="1-4-双向LSTM"><a href="#1-4-双向LSTM" class="headerlink" title="1.4 双向LSTM"></a>1.4 双向LSTM</h5><p>如果需要使用双向LSTM，则在实例化LSTM的过程中，需要把LSTM中的bidriectional设置为True，同时h_0和c_0使用num_layer*2</p><p>观察效果，输出为</p><pre class="line-numbers language-python"><code class="language-python">batch_size <span class="token operator">=</span><span class="token number">10</span> <span class="token comment" spellcheck="true">#句子的数量</span>seq_len <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment" spellcheck="true">#每个句子的长度</span>embedding_dim <span class="token operator">=</span> <span class="token number">30</span>  <span class="token comment" spellcheck="true">#每个词语使用多长的向量表示</span>word_vocab <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment" spellcheck="true">#词典中词语的总数</span>hidden_size <span class="token operator">=</span> <span class="token number">18</span>  <span class="token comment" spellcheck="true">#隐层中lstm的个数</span>num_layer <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true">#多少个隐藏层</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>seq_len<span class="token punctuation">)</span><span class="token punctuation">)</span>embedding  <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>word_vocab<span class="token punctuation">,</span>embedding_dim<span class="token punctuation">)</span>lstm <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>embedding_dim<span class="token punctuation">,</span>hidden_size<span class="token punctuation">,</span>num_layer<span class="token punctuation">,</span>bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>embed <span class="token operator">=</span> embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[10,20,30]</span><span class="token comment" spellcheck="true">#转化数据为batch_first=False</span>embed <span class="token operator">=</span> embed<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[20,10,30]</span>h_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>num_layer<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span>c_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>num_layer<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span>output<span class="token punctuation">,</span><span class="token punctuation">(</span>h_1<span class="token punctuation">,</span>c_1<span class="token punctuation">)</span> <span class="token operator">=</span> lstm<span class="token punctuation">(</span>embed<span class="token punctuation">,</span><span class="token punctuation">(</span>h_0<span class="token punctuation">,</span>c_0<span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> output<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> h_1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c_1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在单向LSTM中，最后一个time step的输出的前hidden_size个和最后一层隐藏状态h_1的输出相同，那么双向LSTM呢？</p><p>双向LSTM中：</p><p><strong>output：按照正反计算的结果顺序在第2个维度进行拼接，正向第一个拼接反向的最后一个输出</strong></p><p><strong>hidden state:按照得到的结果在第0个维度进行拼接，正向第一个之后接着是反向第一个</strong></p><ol><li><p>前向的LSTM中，最后一个time step的输出的前hidden_size个和最后一层向前传播h_1的输出相同</p><ul><li><p>示例：</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-1是前向LSTM的最后一个，前18是前hidden_size个</span>In <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#前项LSTM中最后一个time step的output</span>In <span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> h_1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#倒数第二个为前向</span>In <span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">==</span> bOut<span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ol start="2"><li><p>后向LSTM中，最后一个time step的输出的后hidden_size个和最后一层后向传播的h_1的输出相同</p><ul><li><p>示例</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#0 是反向LSTM的最后一个，后18是后hidden_size个</span>In <span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c <span class="token operator">=</span> output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#后向LSTM中的最后一个输出</span>In <span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d <span class="token operator">=</span> h_1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#后向LSTM中的最后一个隐藏层状态</span>In <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c <span class="token operator">==</span> dOut<span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h5 id="1-4-LSTM和GRU的使用注意点"><a href="#1-4-LSTM和GRU的使用注意点" class="headerlink" title="1.4 LSTM和GRU的使用注意点"></a>1.4 LSTM和GRU的使用注意点</h5><ol><li>第一次调用之前，需要初始化隐藏状态，如果不初始化，默认创建全为0的隐藏状态</li><li>往往会使用LSTM or GRU 的输出的最后一维的结果，来代表LSTM、GRU对文本处理的结果，其形状为<code>[batch,  num_directions*hidden_size]</code>。<ol><li>并不是所有模型都会使用最后一维的结果</li><li>如果实例化LSTM的过程中，batch_first=False,则<code>output[-1] or output[-1,:,:]</code>可以获取最后一维</li><li>如果实例化LSTM的过程中，batch_first=True,则<code>output[:,-1,:]</code>可以获取最后一维</li></ol></li><li>如果结果是<code>(seq_len, batch_size, num_directions * hidden_size)</code>,需要把它转化为<code>(batch_size,seq_len, num_directions * hidden_size)</code>的形状，不能够不是view等变形的方法，需要使用<code>output.permute(1,0,2)</code>，即交换0和1轴，实现上述效果</li><li>使用双向LSTM的时候，往往会分别使用每个方向最后一次的output，作为当前数据经过双向LSTM的结果<ul><li>即：<code>torch.cat([h_1[-2,:,:],h_1[-1,:,:]],dim=-1)</code></li><li>最后的表示的size是<code>[batch_size,hidden_size*2]</code></li></ul></li><li>上述内容在GRU中同理</li></ol><h4 id="2-使用LSTM完成文本情感分类"><a href="#2-使用LSTM完成文本情感分类" class="headerlink" title="2. 使用LSTM完成文本情感分类"></a>2. 使用LSTM完成文本情感分类</h4><p>在前面，我们使用了word embedding去实现了toy级别的文本情感分类，那么现在我们在这个模型中添加上LSTM层，观察分类效果。</p><p>为了达到更好的效果，对之前的模型做如下修改</p><ol><li>MAX_LEN = 200</li><li>构建dataset的过程，把数据转化为2分类的问题，pos为1，neg为0，否则25000个样本完成10个类别的划分数据量是不够的</li><li>在实例化LSTM的时候，使用dropout=0.5，在model.eval()的过程中，dropout自动会为0</li></ol><h5 id="2-1-修改模型"><a href="#2-1-修改模型" class="headerlink" title="2.1 修改模型"></a>2.1 修改模型</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IMDBLstmmodel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>IMDBLstmmodel<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> <span class="token number">64</span>        self<span class="token punctuation">.</span>embedding_dim <span class="token operator">=</span> <span class="token number">200</span>        self<span class="token punctuation">.</span>num_layer <span class="token operator">=</span> <span class="token number">2</span>        self<span class="token punctuation">.</span>bidriectional <span class="token operator">=</span> <span class="token boolean">True</span>        self<span class="token punctuation">.</span>bi_num <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>bidriectional <span class="token keyword">else</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> <span class="token number">0.5</span>        <span class="token comment" spellcheck="true">#以上部分为超参数，可以自行修改</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>embedding_dim<span class="token punctuation">,</span>padding_idx<span class="token operator">=</span>ws<span class="token punctuation">.</span>PAD<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[N,300]</span>        self<span class="token punctuation">.</span>lstm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding_dim<span class="token punctuation">,</span>self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span>self<span class="token punctuation">.</span>num_layer<span class="token punctuation">,</span>bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>dropout<span class="token operator">=</span>self<span class="token punctuation">.</span>dropout<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#使用两个全连接层，中间使用relu激活函数</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size<span class="token operator">*</span>self<span class="token punctuation">.</span>bi_num<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#进行轴交换</span>        h_0<span class="token punctuation">,</span>c_0 <span class="token operator">=</span> self<span class="token punctuation">.</span>init_hidden_state<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        _<span class="token punctuation">,</span><span class="token punctuation">(</span>h_n<span class="token punctuation">,</span>c_n<span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>lstm<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span>h_0<span class="token punctuation">,</span>c_0<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#只要最后一个lstm单元处理的结果，这里多去的hidden state</span>        out <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>h_n<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h_n<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init_hidden_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        h_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layer <span class="token operator">*</span> self<span class="token punctuation">.</span>bi_num<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        c_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layer <span class="token operator">*</span> self<span class="token punctuation">.</span>bi_num<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token keyword">return</span> h_0<span class="token punctuation">,</span>c_0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-完成训练和测试代码"><a href="#2-2-完成训练和测试代码" class="headerlink" title="2.2 完成训练和测试代码"></a>2.2 完成训练和测试代码</h5><p>为了提高程序的运行速度，可以考虑把模型放在gup上运行，那么此时需要处理一下几点：</p><ol><li><code>device = torch.device(&quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;)</code></li><li><code>model.to(device)</code></li><li>除了上述修改外，涉及计算的所有tensor都需要转化为CUDA的tensor<ol><li>初始化的<code>h_0,c_0</code></li><li>训练集和测试集的<code>input,traget</code></li></ol></li><li>在最后可以通过<code>tensor.cpu()</code>转化为torch的普通tensor</li></ol><pre class="line-numbers language-python"><code class="language-python">train_batch_size <span class="token operator">=</span> <span class="token number">64</span>test_batch_size <span class="token operator">=</span> <span class="token number">5000</span><span class="token comment" spellcheck="true"># imdb_model = IMDBModel(MAX_LEN) #基础model</span>imdb_model <span class="token operator">=</span> IMDBLstmmodel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#在gpu上运行，提高运行速度</span><span class="token comment" spellcheck="true"># imdb_model.load_state_dict(torch.load("model/mnist_net.pkl"))</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>imdb_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">True</span>    imdb_model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token punctuation">)</span>    train_dataloader <span class="token operator">=</span>get_dataloader<span class="token punctuation">(</span>mode<span class="token punctuation">,</span>train_batch_size<span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>input<span class="token punctuation">,</span>input_lenght<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        target <span class="token operator">=</span> target<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        input <span class="token operator">=</span> input<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> imdb_model<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#traget需要是[0,9]，不能是[1-10]</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> idx <span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>output<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            acc <span class="token operator">=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}\t ACC: {:.6f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> idx <span class="token operator">*</span> len<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> idx <span class="token operator">/</span> len<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>acc<span class="token punctuation">)</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>imdb_model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"model/mnist_net.pkl"</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'model/mnist_optimizer.pkl'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token boolean">False</span>    imdb_model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    test_dataloader <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>mode<span class="token punctuation">,</span> test_batch_size<span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> input<span class="token punctuation">,</span> input_lenght<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            input <span class="token operator">=</span> input<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            output <span class="token operator">=</span> imdb_model<span class="token punctuation">(</span>input<span class="token punctuation">)</span>            test_loss  <span class="token operator">=</span> F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">,</span>reduction<span class="token operator">=</span><span class="token string">"mean"</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>output<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>keepdim<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            correct <span class="token operator">=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>            acc <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'idx: {} Test set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>idx<span class="token punctuation">,</span>test_loss<span class="token punctuation">,</span> correct<span class="token punctuation">,</span> target<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>acc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-模型训练的最终输出"><a href="#2-3-模型训练的最终输出" class="headerlink" title="2.3 模型训练的最终输出"></a>2.3 模型训练的最终输出</h5><pre><code>...Train Epoch: 9 [20480/25000 (82%)]    Loss: 0.017165     ACC: 100.000000Train Epoch: 9 [21120/25000 (84%)]    Loss: 0.021572     ACC: 98.437500Train Epoch: 9 [21760/25000 (87%)]    Loss: 0.058546     ACC: 98.437500Train Epoch: 9 [22400/25000 (90%)]    Loss: 0.045248     ACC: 98.437500Train Epoch: 9 [23040/25000 (92%)]    Loss: 0.027622     ACC: 98.437500Train Epoch: 9 [23680/25000 (95%)]    Loss: 0.097722     ACC: 95.312500Train Epoch: 9 [24320/25000 (97%)]    Loss: 0.026713     ACC: 98.437500Train Epoch: 9 [15600/25000 (100%)]    Loss: 0.006082     ACC: 100.000000idx: 0 Test set: Avg. loss: 0.8794, Accuracy: 4053/5000 (81.06%)idx: 1 Test set: Avg. loss: 0.8791, Accuracy: 4018/5000 (80.36%)idx: 2 Test set: Avg. loss: 0.8250, Accuracy: 4087/5000 (81.74%)idx: 3 Test set: Avg. loss: 0.8380, Accuracy: 4074/5000 (81.48%)idx: 4 Test set: Avg. loss: 0.8696, Accuracy: 4027/5000 (80.54%)</code></pre><p>可以看到模型的测试准确率稳定在81%左右。</p><p>大家可以把上述代码改为GRU，或者多层LSTM继续尝试，观察效果</p><h3 id="2-5-Pytorch中的序列化容器"><a href="#2-5-Pytorch中的序列化容器" class="headerlink" title="2.5 Pytorch中的序列化容器"></a>2.5 Pytorch中的序列化容器</h3><h4 id="1-梯度消失和梯度爆炸"><a href="#1-梯度消失和梯度爆炸" class="headerlink" title="1. 梯度消失和梯度爆炸"></a>1. 梯度消失和梯度爆炸</h4><p>在使用pytorch中的序列化 容器之前，我们先来了解一下常见的梯度消失和梯度爆炸的问题</p><h5 id="1-1-梯度消失"><a href="#1-1-梯度消失" class="headerlink" title="1.1 梯度消失"></a>1.1 梯度消失</h5><p>假设我们有四层极简神经网络：每层只有一个神经元</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\梯度消失.png"></p><p>$获取w1的梯度有：▽w1 = x1<em>f(a1)’</em>w2<em>f(b1)’</em>w3*▽out$</p><p>假设我们使用sigmoid激活函数，即f为sigmoid函数，sigmoid的导数如下图</p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\sigmoid导数.png"></p><p>假设每层都取得sigmoid导函数的最大值1/4，那么在反向传播时，$X1=0.5,w1=w2=w3=0.5$</p><p>$\nabla w1&lt; \frac{1}{2} * \frac{1}{4}* \frac{1}{2}* \frac{1}{4}*\frac{1}{2}*\nabla out = \frac{1}{2^7} \nabla out$ </p><p>当权重初始过小或使用<code>易饱和神经元(sigmoid,tanh，) sigmoid在y=0,1处梯度接近0，而无法更新参数</code>，时神经网络在反向传播时也会呈现指数倍缩小，产生“消失”现象。</p><h5 id="1-2-梯度爆炸"><a href="#1-2-梯度爆炸" class="headerlink" title="1.2 梯度爆炸"></a>1.2 梯度爆炸</h5><p>假设$X2=2,w1=w2=w3=2$</p><p>$\nabla w1 = f’{a}<em>2</em>f‘{a}*x2\nabla out = 2^3f’(a)^2 \nabla out $</p><p> 当权重初始过大时，梯度神经网络在反向传播时也会呈现指数倍放大，产生“爆炸”现象。</p><h5 id="1-3-解决梯度消失或者梯度爆炸的经验"><a href="#1-3-解决梯度消失或者梯度爆炸的经验" class="headerlink" title="1.3 解决梯度消失或者梯度爆炸的经验"></a>1.3 解决梯度消失或者梯度爆炸的经验</h5><ol><li><p><strong>替换易训练神经元</strong></p><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\替换激活函数.png"></p></li><li><p><strong>改进梯度优化算法：</strong>使用adam等算法</p></li><li><p><strong>使用batch normalization</strong></p></li></ol><h4 id="2-nn-Sequential"><a href="#2-nn-Sequential" class="headerlink" title="2. nn.Sequential"></a>2. <code>nn.Sequential</code></h4><p><code>nn.Sequential</code>是一个有序的容器，其中传入的是构造器类(各种用来处理input的类)，最终input会被Sequential中的构造器类依次执行</p><p>例如：</p><pre class="line-numbers language-python"><code class="language-python">layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> n_hidden_1<span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>， <span class="token comment" spellcheck="true">#inplace=False 是否对输入进行就地修改，默认为False</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">,</span> n_hidden_2<span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最后一层不需要添加激活函数</span>             <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述就够中，可以直接调用layer(x)，得到输出</p><p>x的被执行顺序就是Sequential中定义的顺序：</p><ol><li>被隐层1执行，形状变为[batch_size,n_hidden_1]</li><li>被relu执行，形状不变</li><li>被隐层2执行，形状变为[batch_size,n_hidden_2]</li><li>被relu执行，形状不变</li><li>被最后一层执行，形状变为[batch_size,output_dim]</li></ol><h4 id="3-nn-BatchNorm1d"><a href="#3-nn-BatchNorm1d" class="headerlink" title="3. nn.BatchNorm1d"></a>3. <code>nn.BatchNorm1d</code></h4><p><code>batch normalization</code>  翻译成中文就是批规范化，即在每个batch训练的过程中，对参数进行归一化的处理，从而达到加快训练速度的效果。</p><p>以sigmoid激活函数为例，他在反向传播的过程中，在值为0,1的时候，梯度接近0，导致参数被更新的幅度很小，训练速度慢。但是如果对数据进行归一化之后，就会尽可能的把数据拉倒[0-1]的范围，从而让参数更新的幅度变大，提高训练的速度。</p><p>batchNorm一般会放到激活函数之后，即对输入进行激活处理之后再进入batchNorm</p><pre class="line-numbers language-python"><code class="language-python">layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> n_hidden_1<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，             nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">)</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">,</span> n_hidden_2<span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">)</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span>              <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-nn-Dropout"><a href="#4-nn-Dropout" class="headerlink" title="4. nn.Dropout"></a>4. <code>nn.Dropout</code></h4><p>dropout在前面已经介绍过，可以理解为对参数的随机失活</p><ol><li>增加模型的稳健性</li><li>可以解决过拟合的问题（增加模型的泛化能力）</li><li>可以理解为训练后的模型是多个模型的组合之后的结果，类似随机森林。</li></ol><pre class="line-numbers language-python"><code class="language-python">layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> n_hidden_1<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，             nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">)</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0.3 为dropout的比例，默认值为0.5</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_1<span class="token punctuation">,</span> n_hidden_2<span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>，            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">)</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden_2<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span>              <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h1><h3 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h3><p>fasttext文本分类</p><h3 id="闲聊机器人"><a href="#闲聊机器人" class="headerlink" title="闲聊机器人"></a>闲聊机器人</h3><h3 id="QA机器人"><a href="#QA机器人" class="headerlink" title="QA机器人"></a>QA机器人</h3><h4 id="问答机器人介绍"><a href="#问答机器人介绍" class="headerlink" title="问答机器人介绍"></a>问答机器人介绍</h4><h5 id="1-问答机器人"><a href="#1-问答机器人" class="headerlink" title="1. 问答机器人"></a>1. 问答机器人</h5><p>在前面的课程中，我们已经对问答机器人介绍过，这里的问答机器人是我们在分类之后，对特定问题进行回答的一种机器人。至于回答的问题的类型，取决于我们的语料。</p><p>当前我们需要实现的问答机器人是一个回答编程语言（比如<code>python是什么</code>，<code>python难么</code>等）相关问题的机器人</p><h5 id="2-问答机器人的实现逻辑"><a href="#2-问答机器人的实现逻辑" class="headerlink" title="2. 问答机器人的实现逻辑"></a>2. 问答机器人的实现逻辑</h5><p>主要实现逻辑：从现有的问答对中，选择出和问题最相似的问题，并且获取其相似度（一个数值），如果相似度大于阈值，则返回这个最相似的问题对应的答案</p><p>问答机器人的实现可以大致分为三步步骤：</p><ol><li>对问题的处理</li><li>对答案进行的机器学习召回</li><li>对召回的结果进行排序</li></ol><h5 id="2-1-对问题的处理"><a href="#2-1-对问题的处理" class="headerlink" title="2.1 对问题的处理"></a>2.1 对问题的处理</h5><p>对问题的处理过程中，我们可以考虑以下问题：</p><ol><li>对问题进行基础的清洗，去除特殊符号等</li><li>问题主语的识别，判断问题中是否包含特定的主语，比如<code>python</code>等，提取出来之后，方便后续对问题进行过滤。<ul><li>可以看出，不仅需要对用户输入的问题进行处理，获取主语，还需要对现有问答对进行处理</li></ul></li><li>获取问题的词向量，可以考虑使用词频，tdidf等值，方便召回的时候使用</li></ol><h5 id="2-2-问题的召回"><a href="#2-2-问题的召回" class="headerlink" title="2.2 问题的召回"></a>2.2 问题的召回</h5><p>召回：可以理解为是一个海选的操作，就是从现有的问答对中选择可能相似的前K个问题。</p><p>为什么要进行召回?</p><blockquote><p>主要目的是为了后续进行排序的时候，减少需要计算的数据量，比如有10万个问答对，直接通过深度学习肯定是可以获取所有的相似度，但是速度慢。</p><p>所以考虑使用机器学习的方法进行一次海选</p></blockquote><p>那么，如何实现召回呢？</p><blockquote><p>前面我们介绍，召回就是选择前K个最相似的问题，所以召回的实现就是想办法通过机器学习的手段计算器相似度。</p></blockquote><p>可以思考的方法：</p><ol><li>使用词袋模型，获取词频矩阵，计算相似度</li><li>使用tfidf，获取tdidf的矩阵，计算相似度</li></ol><p>上述的方法理论上都可行，知识当候选计算的词语数量太多的时候，需要挨个计算相似度，非常耗时。</p><p>所以可以考虑以下两点：</p><ol><li>通过前面获取的主语，对问题进行过滤</li><li>使用聚类的方法，对数据先聚类，再计算某几个类别中的相似度，而不用去计算全部。</li></ol><p>但是还有一个问题，供大家慢慢思考：</p><blockquote><p>不管是词频，还是tdidf，获取的结果肯定是没有考虑文字顺序的，效果不一定是最好的，那么此时，应该如何让最后召回的效果更好呢？</p></blockquote><h5 id="2-3-问题的排序"><a href="#2-3-问题的排序" class="headerlink" title="2.3 问题的排序"></a>2.3 问题的排序</h5><p>排序过程，使用了召回的结果作为输入，同时输出的是最相似的那一个。</p><p>整个过程使用深度学习实现。深度学习虽然训练的速度慢，但是整体效果肯定比机器学习好（机器学习受限于特征工程，数据量等因素，没有办法深入的学会不同问题之间的内在相似度），所以通过自建的模型，获取最后的相似度。</p><p>使用深度学习的模型这样一个黑匣子，在训练数据足够多的时候，能够学习到用户的各种不同输入的问题，当我们把目标值（相似的问题）给定的情况下，让模型自己去找到这些训练数据目标值和特征值之间相似的表示方法。</p><p>那么此时，有以下两个问题：</p><ol><li><p>使用什么数据，来训练模型，最后返回模型的相似度</p><blockquote><p>训练的数据的来源：可以考虑根据现有的问答对去手动构造，但是构造的数据不一定能够覆盖后续用户提问的全部问题。所以可以考虑通过程序去采集网站上相似的问题，比如百度知道的搜索结果。</p></blockquote></li><li><p>模型该如何构建</p><blockquote><p>模型可以有两个输入，输出为一个数值，两个输入的处理方法肯定是一样的。这种网络结构我们经常把它称作孪生神经网络。</p></blockquote><p>很明显，我们队输入的数据需要进行编码的操作，比如word embedding + LSTM/GRU/BIGRU等</p><p>两个编码之后的结果，我们可以进行组合，然后通过一个多层的神经网络，输出一个数字，把这个数值定义为我们的相似度。</p><p>当然我们的深层的神经网络在最开始的时候也并不是计算的相似度，但是我们的训练数据的目标值是相似度，在N多次的训练之后，确定了输入和输出的表示方法之后，那么最后的模型输出就是相似度了。</p></li></ol><p>前面我们介绍了问答机器人的实现的大致思路，那么接下来，我们就来一步步的实现它</p><h1 id="深度学习进阶"><a href="#深度学习进阶" class="headerlink" title="深度学习进阶"></a>深度学习进阶</h1><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><h4 id="1-Transformer-直观认识"><a href="#1-Transformer-直观认识" class="headerlink" title="1. Transformer 直观认识"></a>1. Transformer 直观认识</h4><p>Transformer 和 LSTM 的最大区别，就是 LSTM 的训练是迭代的、串行的，必须要等当前字处理完，才可以处理下一个字。而 Transformer 的训练时并行的，即所有<strong>字</strong>是同时训练的，这样就大大增加了计算效率。Transformer 使用了位置嵌入 (Positional Encoding) 来理解语言的顺序，使用自注意力机制（Self Attention Mechanism）和全连接层进行计算，这些后面会讲到</p><p>Transformer 模型主要分为两大部分，分别是 <strong>Encoder</strong> 和 <strong>Decoder</strong>。<strong>Encoder</strong> 负责把输入（语言序列）隐射成<strong>隐藏层</strong>（下图中第 2 步用九宫格代表的部分），然后解码器再把隐藏层映射为自然语言序列。例如下图机器翻译的例子（Decoder 输出的时候，是通过 N 层 Decoder Layer 才输出一个 token，并不是通过一层 Decoder Layer 就输出一个 token）</p><p><img src="https://gitee.com/lastlight/MyPictrue/raw/master/img/Transformer.png"></p><h4 id="2-Positional-Encoding"><a href="#2-Positional-Encoding" class="headerlink" title="2. Positional Encoding"></a>2. Positional Encoding</h4><p>由于 Transformer 模型<strong>没有</strong>循环神经网络的迭代操作，所以我们必须提供每个字的位置信息给 Transformer，这样它才能识别出语言中的顺序关系</p><p>现在定义一个<strong>位置嵌入</strong>的概念，也就是 Positional Encoding，位置嵌入的维度为 <code>[max_sequence_length, embedding_dimension]</code>, 位置嵌入的维度与词向量的维度是相同的，都是 <code>embedding_dimension</code>。<code>max_sequence_length</code> 属于超参数，指的是限定每个句子最长由多少个词构成</p><p>注意，我们一般以<strong>字</strong>为单位训练 Transformer 模型。首先初始化字编码的大小为 <code>[vocab_size, embedding_dimension]</code>，<code>vocab_size</code> 为字库中所有字的数量，<code>embedding_dimension</code> 为字向量的维度，对应到 PyTorch 中，其实就是 <code>nn.Embedding(vocab_size, embedding_dimension)</code></p><p>论文中使用了 sin 和 cos 函数的线性变换来提供给模型位置信息:<br>$$<br>PE(pos,2i) = sin(pos/100002i/dmodel)<br>PE(pos,2i+1)=cos(pos/100002i/dmodel)<br>$$</p><p>上式中 pos 指的是一句话中某个字的位置，取值范围是 [0, max_sequence_length)，i 指的是字向量的维度序号，取值范围是 [0, embedding_dimension/2)，dmodel 指的是 embedding_dimension 的值</p><p>上面有 sin 和 cos 一组公式，也就是对应着 embedding dimension 维度的一组奇数和偶数的序号的维度，例如 0,1 一组，2,3 一组，分别用上面的 sin 和 cos 函数做处理，从而产生不同的周期性变化，而位置嵌入在 embedding dimension 维度上随着维度序号增大，周期变化会越来越慢，最终产生一种包含位置信息的纹理，就像论文原文中第六页讲的，位置嵌入函数的周期从 2π 到 10000∗2π 变化，而每一个位置在 embedding dimension 维度上都会得到不同周期的 sin 和 cos 函数的取值组合，从而产生独一的纹理位置信息，最终使得模型学到位置之间的依赖关系和自然语言的时序特性</p><p>如果不理解这里为何这么设计，可以看这篇文章 <a href="https://wmathor.com/index.php/archives/1453/">Transformer 中的 Positional Encoding</a></p><p>下面画一下位置嵌入，纵向观察，可见随着 embedding dimension 序号增大，位置嵌入函数的周期变化越来越平缓</p><h4 id="3-Self-Attention-Mechanism"><a href="#3-Self-Attention-Mechanism" class="headerlink" title="3. Self Attention Mechanism"></a>3. Self Attention Mechanism</h4><p><img src="D:\Git-repo\hexo\source_posts\deeplearning-basic\image-20210202175624692.png"></p><h4 id="4-残差连接和-Layer-Normalization"><a href="#4-残差连接和-Layer-Normalization" class="headerlink" title="4. 残差连接和 Layer Normalization"></a>4. 残差连接和 Layer Normalization</h4><h4 id="5-Transformer-Encoder-整体结构"><a href="#5-Transformer-Encoder-整体结构" class="headerlink" title="5. Transformer Encoder 整体结构"></a>5. Transformer Encoder 整体结构</h4><h4 id="6-Transformer-Decoder-整体结构"><a href="#6-Transformer-Decoder-整体结构" class="headerlink" title="6. Transformer Decoder 整体结构"></a>6. Transformer Decoder 整体结构</h4><p>总结</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式简介</title>
      <link href="2020/09/25/design-patterns/"/>
      <url>2020/09/25/design-patterns/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1. 单例模式"></a>1. 单例模式</h2><p>属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p>单例模式的几种实现方式</p><h3 id="1-懒汉式，线程不安全"><a href="#1-懒汉式，线程不安全" class="headerlink" title="1.懒汉式，线程不安全"></a>1.懒汉式，线程不安全</h3><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>否<br><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。<br>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>          <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造器私有        </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> instance<span class="token punctuation">;</span>          <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异</strong></p><h3 id="2-懒汉式，线程安全"><a href="#2-懒汉式，线程安全" class="headerlink" title="2.懒汉式，线程安全"></a>2.懒汉式，线程安全</h3><p><strong>是否 azy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是效率很低，99% 情况下不需要同步。<br>优点：第一次调用才初始化，避免内存浪费。<br>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br>getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-饿汉式"><a href="#3-饿汉式" class="headerlink" title="3.饿汉式"></a>3.饿汉式</h3><p><strong>是否 Lazy 初始化：</strong>否<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式比较常用，<strong>但容易产生垃圾对象。</strong><br>优点：没有加锁，执行效率会提高。<br>缺点：类加载时就初始化，浪费内存。<br>它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-双检锁-双重校验锁"><a href="#4-双检锁-双重校验锁" class="headerlink" title="4.双检锁/双重校验锁"></a>4.双检锁/双重校验锁</h3><p>（DCL，即 double-checked locking）JDK 版本：<strong>JDK1.5 起</strong></p><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>较复杂</p><p><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加锁，锁当前对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不是原子性操作  </span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指令重排有可能导致对象未完成构造，所以加volatile</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-登记式-静态内部类"><a href="#5-登记式-静态内部类" class="headerlink" title="5.登记式/静态内部类"></a>5.登记式/静态内部类</h3><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>一般</p><p><strong>描述：</strong>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br>这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、枚举"><a href="#6、枚举" class="headerlink" title="6、枚举"></a>6、枚举</h3><p><strong>JDK 版本：</strong>JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong>否<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏。<br>不能通过 reflection attack 来调用私有构造方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{</span>      INSTANCE<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whateverMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="经验之谈："><a href="#经验之谈：" class="headerlink" title="经验之谈："></a><strong>经验之谈：</strong></h3><p>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。</p><p>只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。</p><p>如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p><h2 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2. 策略模式"></a>2. 策略模式</h2><p>在策略模式中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><p><strong>意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</strong><br><strong>主要解决：</strong>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。<br><strong>何时使用：</strong>一个系统有许多许多类，而区分它们的只是他们直接的行为。<br><strong>如何解决：</strong>将这些算法封装成一个一个的类，任意地替换。<br><strong>关键代码：</strong>实现同一个接口。</p><p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。<br><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p><p><strong>使用场景：</strong> 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><p><strong>注意事项：</strong>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个定义活动的 <em>Strategy</em> 接口和实现了 <em>Strategy</em> 接口的实体策略类。<em>Context</em> 是一个使用了某种策略的类。</p><p><em>StrategyPatternDemo</em>，我们的演示类使用 <em>Context</em> 和策略对象来演示 Context 在它所配置或使用的策略改变时的行为变化。</p><p><img src="strategy_pattern_uml_diagram.jpg" alt="策略模式的UML图"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议原理和实践</title>
      <link href="2020/09/23/http/"/>
      <url>2020/09/23/http/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议原理和实践"><a href="#HTTP协议原理和实践" class="headerlink" title="HTTP协议原理和实践"></a>HTTP协议原理和实践</h1><img src="http.png" alt="浏览器输入URL后HTTP请求返回的过程" style="zoom:120%;" /><p>​    </p><h2 id="1-HTTP协议基础"><a href="#1-HTTP协议基础" class="headerlink" title="1. HTTP协议基础"></a>1. HTTP协议基础</h2><h3 id="1-1-五层模型"><a href="#1-1-五层模型" class="headerlink" title="1.1 五层模型"></a>1.1 五层模型</h3><p><img src="331769-20181124200628267-282150559.png" alt="TCP/IP五层模型"></p><p><img src="705728-20160424234827195-1493107425.png"></p><ul><li><p>物理层：主要作用是定义物理设备如何传输数据</p></li><li><p>数据链路层：在通信的实体间建立数据链路连接</p></li><li><p>网络层：为数据在结点之间传输创建逻辑链路 </p></li></ul><p>​    </p><ul><li>传输层：向用户提供可靠的端到端（End-to-End）服务（传输层向高层屏蔽了下层数据通信的细节）</li><li>应用层：为应用软件提供了服务（屏蔽了网络传输相关细节）</li></ul><p>​    </p><p>&emsp;&emsp;HTTP 协议的传输过程就是通过协议栈逐层向下，每一层都添加本层的专有数据，层层打包，然后通过下层发送出去。接收数据是则是相反的操作，从下往上穿过协议栈，逐层拆包，每层去掉本层的专有头，上层就会拿到自己的数据。下层的传输过程对于上层是完全“透明”的，上层也不需要关心下层的具体实现细节。</p><p>​    </p><p>​    </p><h3 id="1-2-HTTP协议简介"><a href="#1-2-HTTP协议简介" class="headerlink" title="1.2 HTTP协议简介"></a>1.2 HTTP协议简介</h3><blockquote><p>HTTP是什么？</p><p>HTTP 是一个在计算机世界里专门在<strong>两点之间</strong>传输文字、图片、音频、视频等超文本数据的约定和规范</p></blockquote><p>​            </p><p>&emsp;&emsp;<strong>HTTP</strong>是 <code>Hyper Text Transfer Protocol</code> <strong>（超文本传输协议）</strong>的缩写。它的发展是万维网协会和Internet工作小组IETF合作的结果。它确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。</p><p>&emsp;&emsp;<strong>HTTP是一个应用层协议</strong>，由请求和响应构成，是一个标准的客户端服务器模型。</p><p>&emsp;&emsp;因为 <strong>HTTP</strong> 是一个协议，是一种计算机间通信的规范，所以它<strong>不存在“单独的实体”</strong>。它不是应用程序，也不是操作系统，更不是 Web 服务器。但 HTTP 又与应用程序、操作系统、Web 服务器密切相关，在它们之间的通信过程中存在，而且是一种“动态的存在”，是发生在网络连接、传输超文本数据时的一个“动态过程”。</p><p>&emsp;&emsp;在互联网世界里，<strong>HTTP 通常跑在 TCP/IP 协议栈之上</strong>，依靠 <code>IP 协议</code>实现寻址和路由、<code>TCP 协议</code>实现可靠数据传输、<code>DNS协议</code>实现域名查找、<code>SSL/TLS 协议</code>实现安全通信。此外，还有一些协议依赖于它，例如 <code>WebSocket</code>、<code>HTTPDNS</code> 等。这些协议相互交织，构成了一个协议网，而 <strong>HTTP</strong> 处于中心地位。</p><p>​        </p><blockquote><p>把这些综合起来，使用递归缩写方式，我们可以把 HTTP 定义为“<strong>与 HTTP 协议相关的所有应用层技术的总和</strong>”</p></blockquote><p>​    </p><p>​        </p><h3 id="1-3-HTTP协议发展历史"><a href="#1-3-HTTP协议发展历史" class="headerlink" title="1.3 HTTP协议发展历史"></a>1.3 HTTP协议发展历史</h3><h4 id="史前时期"><a href="#史前时期" class="headerlink" title="史前时期"></a>史前时期</h4><p>&emsp;&emsp;20 世纪 60 年代，美国国防部高等研究计划署建立了 <code>ARPA</code> 网，它有四个分布在各地的节点，被认为是如今互联网的“始祖”。最早的阿帕网还是非常简陋的，<strong>网络控制协议</strong><code>Network Control Protocol</code><strong>（NCP）</strong>是阿帕网中连接不同计算机的通信协议。</p><p>&emsp;&emsp;<strong>NCP</strong>诞生两年后，开发者温特·瑟夫和罗伯特·卡恩一起开发了一个阿帕网的下一代协议，并在 1974 年发表了以分组、序列化、流量控制、超时和容错等为核心的一种新型的网络互联协议，一举奠定了 <code>TCP/IP</code> 协议的基础。</p><p>&emsp;&emsp;由于具有良好的分层结构和稳定的性能，TCP/IP 协议迅速战胜其他竞争对手流行起来，并在 80 年代中期进入了 <code>UNIX</code> 系统内核，促使更多的计算机接入了互联网。</p><p>​    </p><blockquote><p>TCP/IP 的成功不是偶然的，而是综合了几个因素后的结果：</p><ol><li>TCP/IP 是免费或者是少量收费的，这样就扩大了使用人群</li><li>TCP/IP 搭上了 UNIX 这辆时代快车，很快推出了基于套接字（socket）的实际编程接口</li><li>TCP/IP 来源于实际需求，TCP/IP 解决了实际问题，并且在实际中不断完善</li></ol></blockquote><p>​    </p><h4 id="创世纪"><a href="#创世纪" class="headerlink" title="创世纪"></a>创世纪</h4><p>&emsp;&emsp;1989 年，任职于欧洲核子研究中心的<code>Tim Berners-Lee</code>发表了一篇论文，提出了在互联网上构建超链接文档系统的构想。这篇论文中他确立了三项关键技术。</p><ol><li><code>URI</code>：<code>Uniform Resource Identifier</code>即统一资源标识符，包括<code>URL</code>和<code>URN</code>，作为互联网上资源的唯一身份</li><li><code>HTML</code>：即超文本标记语言，描述超文本文档</li><li><code>HTTP</code>：即超文本传输协议，用来传输超文本</li></ol><p>&emsp;&emsp;基于它们，就可以把超文本系统完美地运行在互联网上，让各地的人们能够自由地共享信息，蒂姆把这个系统称为<code>World Wide Web</code>，也就是我们现在所熟知的 <code>Web</code></p><p>​    </p><h4 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h4><ul><li><p>只有一个命令GET</p></li><li><p>没有HEADER等描述数据的信息</p></li><li><p>服务器发送完毕，就关闭TCP连接</p></li></ul><p>​    </p><p>&emsp;&emsp;20 世纪 90 年代初期的互联网世界非常简陋，计算机处理能力低，存储容量小，网速很慢，还是一片“信息荒漠”。网络上绝大多数的资源都是纯文本，很多通信协议也都使用纯文本，所以 HTTP 的设计也不可避免地受到了时代的限制。</p><p>&emsp;&emsp;这一时期的 HTTP 被定义为 0.9 版，结构简单，为了便于服务器和客户端处理，它也采用了纯文本格式。蒂姆最初设想的系统里的文档都是只读的，所以只允许用<code>GET</code>动作从服务器上获取 HTML 文档，并且在响应请求之后立即关闭连接，功能非常有限。</p><p>&emsp;&emsp;HTTP/0.9 虽然很简单，但作为一个“原型”，充分验证了 Web 服务的可行性。</p><p>​    </p><h4 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h4><ul><li>增加了 HEAD、POST 等命令</li><li>增加了响应状态码 <code>Status code</code>，标记可能的错误原因</li><li>增加了 HTTP Header，让 HTTP 处理请求和响应更加灵活</li><li>引入了协议版本号概念</li><li>传输的数据不再仅限于文本</li></ul><p>​    </p><p>&emsp;&emsp;1993 年，美国国家超级计算应用中心开发出了 <strong>Mosaic</strong>，是第一个可以图文混排的浏览器，随后又在 1995 年开发出了服务器软件 <strong>Apache</strong>，简化了 HTTP 服务器的搭建工作。</p><p>&emsp;&emsp;同一时期，计算机多媒体技术也有了新的发展：1992 年发明了 <strong>JPEG</strong> 图像格式，1995 年发明了 <strong>MP3</strong> 音乐格式。</p><p>&emsp;&emsp;这些新软件新技术一经推出立刻就吸引了广大网民的热情，更的多的人开始使用互联网，研究 HTTP 并提出改进意见，甚至实验性地往协议里添加各种特性，从用户需求的角度促进了 HTTP 的发展。</p><p>&emsp;&emsp;在这些已有实践的基础上，经过一系列的草案，HTTP/1.0 版本在 1996 年正式发布。它在多方面增强了 0.9 版，形式上已经和我们现在的 HTTP 差别不大。</p><blockquote><p>但是HTTP/1.0 并不是一个“标准”，只是记录已有实践和模式的一份参考文档，不具有实际的约束力，相当于一个“备忘录”。</p></blockquote><p>​    </p><h4 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h4><ul><li>明确了连接管理，允许持久连接</li><li>增加了 PUT、DELETE 等新命令</li><li>增加了缓存管理和控制</li><li>允许响应数据分块<strong>（chunked）</strong>，利于传输大文件</li><li>增加 Host ，让互联网主机托管成为可能</li></ul><p>​    </p><p>&emsp;&emsp;1995 年，网景的 Netscape Navigator 和微软的 Internet Explorer 开始了著名的“浏览器大战”，都希望在互联网上占据主导地位。最终微软的 IE 取得了胜利。不可否认的是，它再一次极大地推动了 Web 的发展，HTTP/1.0 也在这个过程中经受了实践检验。</p><p>&emsp;&emsp;在“浏览器大战”结束之后的 1999 年，<strong>HTTP/1.1 发布了 RFC 文档，编号为 2616</strong>，正式确立了延续十余年的传奇。HTTP/1.1 是对 HTTP/1.0 的小幅度修正。但一个重要的区别是：它是一个“正式的标准”。这意味着今后互联网上所有的浏览器、服务器、网关、代理等等，只要用到 HTTP 协议，就必须严格遵守这个标准。HTTP/1.1 开启了后续的“Web 1.0”“Web 2.0”时代。</p><p>&emsp;&emsp;由于 HTTP/1.1 太过庞大和复杂，所以在 2014 年又做了一次修订，原来的一个大文档被拆分成了六份较小的文档，编号为 7230-7235，优化了一些细节，但此外没有任何实质性的改动。</p><p>​    </p><h4 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h4><ul><li><p>所有数据以二进制传输，不再是纯文本</p></li><li><p>头信息压缩以及推送等提高效率的功能</p></li><li><p>可发起多个请求，废弃了 1.1 里的管道</p></li><li><p>增强了安全性</p></li></ul><p>​    </p><p>&emsp;&emsp;Google 开发了自己的浏览器 Chrome，然后推出了新的 <code>SPDY 协议</code>，并在 Chrome 里应用于自家的服务器，开启了第二次的“浏览器大战”。这次的胜利者是 Google，Chrome 目前的全球的占有率超过了 60%。Google 借此顺势把 <code>SPDY</code> 推上了标准的宝座，互联网标准化组织以 <code>SPDY</code> 为基础开始制定新版本的 HTTP 协议，最终<strong>在 2015 年发布了 HTTP/2，RFC 编号 7540</strong></p><p>​    </p><blockquote><p>HTTP2的优势：</p><ol><li><p>信道复用</p></li><li><p>分帧传输：传输数据不需要连续的发送，可以分成不同的帧进行发送</p></li><li><p>Server Push：使服务端可以主动的向客户端发送内容</p></li></ol></blockquote><p>​    </p><h4 id="HTTP-3"><a href="#HTTP-3" class="headerlink" title="HTTP/3"></a>HTTP/3</h4><p>&emsp;&emsp;在 HTTP/2 还处于草案之时，Google 又发明了一个新的协议 <code>QUIC</code>，依托其的庞大用户量和数据量，持续地推动 <code>QUIC 协议</code>成为互联网上的“既成事实”。</p><p>&emsp;&emsp;2018 年，互联网标准化组织 IETF 提议将“HTTP over QUIC”更名为“HTTP/3”并获得批准，HTTP/3 正式进入了标准化制订阶段，也许两三年后就会正式发布，到时候我们很可能会跳过 HTTP/2 直接进入 HTTP/3。</p><p>​    </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>HTTP 协议始于三十年前蒂姆·伯纳斯 - 李的一篇论文</li><li>HTTP/0.9 是个简单的文本协议，只能获取文本资源</li><li>HTTP/1.0 确立了大部分现在使用的技术，但它不是正式标准</li><li>HTTP/1.1 是目前互联网上使用最广泛的协议，功能也非常完善</li><li>HTTP/2 基于 Google 的 SPDY 协议，注重性能改善，但还未普及</li><li>HTTP/3 基于 Google 的 QUIC 协议，是将来的发展方向</li></ol><p>​    </p><p>​    </p><h3 id="1-4-HTTP报文格式"><a href="#1-4-HTTP报文格式" class="headerlink" title="1.4 HTTP报文格式"></a>1.4 HTTP报文格式</h3><img src="image-20210207223800223.png" alt="HTTP协议格式" style="zoom: 67%;" /><p>请求报文</p><ul><li><p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范</p></li><li><p>规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体</p></li></ul><p>HTTP方法：</p><ul><li>用来定义对于资源的操作</li><li>常用的有GET、POST、PUT、DELETE等</li><li>从定义上讲有各自的语义</li></ul><p>HTTP CODE：</p><ul><li><p>定义服务器对请求的处理结果</p></li><li><p>各个区间的CODE有各自的语义</p></li><li><p>好的HTTP服务可以通过CODE判断结果</p></li></ul><p>​    </p><p>​    </p><p>​    </p><h3 id="1-5-一个简单web服务"><a href="#1-5-一个简单web服务" class="headerlink" title="1.5 一个简单web服务"></a>1.5 一个简单web服务</h3><p>创建一个基于node.js的简单的Web服务，然后在浏览器输出localhost:8000就可以得到返回值了</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8000'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="image-20210122212153947.png" alt="启动web服务" style="zoom: 90%;" /><img src="image-20210122212317288.png" alt="成功加载" style="zoom: 80%;" /><p>​    </p><p>​    </p><p>​    </p><h2 id="2-HTTP的特性"><a href="#2-HTTP的特性" class="headerlink" title="2. HTTP的特性"></a>2. HTTP的特性</h2><h3 id="2-1-HTTP客户端"><a href="#2-1-HTTP客户端" class="headerlink" title="2.1 HTTP客户端"></a>2.1 HTTP客户端</h3><p>浏览器：浏览器地址输入baidu.com，就会返回响应内容。General就是http的首行，它并不属于http报文，它不仅返回内容，还处理了返回内容，如Response</p><img src="331769-20181129064014294-1238237602.png" alt="Google浏览器" style="zoom: 50%;" /><img src="浏览器发起 HTTP 请求的典型场景.png" alt="浏览器发起 HTTP 请求的典型场景" style="zoom:60%;" /><p>​        curl：直接请求baidu.com，返回如下，而浏览器会去识别这个标签，然后重定向到<a href="http://www.baidu.com/">www.baidu.com</a></p><img src="image-20210122215211846.png" alt="curl工具"  /><p><img src="image-20210122220156659.png"></p><p>​    </p><h3 id="2-2-CORS-跨域请求"><a href="#2-2-CORS-跨域请求" class="headerlink" title="2.2 CORS 跨域请求"></a>2.2 CORS 跨域请求</h3><h4 id="2-2-1-同域限制"><a href="#2-2-1-同域限制" class="headerlink" title="2.2.1 同域限制"></a>2.2.1 同域限制</h4><p><code>server1.js</code>：8880端口服务，返回<code>test.html</code>页面</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8880</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8880'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>test.html</code>：向8887端口服务发起一个跨域的请求</p><blockquote><p>&emsp;&emsp;跨域资源共享<strong>CORS</strong> 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin （domain）上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//XMLHttpRequest和Fetch API遵循同源策略,这意味着使用这些API的Web应用只能从同一个域请求HTTP资源，除非使用CORS头文件</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:8887/'</span><span class="token punctuation">)</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>server2.js</code>：8887端口服务</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210123164813202.png" alt="跨域请求报错"></p><p>解决方法：在添加<code>server2.js</code>中添加代码如下（浏览器在解析请求返回的内容时发现没有Access-Control-Allow-Origin设置为允许，会将返回内容忽略掉并报错）</p><pre class="line-numbers language-javascript"><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里就可以指定域名来访问服务器，从而实现安全的跨域请求 ，也可以通过判断request.url来进行不同的跨域请求设置</p><blockquote><p>提示：浏览器会认为localhost与127.0.0.1是跨域</p></blockquote><h4 id="2-2-2-jsonp实现跨域请求"><a href="#2-2-2-jsonp实现跨域请求" class="headerlink" title="2.2.2 jsonp实现跨域请求"></a>2.2.2 jsonp实现跨域请求</h4><p>直接在<code>test.html</code>中使用srcipt标签来实现跨域，这样就不需要在服务器设置Access-Control-Allow-Origin属性了</p><p>浏览器允许link、img、script标签上面的src或者是ref跨域来实现的</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8887<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-CORS预请求"><a href="#2-2-3-CORS预请求" class="headerlink" title="2.2.3 CORS预请求"></a>2.2.3 CORS预请求</h4><p>修改<code>test.html</code>文件，刷新页面后再次发生跨域的报错</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8887'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'X-Test-Cors'</span><span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210123180145542.png"></p><p>报错原因：</p><p>​    跨域资源共享标准（ cross-origin sharing standard ）允许在下列场景中使用跨域 HTTP 请求：</p><ul><li>由 XMLHttpRequest 或 Fetch 发起的跨域 HTTP 请求</li><li>Web 字体 （CSS 中通过<code>@font-face</code>使用跨域字体资源）</li><li>WebGL 贴图</li><li>使用 drawImage 将 Images/video 画面绘制到 canvas</li><li>样式表（使用 CSSOM）</li></ul><p>在发生跨域时的限制：</p><ul><li><p>允许的方法默认只有：<code>GET</code>、<code>HEAD</code>、<code>POST</code>，其他的方法是默认不允许的（其他方法就需要进行预请求）</p></li><li><p>允许<code>Content-Type</code>：<code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>,其他的也需要预请求</p></li><li><p>其他限制：请求头限制(<a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header">Fetch</a>)、XMLHttpRequestUpload对象均没有注册任何事件监听器、请求中没有使用ReadableStream对象</p></li></ul><p>解决方法：修改<code>server2.js</code>文件的请求头信息</p><pre class="line-numbers language-javascript"><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    <span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">:</span> <span class="token string">'X-Test-Cors'</span><span class="token punctuation">,</span>    <span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">:</span> <span class="token string">'POST, PUT, DELETE'</span><span class="token punctuation">,</span>    <span class="token string">'Access-Control-Max-Age'</span><span class="token punctuation">:</span> <span class="token string">'1000'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器比之前多了一个请求，即预请求</p><p><img src="image-20210123181435164.png"></p><p>​<br>​    </p><h3 id="2-3-缓存Cache-Control"><a href="#2-3-缓存Cache-Control" class="headerlink" title="2.3 缓存Cache-Control"></a>2.3 缓存Cache-Control</h3><h4 id="2-3-1-可缓存性"><a href="#2-3-1-可缓存性" class="headerlink" title="2.3.1 可缓存性"></a>2.3.1 可缓存性</h4><ul><li>public：http请求返回的过程中，在Cache-Control中设置了public的值，代表在这个http请求中返回的内容所经过的任何路径（包括中间的一些http的代理服务器以及发出这个请求的客户端浏览器）都可以对返回内容进行缓存的操作</li><li>private：只有发起请求的浏览器才可以进行缓存</li><li>no-cache：不可以直接使用缓存</li></ul><blockquote><p>no-cache可以在本地、proxy服务器进行缓存，但是每次发起请求都要去服务器验证(2.5 资源验证)；如果服务器返回允许使用这部分缓存，才可以使用缓存</p></blockquote><h4 id="2-3-2-到期"><a href="#2-3-2-到期" class="headerlink" title="2.3.2 到期"></a>2.3.2 到期</h4><ul><li>max-age=<seconds>：设置这个缓存到多少秒过期</li><li>s-maxage=<seconds>：s-maxage代替max-age，在代理服务器里才会生效，在客户端浏览器不会读取这个属性</li><li>ma-stale=<seconds>：在max-age过期之后，如果我们返回的资源有这个max-stale的设置，发起请求的一方主动带的一个头，即便max-age过期了，只要在max-stale这个时间内依然可以使用这个过期的缓存，而不需要去原服务器请求（注意：只有在发起端设置才有用）</li></ul><h4 id="2-3-3-重新验证"><a href="#2-3-3-重新验证" class="headerlink" title="2.3.3 重新验证"></a>2.3.3 重新验证</h4><ul><li>must-revalidate：在max-age过期了，我们必须到原服务端去发送这个请求来重新获取这部分数据，再来验证这部分内容是不是真的过期了，而不能直接使用本地的缓存</li><li>proxy-revalidate：用在缓存服务器的，指在缓存服务器过期之后，必须到原服务端去发送这个请求来重新获取这部分数据，再来验证这部分内容是不是真的过期了，而不能直接使用本地的缓存</li></ul><h4 id="2-3-4-其他"><a href="#2-3-4-其他" class="headerlink" title="2.3.4 其他"></a>2.3.4 其他</h4><ul><li>no-store：本地和代理服务器都是不可以缓存，每次都要去服务器端拿新的body内容</li><li>no-transform：用在proxy服务器，告诉proxy服务器不可以随意改变返回的内容（例如不能随便压缩返回的图片）</li></ul><blockquote><p>注意：上面这些头只是一个限制性、声明性的作用，它没有任何强制的约束力</p></blockquote><p>示例代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/script.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/script.js'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span>      <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=20'</span> <span class="token comment" spellcheck="true">// 设置缓存</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'console.log("script loaded")'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210124193709754.png"></p><p><img src="image-20210124191947363.png" alt="从服务器获取script.js"></p><p><img src="image-20210124192758176.png" alt="再次刷新后从缓存读取"></p><p>问题：我们希望服务端更新了内容之后，客户端也能更新而不是读取的客户端的缓存</p><p>解决方法：在打包完成后会在js文件名上根据打包完成的js文件以及其他的静态资源文件的内容加上一段hash码，如果js文件或者静态资源文件内容不变，hash码就不会变。也就是当url没有变就会使用本地的静态资源缓存，如果所有js文件或者静态资源文件内容变化了，那么嵌入到这些资源的url路径的hash码就会发生变化，这样客户端就会发起新的请求。</p><p>​<br>​    </p><h3 id="2-4-资源验证"><a href="#2-4-资源验证" class="headerlink" title="2.4 资源验证"></a>2.4 资源验证</h3><img src="image-20210124195304725.jpg" alt="浏览器资源验证流程" style="zoom:130%;" /><p><strong>验证头：</strong></p><ul><li>Last-Modified：上次修改时间，配合If-Modifie-Since或者If-Unmodified-Since使用，比对上次修改时间以验证资源是否需要更新</li></ul><blockquote><p>​        请求的资源有Last-Modified，浏览器在下次请求的时候就会带上Last-Modified，服务器就读取Header中If-Modifie-Since的值来对比资源存在的地方，最后来对比上次修改的时间，如果时间是一样的代表资源还没有被重新修改过，服务器就告诉浏览器可以直接使用这个缓存</p></blockquote><ul><li>Etag：数据签名，资源发生了改变它的数据签名就会改变；配合If-Match或者If-Non-Match使用，对比资源的签名判断是否使用缓存</li></ul><p>示例代码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/script.js'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> etag <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'if-none-match'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>etag <span class="token operator">===</span> <span class="token string">'777'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span>        <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=2000000, no-cache'</span><span class="token punctuation">,</span>        <span class="token string">'Last-Modified'</span><span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>        <span class="token string">'Etag'</span><span class="token punctuation">:</span> <span class="token string">'777'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span>        <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=2000000, no-cache'</span><span class="token punctuation">,</span>        <span class="token string">'Last-Modified'</span><span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>        <span class="token string">'Etag'</span><span class="token punctuation">:</span> <span class="token string">'777'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'console.log("script loaded twice")'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210124201729755.png" alt="设置资源验证"></p><p><img src="image-20210124202044063.png" alt="返回304"></p><p><img src="image-20210124202633019.png" alt="缓存读取"></p><p>​<br>​    </p><h3 id="2-5-Cookie和Session"><a href="#2-5-Cookie和Session" class="headerlink" title="2.5 Cookie和Session"></a>2.5 Cookie和Session</h3><h4 id="2-5-1-cookie"><a href="#2-5-1-cookie" class="headerlink" title="2.5.1 cookie"></a>2.5.1 cookie</h4><ul><li>通过Set-Cookie设置，保存在浏览器中</li><li>下次在同域的请求中自动带上</li><li>键值对，可以设置多个</li></ul><h4 id="2-5-2-cookie属性"><a href="#2-5-2-cookie属性" class="headerlink" title="2.5.2 cookie属性"></a>2.5.2 cookie属性</h4><ul><li>max-age和expires设置过期时间</li><li>Secure只在https的时候发送</li><li>HttpOnly无法通过document.cookie访问（安全性）</li></ul><p>示例代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>      <span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token string">'id=123'</span>      <span class="token comment" spellcheck="true">//'Set-Cookie': ['id=123', 'abc=456'] 可以设置多个CooKie</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启服务</p><p><img src="image-20210125140602729.png" alt="查看cookie"></p><blockquote><p>如果Cookie没有设置过期时间，在浏览器关闭后就没有了</p></blockquote><p>设置HttpOnly属性</p><pre class="line-numbers language-javascript"><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>    <span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id=123; max-age=2'</span><span class="token punctuation">,</span> <span class="token string">'abc=456;HttpOnly'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210125141908195.png" alt="abc=456被禁止访问"></p><p>设置domain</p><blockquote><p>​        不同域名的cookie是不能共享的，不过我们可以设置domain来实现所有的二级域可以读到一级域的cookie。（有更好的方式)</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// const host = request.headers.host</span><span class="token keyword">if</span><span class="token punctuation">(</span>host <span class="token operator">===</span> <span class="token string">'test.com'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">{</span>     <span class="token string">'Content-type'</span><span class="token punctuation">:</span><span class="token string">'text/html'</span><span class="token punctuation">,</span>     <span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'id=123;max-age=2'</span><span class="token punctuation">,</span><span class="token string">'abc=345;domain=test.com'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：不可以跨域设置domain</p><h4 id="2-5-2-session"><a href="#2-5-2-session" class="headerlink" title="2.5.2 session"></a>2.5.2 session</h4><p>服务器创建session后，会把session的id以cookie的形式回写给客户机，这样，只要客户机的浏览器不关，再去访问服务器时，都会带着session的id号去，服务器发现客户机浏览器带session的id过来了，就会使用内存中与之对应的session为之服务。</p><blockquote><p>Session不等于Cookie</p></blockquote><h4 id="2-5-3-Session和Cookie的主要区别"><a href="#2-5-3-Session和Cookie的主要区别" class="headerlink" title="2.5.3 Session和Cookie的主要区别"></a>2.5.3 Session和Cookie的主要区别</h4><ul><li>Cookie是把用户的数据写给用户的浏览器。</li><li>Session技术把用户的数据写到用户独占的session中。</li><li>Session对象由服务器创建，开发人员可以调用request对象的getSession方法得到session对象。</li></ul><p>​<br>​    </p><h3 id="2-6-HTTP的长连接"><a href="#2-6-HTTP的长连接" class="headerlink" title="2.6 HTTP的长连接"></a>2.6 HTTP的长连接</h3><p>&emsp;&emsp;在HTTP/1.0中<strong>默认使用短连接</strong>。也就是说客户端和服务器每进行一次HTTP操作就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>&emsp;&emsp;从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入<code>Connection:keep-alive</code>。在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。</p><p>&emsp;&emsp;实现长连接需要客户端和服务端都支持长连接。 HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p><ul><li><p>Connection:keep-alive：是可以复用TCP/IP的链接，不用每次发起一个请求就创建一个TCP/IP的链接（只有在同域下，这个TCP/IP的链接才可以复用）</p></li><li><p>Connection:close：每次发起请求就会创建一个TCP/IP链接，没有重复使用TCP/IP链接（每个连接的建立都是需要资源消耗和时间消耗的）</p></li></ul><p>示例代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.jpg'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'image/jpg'</span><span class="token punctuation">,</span>      <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span> <span class="token comment" spellcheck="true">// or close</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test4.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test5.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test6.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test7.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="image-20210125151346961.png" alt="查看Network" style="zoom:90%;" /><img src="image-20210125152325682.png" alt="等待" style="zoom:90%;" /><p>此时<code>Connection:keep-alive</code>，可以看到Chrome浏览器支持6个并发的连接，其他的图片在等待，等待有TCP连接空出来再发送请求</p><p>如果<code>Connection:close</code>,TCP连接不会复用，可以看到每个Connection ID都不一样</p><img src="image-20210125152745803.png" alt="短连接" style="zoom:90%;" /><p>访问使用HTTP2的Google页面，发现只用了一个Connection ID</p><img src="image-20210125153633792.png" alt="" style="zoom:90%;" /><blockquote><p>HTTP2可以信道复用，在TCP连接上可以并发的去发送http请求，链接一个网站只需要一个TCP链接(同域的情况下)</p></blockquote><p>参考文章：<a href="https://www.cnblogs.com/gotodsp/p/6366163.html">HTTP长连接、短连接</a></p><p>​<br>​    </p><h3 id="2-7-数据协商"><a href="#2-7-数据协商" class="headerlink" title="2.7 数据协商"></a>2.7 数据协商</h3><p>&emsp;&emsp;在客户端发送给服务端一个请求时，会声明希望拿到的数据格式以及数据相关的一些限制，服务端会根据这个请求进行判断，返回不同的数据（服务端是根据客户端发送的请求头信息来进行区分，然后服务端决定返回怎么样的数据）</p><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p><strong>Accept：</strong></p><ul><li>Accept：表示想要的数据类型</li><li>Accept-Encoding：代表数据使用什么样的编码方式进行传输</li><li>Accept-Language：实现不同的地方访问服务展示的语言不同</li><li>User-Agent：表示浏览器相关的信息，手机端的浏览器和PC端的浏览器是不一样的，可以通过User-Agent判断</li></ul><h4 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h4><p><strong>Content：</strong></p><ul><li>Content-Type：对应Accept，Accept可以接收几种数据格式，Content-Type从其中选择一种</li><li>Content-Encoding：对应Accept-Encoding</li><li>Content-language：根据你的请求返回语言还是没有根据请求返回语言</li></ul><p><code>Content-Type</code></p><ul><li><p>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式</p></li><li><p>multipart/form-data： 数据被编码为一条消息，页上的每个控件对应消息中的一个部分</p></li><li><p>text/plain： 数据以纯文本形式（text/json/xml/html）进行编码，其中不含任何控件或格式字符</p><p>……</p></li></ul><blockquote><p> 当你想要设置你想要的数据时就通过设置Accept中的属性来达到，服务端就会根据你的请求来进行对应的请求</p></blockquote><p><img src="image-20210126153300531.png"></p><p>​<br>​    </p><h3 id="2-8-Redirect"><a href="#2-8-Redirect" class="headerlink" title="2.8 Redirect"></a>2.8 Redirect</h3><p>&emsp;&emsp;我们通过url去访问一个路径，请求资源的时候，发现这个资源已经不在这个url指定的位置了，这时候服务器就会告诉客户端浏览器，请求的资源现在在那个地方，浏览器再去重新请求那个地方</p><p>通过服务器判断请求的路径来实现重定向到新的url，一般返回3**有几种状态：</p><ul><li>302（每次访问都需要通过旧的url再跳转到新的资源的URL上）</li><li>301（指定之前的资源的路径永久变成了新定义的资源路径，出现了之前路径访问的时候，直接在浏览器就会变成新的路径，就不需要服务器去指定一个新的location，因为是一个永久的变更；除非主动清除缓存，不然浏览器都会默认调整）</li></ul><p>示例代码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Location'</span><span class="token punctuation">:</span> <span class="token string">'/new'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/new'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;div>this is content&lt;/div>'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126165112534.png"></p><p><img src="image-20210126165723871.png" alt="重定向"></p><p>​<br>​    </p><h3 id="2-9-Content-Security-Policy"><a href="#2-9-Content-Security-Policy" class="headerlink" title="2.9 Content-Security-Policy"></a>2.9 Content-Security-Policy</h3><p><strong>内容安全策略</strong>，为了让网站变得更加的安全</p><ul><li>限制资源获取</li><li>报告资源获取越权</li></ul><p>限制方式：</p><ul><li>default-src限制全局（与链接有关的都可以限制它的作用范围）</li><li>制定资源类型（可以根据特定的资源来限制它的资源范围）</li></ul><p>资源类型（网页上跟链接有关的，需要从外链进行加载内容，都可以进行资源类型的限制）</p><ul><li><p>connect-src（请求发向的地方目标）</p></li><li><p>mainfest-src</p></li><li><p>img-src（图片可以从哪几个网站加载）</p></li><li><p>font-src</p></li><li><p>media-src</p></li><li><p>style-src（样式从哪几个网址加载）</p></li><li><p>frame-src</p></li><li><p>script-src（脚本从哪几个网址加载）</p><p>…..</p></li></ul><p>示例代码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>      <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">:</span> <span class="token string">'default-src http: https:'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>This is content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inline js'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不希望有inline js</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126171420934.png" alt="禁止执行inline js"></p><p>使用外链的方式加载 js 代码，进行测试，此时可以加载</p><p>设置为只能使用本域名下的  js 代码进行加载，进行测试</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>      <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">:</span> <span class="token string">'default-src \'self\''</span> <span class="token comment" spellcheck="true">// 限制所有外链</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/javascript'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'console.log("loaded script")'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>This is content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inline js'</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.3.1/core.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126172831056.png"></p><p><img src="image-20210126173450739.png" alt="blocked:csp"></p><p>限制表单</p><pre><code>&#39;Content-Security-Policy&#39;: &#39;default-src \&#39;self\&#39;; form-action \&#39;self\&#39; </code></pre><p><img src="image-20210126174415329.png"></p><p>主动向服务器发请求汇报，可以允许加载（Content-Security-Policy-Report-Only）</p><pre><code>&#39;Content-Security-Policy&#39;: &#39;default-src \&#39;self\&#39;; form-action \&#39;self\&#39;; report-uri /report&#39;</code></pre><p><img src="image-20210126175140576.png"></p><p>可以通过meta标签使用</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>script-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span>; form-action <span class="token punctuation">'</span>self<span class="token punctuation">'</span>;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考文章：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">CSP</a></p><p>​    </p><p>​    </p><p>​    </p><h2 id="3-Nginx代理基础"><a href="#3-Nginx代理基础" class="headerlink" title="3. Nginx代理基础"></a>3. Nginx代理基础</h2><h3 id="3-1-Nginx安装"><a href="#3-1-Nginx安装" class="headerlink" title="3.1 Nginx安装"></a>3.1 Nginx安装</h3><p>Nginx的作用： 通过一台物理机器可以运行多个服务，节省资源，从而高效地利用计算机</p><p><a href="http://nginx.org/en/download.html">Nginx下载</a> </p><img src="image-20210125154517050.png" alt="下载页面" style="zoom: 70%;" /><p>直接下载这个页面上的windows压缩包，然后解压，在解压的文件夹中打开git bash来运行nginx</p><img src="image-20210125155122837.png" alt="启动服务" style="zoom:90%;" /><img src="image-20210125155100880.png" alt="启动成功" style="zoom:60%;" /><p>​<br>​    </p><h3 id="3-2-Nginx代理配置"><a href="#3-2-Nginx代理配置" class="headerlink" title="3.2 Nginx代理配置"></a>3.2 Nginx代理配置</h3><p>在nginx软件下新建一个servers并创建一个test.conf文件，并且修改<code>nginx.conf</code>，引入<code>test.conf</code>文件：</p><p><code>test.conf</code>：</p><pre><code>server &#123;  listen      80;  server_name test.com;  location /  &#123;    proxy_pass http://127.0.0.1:8887;    # proxy_set_header Host $host;  &#125;&#125;</code></pre><p><code>nginx.conf</code>：（nginx-1.19.6\conf\nginx.conf）</p><pre><code>include     servers/*.conf;</code></pre><p>启动server服务</p><p><code>server.js</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> zlib <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'zlib'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>host<span class="token punctuation">)</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span><span class="token function">gzipSync</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/form<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/x-www-form-urlencoded<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span>    form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/form'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> formData      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>test.com</code>来访问代理的网址</p><img src="image-20210126183044339.png" alt="成功" style="zoom:80%;" /><p>补充：在<code>test.conf</code>文件中如果是否设置<code>proxy_set_header Host $host;</code>在服务端会返回会不同</p><p><img src="image-20210126184400512.png"></p><blockquote><p>host经过中间代理的层级后被修改</p></blockquote><p>​<br>​    </p><h3 id="3-3-Nginx代理缓存"><a href="#3-3-Nginx代理缓存" class="headerlink" title="3.3 Nginx代理缓存"></a>3.3 Nginx代理缓存</h3><p>代理缓存是在代理设置的，所有每一个新请求都会经过代理。在浏览器客户端，只要第一个用户请求了，代理服务器缓存之后，其他用户都可以使用代理服务器的缓存</p><p>修改<code>test.conf</code>：</p><p><img src="20190105210021993.png"></p><pre><code>proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m; server &#123;  listen      80;  server_name test.com;  location /  &#123;    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8888;    proxy_set_header Host $host;  &#125;&#125;server &#123;  listen      80;  server_name a.test.com;  location /  &#123;    proxy_pass http://127.0.0.1:8888;    proxy_set_header Host $host;  &#125;&#125;</code></pre><p>新建一个文件夹，并创建<code>server.js</code>和<code>test.html</code>文件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> wait <span class="token operator">=</span> <span class="token punctuation">(</span>seconds<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> seconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/data'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=3, s-maxage=20'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以在<code>server.js</code>修改对应的返回头信息来实现各种配置（2.3 缓存Cache-Control）</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>This is content, and data is: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> resp<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> text  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126222337746.png" alt="第一次请求 从服务器获取 耗时长"></p><p><img src="image-20210126222518856.png" alt="第二次请求 从浏览器缓存读取"></p><p><img src="image-20210126222543578.png" alt="第三次请求 从代理缓存读取"></p><p>设置头信息Vary：指定在发生一个请求的时候，只要和服务器端的指定的http头的值相同的情况下，客户端才会使用缓存</p><pre><code>&#39;Vary&#39;: &#39;X-Test-Cache&#39;</code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>This is content, and data is: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">function</span> doRequest <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    data<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">''</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'X-Test-Cache'</span><span class="token punctuation">:</span> index<span class="token operator">++</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> resp<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span>innerText <span class="token operator">=</span> text    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> doRequest<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210126223806916.png" alt="多次请求"></p><p>​<br>​    </p><h3 id="3-4-Nginx部署HTTPS服务"><a href="#3-4-Nginx部署HTTPS服务" class="headerlink" title="3.4 Nginx部署HTTPS服务"></a>3.4 Nginx部署HTTPS服务</h3><p>在Nginx根目录下新建一个certs文件夹，并在里面打开git bash，输入以下命令，生成公钥和私钥</p><pre class="line-numbers language-bash"><code class="language-bash">openssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout localhost-privket.pem -out localhost-cert.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="20190106113824992.png"></p><pre><code>proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;server &#123;  listen      443;  server_name test.com;  listen ... ssl;  ssl_certificate_key ../certs/localhost-privket.pem;  ssl_certificate ../certs/localhost-cert.pem;  location /  &#123;    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8887;    proxy_set_header Host $host;  &#125;&#125;</code></pre><p><img src="image-20210126230619376.png"></p><p>这样直接访问的时候会出现<code>400 Bad Request The plain HTTP request was sent to HTTPS port</code>错误</p><p>需要再修改<code>test.conf</code>文件：</p><pre><code>proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;server &#123;  listen 80;  server_name test.com;  listen 443 ssl;  ssl_certificate_key ../certs/localhost-privket.pem;  ssl_certificate ../certs/localhost-cert.pem;  location /  &#123;    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8887;    proxy_set_header Host $host;  &#125;&#125;</code></pre><p><img src="image-20210126231543378.png" alt="启动成功"></p><p>还可以通过配置来实现访问HTTP协议的网址时自动转到HTTPS协议上，修改<code>test.conf</code>：</p><pre><code>proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;server &#123;  listen        80 default_server;  listen        [::]:80 default_server;  server_name   test.com;  return 302 https://$server_name$request_uri;&#125;server &#123;  server_name test.com;  listen 443 ssl;  ssl_certificate_key ../certs/localhost-privket.pem;  ssl_certificate ../certs/localhost-cert.pem;  location /  &#123;    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8887;    proxy_set_header Host $host;  &#125;&#125;</code></pre><p>还有其他Nginx配置，可以查看：<a href="http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server">Nginx官方文档</a></p><h3 id="3-5-Nginx简单配置HTTP2"><a href="#3-5-Nginx简单配置HTTP2" class="headerlink" title="3.5 Nginx简单配置HTTP2"></a>3.5 Nginx简单配置HTTP2</h3><blockquote><p>注意：需要支持HTTPS才能使用HTTP2，通过Nginx来开启HTTP2</p></blockquote><p>修改<code>test.conf</code>：</p><pre><code>proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;server &#123;  listen        80 default_server;  listen        [::]:80 default_server;  server_name   test.com;  return 302 https://$server_name$request_uri;&#125;server &#123;  server_name test.com;  listen 443 ssl http2;  ssl_certificate_key ../certs/localhost-privket.pem;  ssl_certificate ../certs/localhost-cert.pem;  location /  &#123;    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8888;    proxy_set_header Host $host;  &#125;&#125;</code></pre><p><code>server.js</code>：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request come'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'test.jpg'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>      <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>      <span class="token string">'Link'</span><span class="token punctuation">:</span> <span class="token string">'&lt;/test.jpg>; as=image; rel=preload'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'image/jpg'</span><span class="token punctuation">,</span>      <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span> <span class="token comment" spellcheck="true">// or close</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8887</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening on 8887'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>server.js</code>，并启动<code>Nginx</code></p><p><img src="image-20210127121127126.png"></p><p>HTTP1与HTTP2的比较</p><img src="image-20210127122742425.png" alt="HTTP1 vs HTTP2" style="zoom:80%;" /><blockquote><p>不是所有浏览器都支持HTTP2，使用Ngnix开启HTTP2可以做到兼容HTTP1和HTTP2（ALPN方案）</p><p>而Ngnix与后端之间使用HTTP1</p></blockquote><p><img src="image-20210127123715040.png" alt="HTTP2"></p><p><img src="image-20210127124129626.png" alt="HTTP1"></p><h2 id="4-HTTP关联知识点"><a href="#4-HTTP关联知识点" class="headerlink" title="4. HTTP关联知识点"></a>4. HTTP关联知识点</h2><h3 id="4-1-HTTP相关应用技术"><a href="#4-1-HTTP相关应用技术" class="headerlink" title="4.1 HTTP相关应用技术"></a>4.1 HTTP相关应用技术</h3><p><img src="%E4%B8%8B%E8%BD%BD.png"></p><h4 id="4-1-1-网络"><a href="#4-1-1-网络" class="headerlink" title="4.1.1 网络"></a>4.1.1 网络</h4><p>&emsp;&emsp;互联网的正式名称是<code>Internet</code>，里面存储着无穷无尽的信息资源，我们通常所说的“上网”实际上访问的只是互联网的一个子集<code>World Wide Web</code>，它基于 HTTP 协议，传输 HTML 等超文本资源，能力也就被限制在 HTTP 协议之内。</p><p>&emsp;&emsp;互联网上还有许多万维网之外的资源，例如常用的电子邮件、<code>BT</code> 和 <code>Magnet</code> 点对点下载、<code>FTP</code> 文件下载、<code>SSH</code> 安全登录、各种即时通信服务等等，它们需要用各自的专有协议来访问。不过由于 HTTP 协议非常灵活、易于扩展，而且“超文本”的表述能力很强，所以很多其他原本不属于 HTTP 的资源也可以“包装”成 HTTP 来访问，即各种“网页应用”。（如“微信网页版”“邮箱网页版”）综合来看，现在的互联网 90% 以上的部分都被万维网，也就是 HTTP 所覆盖。</p><p>​    </p><h4 id="4-1-2-Web-服务器"><a href="#4-1-2-Web-服务器" class="headerlink" title="4.1.2 Web 服务器"></a>4.1.2 Web 服务器</h4><p>&emsp;&emsp;浏览器是 HTTP 里的请求方，在协议另一端的<strong>应答方</strong>就是<strong>服务器</strong>，<strong>Web Server</strong></p><p>Web服务器时有两个层面的含义：硬件和软件</p><p><strong>硬件</strong>含义就是<strong>物理形式或“云”形式的机器</strong>，在大多数情况下它可能不是一台服务器，而是利用反向代理、负载均衡等技术组成的庞大集群。但从外界看来，它仍然表现为一台机器，但这个形象是虚拟的。</p><p><strong>软件</strong>含义的 Web 服务器可能我们更为关心，它就是提供 Web 服务的应用程序，通常会运行在硬件含义的服务器上。它利用强大的硬件能力响应海量的客户端 HTTP 请求，处理磁盘上的网页、图片等静态文件，或者把请求转发给后面的业务应用，返回动态的信息。</p><p>​    </p><p><code>Apache</code> 是老牌的服务器，功能相当完善，相关的资料很多，学习门槛低，是许多创业者建站的入门产品。</p><p><code>Nginx</code> 是后起之秀，高性能、高稳定，且易于扩展，自2004年推出后就不断蚕食<code>Apache</code>的市场份额。</p><p>此外还有 <code>IIS</code>、 <code>Jetty/Tomcat</code> 等，因为性能不是很高，所以在互联网上应用得较少。</p><p>​    </p><h4 id="4-1-3-CDN"><a href="#4-1-3-CDN" class="headerlink" title="4.1.3 CDN"></a>4.1.3 CDN</h4><p>&emsp;&emsp;浏览器通常不会直接连到服务器，中间会经过“重重关卡”，其中的一个重要角色就叫做 <strong>CDN</strong></p><p>&emsp;&emsp;<strong>内容分发网络</strong><code>Content Delivery Network</code>它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。</p><p>&emsp;&emsp;<strong>CDN</strong>可以缓存源站的数据，让浏览器的请求不用到达源站服务器，直接在“半路”就可以获取响应。如果调度算法很优秀，更可以找到离用户最近的节点，大幅度缩短响应时间。</p><p>&emsp;&emsp;<strong>CDN</strong> 也是现在互联网中的一项重要基础设施，除了基本的网络加速外，还提供负载均衡、安全防护、边缘计算、跨运营商网络等功能，能够成倍地“放大”源站服务器的服务能力，很多云服务商都把其作为产品的一部分。</p><p>​        </p><h4 id="4-1-4-爬虫"><a href="#4-1-4-爬虫" class="headerlink" title="4.1.4 爬虫"></a>4.1.4 爬虫</h4><p>&emsp;&emsp;<strong>爬虫</strong><code>Crawler</code>是一种可以自动访问 Web 资源的应用程序。据估计，互联网上至少有 50% 的流量都是由爬虫产生的，某些特定领域的比例还会更高。绝大多数是由各大搜索引擎“放”出来的，抓取网页存入庞大的数据库，再建立关键字索引，这样我们才能够在搜索引擎中快速地搜索到互联网角落里的页面。</p><p>&emsp;&emsp;爬虫也有不好的一面，它会过度消耗网络资源，占用服务器和带宽，影响网站对真实数据的分析，甚至导致敏感信息泄漏。所以，又出现了“反爬虫”技术，通过各种手段来限制爬虫。其中一项就是“君子协定”<code>robots.txt</code>，约定哪些该爬，哪些不该爬。</p><p>​    </p><h4 id="4-1-5-WebService-WAF"><a href="#4-1-5-WebService-WAF" class="headerlink" title="4.1.5 WebService/WAF"></a>4.1.5 WebService/WAF</h4><p>&emsp;&emsp;<strong>Web</strong> <strong>Service</strong>是一种由 <code>W3C</code> 定义的应用服务开发规范，使用 <code>client-server</code> 主从架构，通常使用 <code>WSDL</code> 定义服务接口，使用 <code>HTTP</code> 协议传输 <code>XML</code> 或 <code>SOAP</code> 消息，也就是说，它是<strong>一个基于 Web（HTTP）的服务架构技术</strong>，既可以运行在内网，也可以在适当保护后运行在外网。因为采用了 HTTP 协议传输数据，所以在 Web Service 架构里服务器和客户端可以采用不同的操作系统或编程语言开发，(如服务器端用 <code>Linux+Java</code>，客户端用 <code>Windows+C#</code>）具有跨平台跨语言的优点。</p><blockquote><p>Web Service 是网络服务实体，而 Web Server 是网络服务器</p></blockquote><p>​    </p><p>&emsp;&emsp;<strong>网络应用防火墙</strong>  <code>WAF</code>  是应用层面的“防火墙”，专门检测 HTTP 流量，是防护 Web 应用的安全技术。WAF 通常位于 Web 服务器之前，可以阻止如 <code>SQL 注入</code>、<code>跨站脚本等攻击</code>，目前应用较多的一个开源项目是 <code>ModSecurity</code>，它能够完全集成进 <code>Apache</code> 或 <code>Nginx</code>。</p><p>​    </p><h4 id="4-1-6-小结"><a href="#4-1-6-小结" class="headerlink" title="4.1.6 小结"></a>4.1.6 小结</h4><ol><li>互联网上绝大部分资源都使用 HTTP 协议传输</li><li>浏览器是 HTTP 协议里的请求方，即 User Agent</li><li>服务器是 HTTP 协议里的应答方，常用的有 Apache 和 Nginx</li><li>CDN 位于浏览器和服务器之间，主要起到缓存加速的作用</li><li>爬虫是另一类 User Agent，是自动访问网络资源的程序</li></ol><p>​    </p><p>​    </p><h3 id="4-2-HTTP相关协议"><a href="#4-2-HTTP相关协议" class="headerlink" title="4.2 HTTP相关协议"></a>4.2 HTTP相关协议</h3><p><img src="2020128.png"></p><h4 id="4-2-1-TCP-IP"><a href="#4-2-1-TCP-IP" class="headerlink" title="4.2.1 TCP/IP"></a>4.2.1 TCP/IP</h4><p>&emsp;&emsp;<code>TCP/IP 协议</code>是目前网络世界事实上的标准通信协议。它实际上是一系列网络通信协议的统称，其中最核心的两个协议是<strong>TCP</strong>和<strong>IP</strong>，其他还有 <code>UDP</code>、<code>ICMP</code>、<code>ARP</code> 等，共同构成了一个复杂但有层次的协议栈。</p><p>&emsp;&emsp;这个协议栈有四层，最上层是<strong>应用层</strong>，最下层是<strong>链接层</strong>，<strong>TCP 属于传输层，IP 属于网际层</strong>。</p><p>&emsp;&emsp;<strong>IP 协议</strong>是<code>Internet Protocol</code>的缩写，主要目的是解决寻址和路由问题，以及如何在两点间传送数据包。IP 协议使用<strong>IP 地址</strong>的概念来定位互联网上的每一台计算机。</p><blockquote><p>现在我们使用的 IP 协议大多数是 v4 版，地址是四个用    <code>.</code>    分隔的数字（例如<strong>192.168.0.1</strong>），总共有 $2^{32}$，大约 42 亿个可以分配的地址。互联网的快速发展让地址的分配管理很快就捉襟见肘。所以出现了 v6 版，使用 8 组    <code>:</code>    分隔的数字作为地址，有$ 2^{128}$ 个</p></blockquote><p>​    </p><p>&emsp;&emsp;<strong>TCP 协议</strong>是<code>Transmission ControlProtocol</code>（<strong>传输控制协议</strong>）的缩写，它位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通信，是 HTTP 协议得以实现的基础。<strong>可靠</strong>是指保证数据不丢失，<strong>字节流</strong>是指保证数据完整，所以在 TCP 协议的两端可以如同操作文件一样访问传输的数据，就像是读写在一个密闭的管道里流动的字节。</p><p>​        </p><p>​    </p><h4 id="4-2-2-HTTPS"><a href="#4-2-2-HTTPS" class="headerlink" title="4.2.2 HTTPS"></a>4.2.2 HTTPS</h4><blockquote><p><strong>HTTP over SSL/TLS</strong>，也就是运行在 SSL/TLS 协议上的 HTTP</p></blockquote><p>&emsp;&emsp;HTTP是不安全的，因为http协议传输的数据都是未加密的明文。为了保证这些隐私数据能加密传输，于是根据<strong>SSL协议</strong><code>Secure Sockets Layer</code>用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS</p><p>&emsp;&emsp;SSL/TLS是一个负责加密通信的安全协议，建立在 TCP/IP 之上，所以也是个可靠的传输协议，可以被用作 HTTP 的下层。SSL由网景公司发明，当发展到 3.0 时被标准化，改名为 <strong>TLS</strong><code>Transport Layer Security</code>，但由于历史的原因还是有很多人称之为 SSL/TLS，或者直接简称为 SSL</p><p><strong>加密：</strong></p><ul><li>私钥（放在服务器上，用于公钥加密过的数据）</li><li>公钥（放在互联网上，所有人都能拿到的一串加密的字符串，这个加密的字符串是来加密我们的字符信息的。当加密的数据传到服务器上，只有服务器通过私钥解密，才能把公钥加密的数据拿出来）</li></ul><p><strong>https握手的过程：</strong></p><p><img src="Inked%E6%8F%A1%E6%89%8B_LI.jpg"></p><p><strong>https和http的主要区别：</strong></p><ul><li><p>https协议需要到ca机构申请ssl证书(如沃通CA)，高级别的ssl证书需要一定费用</p></li><li><p>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议</p></li><li><p>http和https使用的是完全不同的连接方式，用的端口也不一样（http是80端口，https是443端口）</p></li><li><p>http的连接很简单，是无状态的；https协议是由ssl+http协议构建的可进行加密传输、身份认证的网络协议，更安全</p></li></ul><p>​    </p><h4 id="4-2-3-代理"><a href="#4-2-3-代理" class="headerlink" title="4.2.3 代理"></a>4.2.3 代理</h4><p>&emsp;&emsp;<strong>代理</strong><code>Proxy</code>是 HTTP 协议中请求方和应答方中间的一个环节，作为<strong>中转站</strong>，既可以转发客户端的请求，也可以转发服务器的应答。</p><p>代理有很多的种类，常见的有：</p><ul><li><strong>匿名代理</strong>：完全“隐匿”了被代理的机器，外界看到的只是代理服务器</li><li><strong>透明代理</strong>：顾名思义，它在传输过程中是“透明开放”的，外界既知道代理，也知道客户端</li><li><strong>正向代理</strong>：靠近客户端，代表客户端向服务器发送请求</li><li><strong>反向代理</strong>：靠近服务器端，代表服务器响应客户端的请求（CDN实际上就是一种代理，它代替源站服务器响应客户端的请求，通常扮演着透明代理和反向代理的角色）</li></ul><p>​    </p><p>由于代理在传输过程中插入了一个中间层，所以可以在这个环节做很多事，比如：</p><ul><li><strong>负载均衡</strong>：把访问请求均匀分散到多台机器，实现访问集群化</li><li><strong>内容缓存</strong>：暂存上下行的数据，减轻后端的压力</li><li><strong>安全防护</strong>：隐匿 IP, 使用 WAF 等工具抵御网络攻击，保护被代理的机器</li><li><strong>数据处理</strong>：提供压缩、加密等额外的功能</li></ul><blockquote><p>关于 HTTP 的代理还有一个特殊的<strong>代理协议</strong><code>proxy protocol</code>，它由知名的代理软件 <code>HAProxy</code> 制订，但并不是 RFC 标准。</p></blockquote><p>​    </p><p>​    </p><h4 id="4-2-4-小结"><a href="#4-2-4-小结" class="headerlink" title="4.2.4 小结"></a>4.2.4 小结</h4><ol><li>TCP/IP 是网络世界最常用的协议，HTTP 通常运行在 TCP/IP 提供的可靠传输基础上</li><li>DNS 域名是 IP 地址的等价替代，需要用域名解析实现到 IP 地址的映射</li><li>URI 是用来标记互联网上资源的一个名字，由“协议名 + 主机名 + 路径”构成，俗称 URL</li><li>HTTPS 相当于“HTTP+SSL/TLS+TCP/IP”，为 HTTP 套了一个安全的外壳</li><li>代理是 HTTP 传输过程中的“中转站”，可以实现缓存加速、负载均衡等功能</li></ol><p>​    </p><p>​    </p><blockquote><p>完结</p></blockquote><p><img src="%E4%B8%8B%E8%BD%BD22.png" alt="HTTP思维导图">    </p><p>​    </p><p>​    </p><p><a href="https://www.cnblogs.com/chenliyang/p/6558756.html">参考文章</a></p><p><a href="https://http2.akamai.com/demo">HTTP2演示</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 通信协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-study</title>
      <link href="2020/09/23/mybatis-study/"/>
      <url>2020/09/23/mybatis-study/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc-study</title>
      <link href="2020/09/23/springmvc-study/"/>
      <url>2020/09/23/springmvc-study/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis数据库</title>
      <link href="2020/09/03/redis-study/"/>
      <url>2020/09/03/redis-study/</url>
      
        <content type="html"><![CDATA[<h1 id="redis数据库"><a href="#redis数据库" class="headerlink" title="redis数据库"></a>redis数据库</h1><p><img src="fab9c809-459a-4793-8cce-bd3945fbe378-1611737772521.jpg"></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><h3 id="1-1-NOSQL"><a href="#1-1-NOSQL" class="headerlink" title="1.1 NOSQL"></a>1.1 NOSQL</h3><p>NoSQL，即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p><blockquote><p>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生 就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题</p></blockquote><h4 id="NOSQL和关系型数据库比较"><a href="#NOSQL和关系型数据库比较" class="headerlink" title="NOSQL和关系型数据库比较"></a>NOSQL和关系型数据库比较</h4><p><strong>优点：</strong></p><ul><li><p>成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</p></li><li><p>查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。</p></li><li><p>存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</p></li><li><p>扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</p></li></ul><p><strong>缺点：</strong></p><ul><li>维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。</li><li>不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</li><li>不提供关系型数据库对事务的处理。</li></ul><h4 id="非关系型数据库的优势："><a href="#非关系型数据库的优势：" class="headerlink" title="非关系型数据库的优势："></a>非关系型数据库的优势：</h4><ul><li>性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</li><li>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li></ul><h4 id="关系型数据库的优势："><a href="#关系型数据库的优势：" class="headerlink" title="关系型数据库的优势："></a>关系型数据库的优势：</h4><ul><li>复杂查询可以用SQL语句方便的在一个表以及多个表之间做复杂的数据查询</li><li>事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，让NoSQL数据库对关系型数据库的不足进行弥补。</li><li>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</li></ul><h3 id="1-2-主流NOSQL产品"><a href="#1-2-主流NOSQL产品" class="headerlink" title="1.2 主流NOSQL产品"></a>1.2 主流NOSQL产品</h3><h5 id="键值Key-Value存储数据库"><a href="#键值Key-Value存储数据库" class="headerlink" title="键值Key-Value存储数据库"></a>键值<code>Key-Value</code>存储数据库</h5><p>相关产品： <code>Tokyo Cabinet/Tyrant</code>、<code>Redis</code>、<code>Voldemort</code>、<code>Berkeley DB</code><br>典型应用： 内容缓存，主要用于处理大量数据的高访问负载。<br>数据模型： 一系列键值对<br>优势： 快速查询<br>劣势： 存储的数据缺少结构化</p><h5 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h5><p>相关产品：<code>Cassandra</code>,<code> HBase</code>,<code> Riak</code><br>典型应用：分布式的文件系统<br>数据模型：以列簇式存储，将同一列数据存在一起<br>优势：查找速度快，可扩展性强，更容易进行分布式扩展<br>劣势：功能相对局限</p><h5 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h5><p>相关产品：<code>CouchDB</code>、`MongoDB``<br>典型应用：Web应用（与Key-Value类似，Value是结构化的）<br>数据模型： 一系列键值对<br>优势：数据结构要求不严格<br>劣势： 查询性能不高，而且缺乏统一的查询语法</p><h5 id="图形-Graph-数据库"><a href="#图形-Graph-数据库" class="headerlink" title="图形(Graph)数据库"></a>图形(Graph)数据库</h5><p>相关数据库：<code>Neo4J</code>、<code>InfoGrid</code>、<code>Infinite Graph</code><br>典型应用：社交网络<br>数据模型：图结构<br>优势：利用图结构相关算法。<br>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</p><h3 id="1-3-什么是Redis"><a href="#1-3-什么是Redis" class="headerlink" title="1.3 什么是Redis"></a>1.3 什么是Redis</h3><p>Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求.</p><h5 id="支持的键值数据类型"><a href="#支持的键值数据类型" class="headerlink" title="支持的键值数据类型"></a>支持的键值数据类型</h5><ol><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ol><h4 id="redis的应用场景"><a href="#redis的应用场景" class="headerlink" title="redis的应用场景"></a>redis的应用场景</h4><blockquote><p>缓存（数据查询、短连接、新闻内容、商品内容等等）<br>聊天室的在线好友列表<br>任务队列。（秒杀、抢购、12306等等）<br>应用排行榜<br>网站访问统计<br>数据过期处理（可以精确到毫秒<br>分布式集群架构中的session分离</p></blockquote><h2 id="2-下载安装"><a href="#2-下载安装" class="headerlink" title="2. 下载安装"></a>2. 下载安装</h2><ol><li>官网：<a href="https://redis.io/">https://redis.io</a></li><li>中文网：<a href="http://www.redis.net.cn/">http://www.redis.net.cn/</a></li></ol><blockquote><p><code>redis.windows.conf</code>：配置文件<br><code>redis-cli.exe</code>：redis的客户端<br><code>redis-server.exe</code>：redis服务器端        </p></blockquote><h2 id="3-命令操作"><a href="#3-命令操作" class="headerlink" title="3. 命令操作"></a>3. 命令操作</h2><h3 id="1-数据结构："><a href="#1-数据结构：" class="headerlink" title="1. 数据结构："></a>1. 数据结构：</h3><p>redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构<br>value的数据结构：</p><ol><li>字符串类型 string</li><li>哈希类型 hash </li><li>列表类型 list 支持重复元素</li><li>集合类型 set  ： 不允许重复元素</li><li>有序集合类型 sortedset：不允许重复元素，且元素有顺序</li></ol><h3 id="2-字符串类型-string"><a href="#2-字符串类型-string" class="headerlink" title="2.字符串类型 string"></a>2.字符串类型 string</h3><ol><li>存储： set key value</li><li>获取： get key</li><li>删除： del key</li></ol><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> username zhangsanOK127.0.0.1:6379<span class="token operator">></span> get username<span class="token string">"zhangsan"</span>127.0.0.1:6379<span class="token operator">></span> del age<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-哈希类型-hash"><a href="#3-哈希类型-hash" class="headerlink" title="3.哈希类型 hash"></a>3.哈希类型 hash</h3><ol><li><p>存储： hset key field value</p></li><li><p>获取：<br> hget key field: 获取指定的field对应的值<br> hgetall key：获取所有的field和value</p></li><li><p>删除： hdel key field</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hset myhash username lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hset myhash password 123<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hget myhash username<span class="token string">"lisi"</span>127.0.0.1:6379<span class="token operator">></span> hgetall myhash1<span class="token punctuation">)</span> <span class="token string">"username"</span>2<span class="token punctuation">)</span> <span class="token string">"lisi"</span>3<span class="token punctuation">)</span> <span class="token string">"password"</span>4<span class="token punctuation">)</span> <span class="token string">"123"</span>127.0.0.1:6379<span class="token operator">></span> hdel myhash username<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-列表类型-list"><a href="#4-列表类型-list" class="headerlink" title="4. 列表类型 list"></a>4. 列表类型 list</h3><p>可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><ol><li><p>添加：</p><ol><li>lpush key value: 将元素加入列表左表</li><li>rpush key value：将元素加入列表右边<br>```bash</li></ol></li><li><p>0.0.1:6379&gt; lpush myList a<br>(integer) 1</p></li><li><p>0.0.1:6379&gt; lpush myList b<br>(integer) 2</p></li><li><p>0.0.1:6379&gt; rpush myList c<br>(integer) 3</p><pre><code></code></pre></li><li><p>获取：<br>lrange key start end ：范围获取<br>```bash</p></li><li><p>0.0.1:6379&gt; lrange myList 0 -1</p></li></ol><ol><li>“b”</li><li>“a”</li><li>“c”<br>```</li><li>删除：<br>lpop key： 删除列表最左边的元素，并将元素返回<br>rpop key： 删除列表最右边的元素，并将元素返回</li></ol><h3 id="5-集合类型-set"><a href="#5-集合类型-set" class="headerlink" title="5. 集合类型 set"></a>5. 集合类型 set</h3><p>不允许重复元素</p><ol><li>存储：sadd key value</li><li>获取：smembers key:获取set集合中所有元素</li><li>删除：srem key value:删除set集合中的某个元素    </li></ol><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd myset a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"a"</span>127.0.0.1:6379<span class="token operator">></span> srem myset a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-有序集合类型-sortedset"><a href="#6-有序集合类型-sortedset" class="headerlink" title="6. 有序集合类型 sortedset"></a>6. 有序集合类型 sortedset</h3><p>不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><ol><li>存储：zadd key score value<br>```bash</li><li>0.0.1:6379&gt; zadd mysort 60 zhangsan<br>(integer) 1</li><li>0.0.1:6379&gt; zadd mysort 50 lisi<br>(integer) 1</li><li>0.0.1:6379&gt; zadd mysort 80 wangwu<br>(integer) 1</li><li>获取：zrange key start end [withscores]<br>​```bash</li><li>0.0.1:6379&gt; zrange mysort 0 -1</li></ol><ol><li>“lisi”</li><li>“zhangsan”</li><li>“wangwu”</li></ol><p>128.127.0.0.1:6379&gt; zrange mysort 0 -1 withscores</p><ol><li>“zhangsan”</li><li>“60”</li><li>“wangwu”</li><li>“80”</li><li>“lisi”</li><li>“500”<br>```</li><li>删除：zrem key value<br>```bash</li><li>0.0.1:6379&gt; zrem mysort lisi<br>(integer) 1<pre><code></code></pre></li></ol><h3 id="7-通用命令"><a href="#7-通用命令" class="headerlink" title="7. 通用命令"></a>7. 通用命令</h3><ol><li><code>keys * </code>: 查询所有的键</li><li><code>type key</code>： 获取键对应的value的类型</li><li><code>del key</code>：删除指定的key value</li></ol><h2 id="4-持久化"><a href="#4-持久化" class="headerlink" title="4. 持久化"></a>4. 持久化</h2><p>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。redis持久化机制：</p><h3 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h3><p><strong>默认方式，不需要进行配置，默认就使用这种机制</strong>，在一定的间隔时间中，检测key的变化情况，然后持久化数据<br>1.编辑redis.windwos.conf文件</p><pre><code>#   after 900 sec (15 min) if at least 1 key changedsave 900 1#   after 300 sec (5 min) if at least 10 keys changedsave 300 10#   after 60 sec if at least 10000 keys changedsave 60 10000</code></pre><ol start="2"><li>重新启动redis服务器，并指定配置文件名称<br>D:\redis\windows-64\redis-2.8.9&gt;redis-server.exe redis.windows.conf</li></ol><h3 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2. AOF"></a>2. AOF</h3><p>日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><ol><li>编辑redis.windwos.conf文件<br>appendonly no（关闭aof） –&gt; appendonly yes （开启aof）<pre><code># appendfsync always ： 每一次操作都进行持久化appendfsync everysec ： 每隔一秒进行一次持久化# appendfsync no     ： 不进行持久化</code></pre></li></ol><h2 id="5-Java客户端-Jedis"><a href="#5-Java客户端-Jedis" class="headerlink" title="5. Java客户端 Jedis"></a>5. Java客户端 Jedis</h2><p>Jedis: 一款java操作redis数据库的工具.</p><h3 id="1-使用步骤："><a href="#1-使用步骤：" class="headerlink" title="1.使用步骤："></a>1.使用步骤：</h3><ol><li>下载jedis的jar包</li><li>使用<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 操作</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-Jedis操作各种redis数据结构"><a href="#2-Jedis操作各种redis数据结构" class="headerlink" title="2.Jedis操作各种redis数据结构"></a>2.Jedis操作各种redis数据结构</h3><ol><li>字符串类型 string</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>String username <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以使用setex()方法存储可以指定过期时间的 key value</span>jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"activecode"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>哈希类型 hash<br>hset<br>hget<br>hgetAll</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">// 存储hash</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token string">"female"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取hash</span>String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取hash的所有map中的数据</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> user <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// keyset</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//获取value</span>    String value <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>列表类型 list ： linkedlist格式。支持重复元素<br>lpush / rpush<br>lpop / rpop<br>lrange start end : 范围获取</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">// list 存储</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从左边存</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从右边存</span><span class="token comment" spellcheck="true">// list 范围获取</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> mylist <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// list 弹出</span>String element1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element1<span class="token punctuation">)</span><span class="token punctuation">;</span>String element2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// list 范围获取</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> mylist2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mylist2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>集合类型 set  ： 不允许重复元素<br>sadd<br>smembers:获取所有元素</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">// set 存储</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// set 获取</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> myset <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>有序集合类型 sortedset：不允许重复元素，且元素有顺序<br>zadd<br>zrange</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">// sortedset 存储</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"mysortedset"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"亚瑟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"mysortedset"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">"后裔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"mysortedset"</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token string">"孙悟空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sortedset 获取</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> mysortedset <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrange</span><span class="token punctuation">(</span><span class="token string">"mysortedset"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mysortedset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-jedis连接池：-JedisPool"><a href="#3-jedis连接池：-JedisPool" class="headerlink" title="3.jedis连接池： JedisPool"></a>3.jedis连接池： JedisPool</h3><ol><li>创建JedisPool连接池对象</li><li>调用方法 getResource()方法获取Jedis连接</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//0.创建一个配置对象</span>JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.创建Jedis连接池对象</span>JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.获取连接</span>Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 使用</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token string">"heihei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4. 关闭 归还到连接池中</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JedisPool jedisPool<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取配置文件</span>        InputStream is <span class="token operator">=</span> JedisPoolUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jedis.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Properties对象</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关联文件</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取数据，设置到JedisPoolConfig中</span>        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化JedisPool</span>        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取连接方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>案例需求：</p><ol><li>提供index.html页面，页面中有一个省份 下拉列表</li><li>当 页面加载完成后 发送ajax请求，加载所有省份</li></ol><p>注意：使用redis缓存一些不经常发生变化的数据<br>数据库的数据一旦发生改变，则需要更新缓存<br>数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入<br>在service对应的增删改方法中，将redis数据删除</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的GitHub博客搭建</title>
      <link href="2020/08/28/github-blog-for-hexo/"/>
      <url>2020/08/28/github-blog-for-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p><strong>Github Pages</strong></p><p>Github Pages允许用户的任何一个Repo的gh-pages分支上的代码可以经由HTTP访问到，类似提供了静态文件服务。不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</p><ul><li>优点：</li></ul><ol><li>轻量级的博客系统，没有麻烦的配置</li><li>无需自己搭建服务器</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>可以绑定自己的域名</li></ol><ul><li>缺点：</li></ul><ol><li>使用<a href="https://github.com/mojombo/jekyll">Jekyll</a>模板系统，相当于静态页发布，适合博客，文档介绍等，动态程序的部分受限</li><li>基于Git，很多东西需要动手，不像Wordpress有强大的后台</li></ol><p><strong>Hexo</strong></p><p>Hexo是一款基于Node.js的高效静态站点生成框架，可以通过Hexo直接使用Markdown语法来撰写博客而无需关心网页源代码的具体细节，只需要用心写好你的博客内容就好了。</p><ul><li>快速开始</li></ul><pre class="line-numbers language-cmd"><code class="language-cmd">$ hexo s                # 本地预览博客$ hexo g                  # 生成博客网页文件$ hexo d                # 上传网页文件到github$ hexo new post "article title"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参考材料：</p><p><a href="https://github.com/hexojs/hexo">Hexo-Github地址</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo帮助文档</a></p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><h3 id="1-1-安装Node-js"><a href="#1-1-安装Node-js" class="headerlink" title="1.1 安装Node.js"></a>1.1 安装Node.js</h3><p><a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi">Node.js下载地址</a></p><ul><li><p>安装了Node.js会自动安装npm</p></li><li><p>cmd窗口输入<code>node -v</code>和<code>npm -v</code>验证是否安装成功</p></li><li><p>可以使用阿里的国内镜像进行加速</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2 安装Git"></a>1.2 安装Git</h3><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具</p><p><a href="https://git-scm.com/download/win">Git下载地址</a></p><ul><li>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具Git</li><li>最后一步添加路径时选择Use Git from the Windows Command Prompt，这样能直接在命令提示符里打开</li><li>安装完成后在命令提示符中输入git –version验证是否安装成功</li></ul><h3 id="1-3-安装Hexo"><a href="#1-3-安装Hexo" class="headerlink" title="1.3 安装Hexo"></a>1.3 安装Hexo</h3><ul><li>cmd窗口输入<code>npm install -g hexo</code> </li><li>安装完后输入hexo -v验证是否安装成功</li></ul><h2 id="2-本地部署Hexo"><a href="#2-本地部署Hexo" class="headerlink" title="2.本地部署Hexo"></a>2.本地部署Hexo</h2><h3 id="2-1-初始化目录"><a href="#2-1-初始化目录" class="headerlink" title="2.1 初始化目录"></a>2.1 初始化目录</h3><p>在想创建的目录下执行<code>hexo init</code>，这个命令会初始化博客的目录</p><img src="clip_image002.gif" alt="博客根目录" style="zoom:80%;" /><h3 id="2-2-全局配置"><a href="#2-2-全局配置" class="headerlink" title="2.2 全局配置"></a>2.2 全局配置</h3><p>在根目录<code>_config.yml</code>里进行全局配置</p><h3 id="2-3-本地启动"><a href="#2-3-本地启动" class="headerlink" title="2.3 本地启动"></a>2.3 本地启动</h3><pre class="line-numbers language-bash"><code class="language-bash">hexo g <span class="token comment" spellcheck="true">#生成本地public静态文件</span>hexo s <span class="token comment" spellcheck="true">#启动本地服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    进入<a href="http://localhost:4000/">http://localhost:4000/</a> 已经可以看到一篇helleworld的博客</p><h2 id="3-个性化主题"><a href="#3-个性化主题" class="headerlink" title="3.个性化主题"></a>3.个性化主题</h2><h3 id="3-1-推荐主题"><a href="#3-1-推荐主题" class="headerlink" title="3.1 推荐主题"></a>3.1 推荐主题</h3><p><a href="https://github.com/litten/hexo-theme-yilia%EF%BC%88%E4%B8%80%E4%B8%AA%E7%AE%80%E6%B4%81%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%BB%E9%A2%98%EF%BC%89">https://github.com/litten/hexo-theme-yilia（一个简洁优雅的主题）</a></p><p><a href="https://github.com/TryGhost/Casper%EF%BC%88%E5%B9%BD%E7%81%B5%E4%B8%BB%E9%A2%98%EF%BC%89">https://github.com/TryGhost/Casper（幽灵主题）</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery%EF%BC%88%E7%82%AB%E9%85%B7%EF%BC%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E6%9B%B4%E5%8F%8B%E5%A5%BD%EF%BC%89">https://github.com/blinkfox/hexo-theme-matery（炫酷，响应式更友好）</a></p><h3 id="3-2-使用步骤"><a href="#3-2-使用步骤" class="headerlink" title="3.2 使用步骤"></a>3.2 使用步骤</h3><ol><li><p>安装主题</p><p>在根目录下<code>git clone</code>你喜欢的主题的代码</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clean<span class="token function">git</span> clone https://github.com/litten/hexo-theme-yilia.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启用主题</p><p>修改根目录的<code>_config.yml</code>配置文件中的theme属性，将其设置为yilia（默认是landscape）<img src="image-20200828183406777.png" style="zoom:80%;" /></p></li><li><p>本地启动</p><pre class="line-numbers language-bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4.部署到GitHub"></a>4.部署到GitHub</h2><h3 id="4-1-创建远程仓库"><a href="#4-1-创建远程仓库" class="headerlink" title="4.1 创建远程仓库"></a>4.1 创建远程仓库</h3><ol><li><p>GitHub新建一个仓库,仓库名为    <code>用户名.github.io</code></p><p><strong>名称一定要和github用户名完全一样，比如你github用户名叫<code>abc</code>，那么仓库名为<code>abc.github.io</code>。</strong></p></li><li><p>修改根目录下的<code>_config.yml</code>配置文件</p><p>url：GitHub Pages网址<code>https://GitHub用户名.github.io</code></p></li></ol><h3 id="4-2-连接Github与本地"><a href="#4-2-连接Github与本地" class="headerlink" title="4.2 连接Github与本地"></a>4.2 连接Github与本地</h3><ol><li><p>右键打开git bash，输入命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">""</span> <span class="token comment" spellcheck="true">#用户名和邮箱根据注册github的信息修改</span><span class="token function">git</span> config --global user.email <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>生成密钥SSH key：</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>​    将生成的公钥添加到github中（头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH进行添加）</p><ol start="3"><li><p>测试，输入命令，如果如下图所示，出现用户名则成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="image-20200828192040358.png" alt="设置成功" style="zoom:80%;" /></li><li><p>打开根目录下<code>_config.yml</code>文件，修改最后一行deploy的配置，repository修改为自己的github项目地址</p><pre class="line-numbers language-bash"><code class="language-bash">deploy:- type: <span class="token function">git</span>  repository:    github: git@github.com:night-candle/night-candle.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将本地推送到GitHub远程仓库，在git bash输入以下指令</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>​    </p></li></ol><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5.补充"></a>5.补充</h2><h3 id="5-1-添加文章"><a href="#5-1-添加文章" class="headerlink" title="5.1 添加文章"></a>5.1 添加文章</h3><ol><li><p>git bash安装扩展<code>npm i hexo-deployer-git</code></p></li><li><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章</p></li><li><p>然后打开<code>\source\_posts</code>的目录，多了一个文件夹和一个<code>.md</code>文件，一个用来存放图片等数据，另一个是文章</p></li><li><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，最后输入<code>hexo d</code>上传到github上</p></li><li><p>文件头如下</p><pre><code>toc: true    # 是否有目录reward: true  # 是否有打赏title: vuex   # 标题名称tags:     # 小标签- 随笔- vue</code></pre></li></ol><h3 id="5-1-文章-Front-matter-介绍"><a href="#5-1-文章-Front-matter-介绍" class="headerlink" title="5.1 文章 Front-matter 介绍"></a>5.1 文章 Front-matter 介绍</h3><h4 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h4><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-绑定域名"><a href="#5-2-绑定域名" class="headerlink" title="5.2 绑定域名"></a>5.2 绑定域名</h3><p>打开github项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存</p><p>项目根目录会出现一个名为<code>CNAME</code>的文件。（如果没有，手动创建<code>CNAME</code>文件，注意没有后缀，然后在里面写上域名保存）</p><h3 id="5-3-添加评论功能"><a href="#5-3-添加评论功能" class="headerlink" title="5.3 添加评论功能"></a>5.3 添加评论功能</h3><ol><li><p>获取Client ID和Client Secret</p><p><a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></p></li></ol><img src="clip_image018.jpg" alt="注册" style="zoom:80%;" /><ol start="2"><li>在Settings/Developer settings/OAuth Apps中可以找到Client ID和Client Secret</li></ol><img src="clip_image020.jpg" alt="" style="zoom:80%;" /><ol start="3"><li>修改配置文件</li></ol><h3 id="5-4-备份博客源文件"><a href="#5-4-备份博客源文件" class="headerlink" title="5.4 备份博客源文件"></a>5.4 备份博客源文件</h3><ol><li>本地克隆github.io的远程仓库</li><li>创建新的远程分支，用来备份hexo源文件</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b hexo_source<span class="token function">git</span> push origin hexo_source:hexo_source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>创建忽略规则文件 <code>.gitignore</code></li></ol><p>按需添加如下内容：</p><pre><code>.DS_StoreThumbs.dbdb.json  *.log.deploy*/node_modules/.npmignorepublic/</code></pre><ol start="4"><li>添加内容到仓库并提交到远程仓库</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"first commit"</span><span class="token function">git</span> push -u origin hexo_source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按照以上的步骤就进行了 hexo 源文件的初次备份，以后每次修改了内容之后，都可通过以下几条命令实现同步</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"..."</span>     <span class="token comment" spellcheck="true"># 双引号内填写更新内容</span><span class="token function">git</span> push origin hexo_source    <span class="token comment" spellcheck="true"># 或者 git push</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://lvraikkonen.github.io/2016/05/31/%E5%88%A9%E7%94%A8Github%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BDHexo%E6%BA%90%E6%96%87%E4%BB%B6/">原教程</a></p><p>​    </p><p>​    </p><h3 id="4-5-常见问题及解答"><a href="#4-5-常见问题及解答" class="headerlink" title="4.5 常见问题及解答"></a>4.5 常见问题及解答</h3><h4 id="4-5-1-文章预览显示过长"><a href="#4-5-1-文章预览显示过长" class="headerlink" title="4.5.1 文章预览显示过长"></a>4.5.1 文章预览显示过长</h4><p>手动在文章内部加上<code>&lt;!-- more --&gt;</code></p><img src="clip_image014.jpg" alt="" style="zoom:80%;" /><p>​    </p><h4 id="4-5-2-代码块中的-无法解析问题解决"><a href="#4-5-2-代码块中的-无法解析问题解决" class="headerlink" title="4.5.2 代码块中的{}无法解析问题解决"></a>4.5.2 代码块中的<code>&#123;&#125;</code>无法解析问题解决</h4><p><code>node_modules/hexo-prism-plugin/src/index.js</code>文件中<code>map</code>里未支持大括号，加上对应字符即可</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//添加的代码</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span>        <span class="token comment" spellcheck="true">//添加的代码</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h4 id="4-5-3-为什么本地预览没问题，push到github上就显示不正常？"><a href="#4-5-3-为什么本地预览没问题，push到github上就显示不正常？" class="headerlink" title="4.5.3 为什么本地预览没问题，push到github上就显示不正常？"></a>4.5.3 为什么本地预览没问题，push到github上就显示不正常？</h4><p>这个问题可能原因有很多，有可能github博客的仓库名称没有和github名字完全一样，如github名字叫<code>abc</code>，那么仓库名字一定要是<code>abc.github.io</code></p><p>​    </p><h4 id="4-5-4-公式显示问题"><a href="#4-5-4-公式显示问题" class="headerlink" title="4.5.4 公式显示问题"></a>4.5.4 公式显示问题</h4><p>​    </p><p>​    </p><h3 id="4-6-个性化设置"><a href="#4-6-个性化设置" class="headerlink" title="4.6 个性化设置"></a>4.6 个性化设置</h3><h4 id="4-6-1-动态标签栏"><a href="#4-6-1-动态标签栏" class="headerlink" title="4.6.1 动态标签栏"></a>4.6.1 动态标签栏</h4><p>在<code>theme/matery/layout/layout.ejs</code>下添加如下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span> <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Σ(っ °Д°;)っ喔哟，崩溃啦！"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"φ(゜▽゜*)♪咦，又好了！"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文章头设置、添加404页面、文章头设置、“关于”页面增加、解决mathjax与代码高亮的冲突、增加建站时间……</p><blockquote><p>未完待续……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring入门笔记</title>
      <link href="2020/08/24/spring-study/"/>
      <url>2020/08/24/spring-study/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringIoC-amp-DI"><a href="#SpringIoC-amp-DI" class="headerlink" title="SpringIoC&amp;DI"></a>SpringIoC&amp;DI</h1><h2 id="1-spring概述"><a href="#1-spring概述" class="headerlink" title="1. spring概述"></a>1. spring概述</h2><h3 id="1-1-Spring是什么"><a href="#1-1-Spring是什么" class="headerlink" title="1.1 Spring是什么"></a>1.1 Spring是什么</h3><p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 <strong>IoC</strong>（<code>Inverse Of Control</code>）和 <strong>AOP</strong>（<code>Aspect Oriented Programming</code>）为内核</p><p>spring理念使现有的技术更加容易使用，提供了<strong>展现层 SpringMVC</strong>和<strong>持久层 Spring JDBCTemplate</strong>以及<strong>业务层事务管理</strong>等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架</p><p><a href="https://spring.io/projects/spring-framework#overview">官网</a>        <a href="https://github.com/spring-projects/spring-framework">Github</a></p><p>Maven仓库：导入webmvc包会自动导入相关依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><h3 id="1-2-Spring的优势"><a href="#1-2-Spring的优势" class="headerlink" title="1.2 Spring的优势"></a>1.2 Spring的优势</h3><p>①方便解耦，简化开发</p><p>②AOP 编程的支持</p><p>③声明式事务的支持</p><p>④方便程序的测试</p><p>⑤方便集成各种优秀框架</p><p>⑥降低JavaEE API的使用难度</p><h3 id="1-3-Spring的体系结构（了解）"><a href="#1-3-Spring的体系结构（了解）" class="headerlink" title="1.3 Spring的体系结构（了解）"></a>1.3 Spring的体系结构（了解）</h3><p><img src="%E5%9B%BE%E7%89%8729.png" alt="Spring体系"></p><h2 id="2-spring快速入门"><a href="#2-spring快速入门" class="headerlink" title="2. spring快速入门"></a>2. spring快速入门</h2><h3 id="2-1-Spring程序开发步骤"><a href="#2-1-Spring程序开发步骤" class="headerlink" title="2.1 Spring程序开发步骤"></a>2.1 Spring程序开发步骤</h3><img src="image-20200903230655967.png" alt="开发步骤" style="zoom: 60%;" /><p>①导入 Spring 开发的基本包坐标</p><p>②编写 Dao 接口和实现类</p><p>③创建 Spring 核心配置文件</p><p>④在 Spring 配置文件中配置 UserDaoImpl</p><p>⑤使用 Spring 的 API 获得 Bean 实例</p><h3 id="2-2-导入Spring开发的基本包坐标"><a href="#2-2-导入Spring开发的基本包坐标" class="headerlink" title="2.2 导入Spring开发的基本包坐标"></a>2.2 导入Spring开发的基本包坐标</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--导入spring的context坐标，context依赖core、beans、expression--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-编写Dao接口和实现类"><a href="#2-3-编写Dao接口和实现类" class="headerlink" title="2.3 编写Dao接口和实现类"></a>2.3 编写Dao接口和实现类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao save method running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-创建Spring核心配置文件"><a href="#2-4-创建Spring核心配置文件" class="headerlink" title="2.4 创建Spring核心配置文件"></a>2.4 创建Spring核心配置文件</h3><p>在类路径下（resources）创建applicationContext.xml配置文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>                        xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"    http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans                       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd"<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-在Spring配置文件中配置UserDaoImpl"><a href="#2-5-在Spring配置文件中配置UserDaoImpl" class="headerlink" title="2.5 在Spring配置文件中配置UserDaoImpl"></a>2.5 在Spring配置文件中配置UserDaoImpl</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>    http://www.springframework.org/schema/beans                       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-使用Spring的API获得Bean实例"><a href="#2-6-使用Spring的API获得Bean实例" class="headerlink" title="2.6 使用Spring的API获得Bean实例"></a>2.6 使用Spring的API获得Bean实例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span>               <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             UserDao userDao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Spring配置文件"><a href="#3-Spring配置文件" class="headerlink" title="3. Spring配置文件"></a>3. Spring配置文件</h2><p>知识要点</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token punctuation">></span></span>标签    id属性：Bean实例在Spring容器中的唯一标识，不允许允许    class属性：要实例化的Bean的全限定名    scope属性:Bean的作用范围    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>标签：属性注入        name属性：属性名称        value属性：注入的普通属性值        ref属性：注入的对象引用值        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>标签     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span><span class="token punctuation">></span></span>标签：导入其他的配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-Bean标签基本配置"><a href="#3-1-Bean标签基本配置" class="headerlink" title="3.1 Bean标签基本配置"></a>3.1 Bean标签基本配置</h3><blockquote><p>用于配置对象交由Spring 来创建</p><p>默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功</p></blockquote><p>基本属性：</p><p>id：Bean实例在Spring容器中的唯一标识</p><p>class：Bean的全限定名称</p><h3 id="3-2-Bean标签范围配置"><a href="#3-2-Bean标签范围配置" class="headerlink" title="3.2 Bean标签范围配置"></a>3.2 Bean标签范围配置</h3><p>scope:指对象的作用范围，取值如下： </p><table><thead><tr><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td><strong>singleton</strong></td><td>默认值，单例的</td></tr><tr><td><strong>prototype</strong></td><td>多例的</td></tr><tr><td>request</td><td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   request   域中</td></tr><tr><td>session</td><td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   session   域中</td></tr><tr><td>global   session</td><td>WEB   项目中，应用在   Portlet   环境，如果没有   Portlet   环境那么globalSession   相当于   session</td></tr></tbody></table><p>①当scope的取值为singleton时</p><p>​      Bean的实例化个数：1个</p><p>​      Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p><p>​      Bean的生命周期：</p><p>​        对象创建：当应用加载，创建容器时，对象就被创建了</p><p>​        对象运行：只要容器在，对象一直活着</p><p>​        对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p><p>②当scope的取值为prototype时</p><p>​      Bean的实例化个数：多个</p><p>​      Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p>​          对象创建：当使用对象时，创建新的对象实例</p><p>​          对象运行：只要对象在使用中，就一直活着</p><p>​          对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p><h3 id="3-3-Bean生命周期配置"><a href="#3-3-Bean生命周期配置" class="headerlink" title="3.3 Bean生命周期配置"></a>3.3 Bean生命周期配置</h3><p>init-method：指定类中的初始化方法名称</p><p>destroy-method：指定类中销毁方法名称</p><h3 id="3-4-Bean实例化三种方式"><a href="#3-4-Bean实例化三种方式" class="headerlink" title="3.4 Bean实例化三种方式"></a>3.4 Bean实例化三种方式</h3><p>①使用无参构造方法实例化</p><p>​      它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 工厂静态方法实例化</p><p>​      工厂的静态方法返回Bean实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFactoryBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserDao <span class="token function">createUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.factory.StaticFactoryBean<span class="token punctuation">"</span></span>       <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createUserDao<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>③工厂实例方法实例化</p><p>​      工厂的非静态方法返回Bean实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicFactoryBean</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> UserDao <span class="token function">createUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.factory.DynamicFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createUserDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5-Bean的依赖注入入门"><a href="#3-5-Bean的依赖注入入门" class="headerlink" title="3.5 Bean的依赖注入入门"></a>3.5 Bean的依赖注入入门</h3><p>①创建 UserService，UserService 内部在调用 UserDao的save() 方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span>                  <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      UserDao userDao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②将 UserServiceImpl 的创建权交给 Spring</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>③从 Spring 容器中获得 UserService 进行操作</p><pre class="line-numbers language-java"><code class="language-java">ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![批注 2020-09-04 162341](.\spring-study\批注 2020-09-04 162341.png)<img src=".%5Cspring-study%5Cimage-20200904210629063.png" alt="image-20200904210629063"></p><h3 id="3-6-Bean的依赖注入概念"><a href="#3-6-Bean的依赖注入概念" class="headerlink" title="3.6 Bean的依赖注入概念"></a>3.6 Bean的依赖注入概念</h3><p><img src="./spring-study/image-20200904210524105.png" alt="image-20200904210524105"></p><p><img src=".%5Cspring-study%5Cimage-20200904210125795.png" alt="image-20200904210125795"></p><p>依赖注入<code>Dependency Injection</code>：它是 Spring 框架核心 IOC 的具体实现</p><p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p><p>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</p><p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</p><p>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取</p><h3 id="3-7-Bean的依赖注入方式"><a href="#3-7-Bean的依赖注入方式" class="headerlink" title="3.7 Bean的依赖注入方式"></a>3.7 Bean的依赖注入方式</h3><p>①构造方法</p><p>​      创建有参构造</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserServiceImpl</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token function">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​      配置Spring容器调用有参构造时进行注入</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>②set方法</p><p>​      在UserServiceImpl中添加setUserDao方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​      配置Spring容器调用set方法进行注入</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>set方法:P命名空间注入</p><p>​      P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下：</p><p>​      首先，需要引入P命名空间：</p><pre class="line-numbers language-xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​      其次，需要修改注入方式</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>userDao-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-8-Bean的依赖注入的数据类型"><a href="#3-8-Bean的依赖注入的数据类型" class="headerlink" title="3.8 Bean的依赖注入的数据类型"></a>3.8 Bean的依赖注入的数据类型</h3><p>上面的操作，都是注入的<code>引用Bean</code>，除了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。</p><p>注入数据的三种数据类型 </p><ul><li><p>普通数据类型</p></li><li><p>引用数据类型</p></li><li><p>集合数据类型</p></li></ul><p>其中引用数据类型此处不再赘述，之前的操作都是对UserDao对象的引用进行注入的，下面将以set方法注入为例，演示普通数据类型和集合数据类型的注入。</p><p><strong>Bean的依赖注入的数据类型</strong></p><p>①普通数据类型的注入（set方法注入）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String company<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompany</span><span class="token punctuation">(</span>String company<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>company<span class="token operator">+</span><span class="token string">"==="</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao save method running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>company<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>宵烛<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> ②集合数据类型（List<String>）的注入</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> strList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> strList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strList <span class="token operator">=</span> strList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strList<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao save method running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>strList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③集合数据类型（List<User>）的注入</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userList <span class="token operator">=</span> userList<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao save method running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--&lt;bean class="com.itheima.domain.User"/>            &lt;bean class="com.itheima.domain.User"/>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④集合数据类型（ Map&lt;String,User&gt; ）的注入</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>User<span class="token operator">></span> userMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> userMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMap <span class="token operator">=</span> userMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao save method running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤集合数据类型（Properties）的注入</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Properties properties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao save method running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-9-引入其他配置文件（分模块开发）"><a href="#3-9-引入其他配置文件（分模块开发）" class="headerlink" title="3.9 引入其他配置文件（分模块开发）"></a>3.9 引入其他配置文件（分模块开发）</h3><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicationContext-xxx.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-spring相关API"><a href="#4-spring相关API" class="headerlink" title="4. spring相关API"></a>4. spring相关API</h2><h3 id="4-1-ApplicationContext的继承体系"><a href="#4-1-ApplicationContext的继承体系" class="headerlink" title="4.1 ApplicationContext的继承体系"></a>4.1 ApplicationContext的继承体系</h3><p>applicationContext：接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p><img src=".\spring-study\image-20200904221440212.png" alt="image-20200904221440212" style="zoom:80%;" /><h3 id="4-2-ApplicationContext的实现类"><a href="#4-2-ApplicationContext的实现类" class="headerlink" title="4.2 ApplicationContext的实现类"></a>4.2 ApplicationContext的实现类</h3><p>①ClassPathXmlApplicationContext </p><p>​      它是从类的根路径下加载配置文件 推荐使用这种</p><p>②FileSystemXmlApplicationContext </p><p>​      它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p><p>③AnnotationConfigApplicationContext</p><p>​      当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p><h3 id="4-3-getBean-方法使用"><a href="#4-3-getBean-方法使用" class="headerlink" title="4.3 getBean()方法使用"></a>4.3 getBean()方法使用</h3><p><em>源码</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>      <span class="token function">assertBeanFactoryActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>                       <span class="token function">assertBeanFactoryActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p><p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错</p><p><strong>getBean()方法使用</strong></p><pre class="line-numbers language-java"><code class="language-java">ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span>             <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserService userService1 <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserService userService2 <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="spring注解开发"><a href="#spring注解开发" class="headerlink" title="spring注解开发"></a>spring注解开发</h1><h2 id="1-Spring配置数据源"><a href="#1-Spring配置数据源" class="headerlink" title="1.Spring配置数据源"></a>1.Spring配置数据源</h2><h3 id="1-1-数据源（连接池）的作用"><a href="#1-1-数据源（连接池）的作用" class="headerlink" title="1.1 数据源（连接池）的作用"></a>1.1 数据源（连接池）的作用</h3><p>数据源(连接池)是提高程序性能如出现的</p><p>事先实例化数据源，初始化部分连接资源</p><p>使用连接资源时从数据源中获取</p><p>使用完毕后将连接资源归还给数据源</p><p>常见的数据源(连接池)：DBCP、C3P0、BoneCP、Druid等</p><p><strong>开发步骤</strong></p><p>①导入数据源的坐标和数据库驱动坐标</p><p>②创建数据源对象</p><p>③设置数据源的基本连接数据</p><p>④使用数据源获取连接资源和归还连接资源</p><h3 id="1-2-数据源的手动创建"><a href="#1-2-数据源的手动创建" class="headerlink" title="1.2 数据源的手动创建"></a>1.2 数据源的手动创建</h3><p>①导入c3p0和druid的坐标</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- C3P0连接池 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Druid连接池 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>①导入mysql数据库驱动坐标</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mysql驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.39<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②创建C3P0连接池</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testC3P0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建数据源</span>    ComboPooledDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置数据库连接参数</span>    dataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得连接对象</span>    Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②创建Druid连接池</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDruid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建数据源</span>    DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置数据库连接参数</span>    dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得连接对象</span>    Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③提取jdbc.properties配置文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>④读取jdbc.properties配置文件创建连接池</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testC3P0ByProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加载类路径下的jdbc.properties</span>    ResourceBundle rb <span class="token operator">=</span> ResourceBundle<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ComboPooledDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbc.driver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbc.url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbc.username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbc.password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-Spring配置数据源"><a href="#1-3-Spring配置数据源" class="headerlink" title="1.3 Spring配置数据源"></a>1.3 Spring配置数据源</h3><p>可以将DataSource的创建权交由Spring容器去完成</p><p>DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的</p><p>DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试从容器当中获取数据源</p><pre class="line-numbers language-java"><code class="language-java">ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span>            <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               DataSource dataSource <span class="token operator">=</span> <span class="token punctuation">(</span>DataSource<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-抽取jdbc配置文件"><a href="#1-4-抽取jdbc配置文件" class="headerlink" title="1.4 抽取jdbc配置文件"></a>1.4 抽取jdbc配置文件</h3><p>applicationContext.xml加载jdbc.properties配置文件获得连接信息。</p><p>首先，需要引入context命名空间和约束路径：</p><p>命名空间：xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context&quot;</a></p><p>约束路径：<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a><br>​                   <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-知识要点"><a href="#1-5-知识要点" class="headerlink" title="1.5 知识要点"></a>1.5 知识要点</h3><p>Spring容器加载properties文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${key}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Spring注解开发"><a href="#2-Spring注解开发" class="headerlink" title="2. Spring注解开发"></a>2. Spring注解开发</h2><h3 id="2-1-Spring原始注解"><a href="#2-1-Spring原始注解" class="headerlink" title="2.1 Spring原始注解"></a>2.1 Spring原始注解</h3><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。 </p><p>Spring原始注解主要是替代<Bean>的配置</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td>使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td>@Value</td><td>注入普通属性</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><p>注意：</p><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置注解的组件扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用@Compont或@Repository标识UserDaoImpl需要Spring进行实例化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Component("userDao")</span><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"save running... ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化</p><p>使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Component("userService")</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*@Autowired    @Qualifier("userDao")*/</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用@Value进行字符串的注入</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"注入普通数据"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String str<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"save running... ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用@Scope标注Bean的范围</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Scope("prototype")</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//此处省略代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化方法...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@PreDestroy</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁方法....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Spring新注解"><a href="#2-2-Spring新注解" class="headerlink" title="2.2 Spring新注解"></a>2.2 Spring新注解</h3><p>使用上面的注解还不能全部替代xml配置文件，还需要使用注解替代的配置如下：</p><p>非自定义的Bean的配置：<bean></p><p>加载properties文件的配置：<a href="context:property-placeholder">context:property-placeholder</a></p><p>组件扫描的配置：<a href="context:component-scan">context:component-scan</a></p><p>引入其他文件：<import></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring   配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring   在初始化容器时要扫描的包。   作用和在 Spring   的 xml 配置文件中的   &lt;context:component-scan   base-package=”com.itheima”/&gt;一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到   Spring   容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties   文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><p>@Configuration</p><p>@ComponentScan</p><p>@Import</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>DataSourceConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@PropertySource</p><p>@value</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbc.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Bean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PropertyVetoException <span class="token punctuation">{</span>     ComboPooledDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试加载核心配置类创建Spring容器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnnoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span>           <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>        applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DataSource dataSource <span class="token operator">=</span> <span class="token punctuation">(</span>DataSource<span class="token punctuation">)</span>     applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Spring整合Junit"><a href="#3-Spring整合Junit" class="headerlink" title="3. Spring整合Junit"></a>3. Spring整合Junit</h2><h3 id="3-1-原始Junit测试Spring的问题"><a href="#3-1-原始Junit测试Spring的问题" class="headerlink" title="3.1 原始Junit测试Spring的问题"></a>3.1 原始Junit测试Spring的问题</h3><p>在测试类中，每个测试方法都有以下两行代码：</p><pre class="line-numbers language-java"><code class="language-java"> ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> IAccountService as <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">,</span>IAccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉。</p><h3 id="3-2-上述问题解决思路"><a href="#3-2-上述问题解决思路" class="headerlink" title="3.2 上述问题解决思路"></a>3.2 上述问题解决思路</h3><p>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它</p><p>将需要进行测试Bean直接在测试类中进行注入</p><h3 id="3-3-Spring集成Junit步骤"><a href="#3-3-Spring集成Junit步骤" class="headerlink" title="3.3 Spring集成Junit步骤"></a>3.3 Spring集成Junit步骤</h3><p>①导入spring集成Junit的坐标</p><p>②使用@Runwith注解替换原来的运行期</p><p>③使用@ContextConfiguration指定配置文件或配置类</p><p>④使用@Autowired注入需要测试的对象</p><p>⑤创建测试方法进行测试</p><h3 id="3-4-Spring集成Junit代码实现"><a href="#3-4-Spring集成Junit代码实现" class="headerlink" title="3.4 Spring集成Junit代码实现"></a>3.4 Spring集成Junit代码实现</h3><p>①导入spring集成Junit的坐标</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②使用@Runwith注解替换原来的运行期</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringJunitTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>③使用@ContextConfiguration指定配置文件或配置类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//加载spring核心配置文件</span><span class="token comment" spellcheck="true">//@ContextConfiguration(value = {"classpath:applicationContext.xml"})</span><span class="token comment" spellcheck="true">//加载spring核心配置类</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringJunitTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④使用@Autowired注入需要测试的对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringJunitTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤创建测试方法进行测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringJunitTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring集成Junit步骤</p><p>①导入spring集成Junit的坐标</p><p>②使用@Runwith注解替换原来的运行期</p><p>③使用@ContextConfiguration指定配置文件或配置类</p><p>④使用@Autowired注入需要测试的对象</p><p>⑤创建测试方法进行测试    </p><h1 id="spring-AOP"><a href="#spring-AOP" class="headerlink" title="spring AOP"></a>spring AOP</h1><h2 id="1-Spring-的-AOP-简介"><a href="#1-Spring-的-AOP-简介" class="headerlink" title="1.Spring 的 AOP 简介"></a>1.Spring 的 AOP 简介</h2><h4 id="1-1-什么是-AOP"><a href="#1-1-什么是-AOP" class="headerlink" title="1.1 什么是 AOP"></a>1.1 什么是 AOP</h4><p>AOP(Aspect Oriented Programming)面向切面编程是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p><p>AOP 是 OOP 的延续，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="1-2-AOP-的作用及其优势"><a href="#1-2-AOP-的作用及其优势" class="headerlink" title="1.2 AOP 的作用及其优势"></a>1.2 AOP 的作用及其优势</h4><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</p><p>优势：减少重复代码，提高开发效率，并且便于维护</p><h4 id="1-3-AOP-的底层实现"><a href="#1-3-AOP-的底层实现" class="headerlink" title="1.3 AOP 的底层实现"></a>1.3 AOP 的底层实现</h4><p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p><h4 id="1-4-AOP-的动态代理技术"><a href="#1-4-AOP-的动态代理技术" class="headerlink" title="1.4 AOP 的动态代理技术"></a>1.4 AOP 的动态代理技术</h4><p>常用的动态代理技术</p><p>JDK 代理 : 基于接口的动态代理技术</p><p>cglib 代理：基于父类的动态代理技术</p><p><img src="D:/Desktop/img2/图片1.png"></p><h4 id="1-5-JDK-的动态代理"><a href="#1-5-JDK-的动态代理" class="headerlink" title="1.5 JDK 的动态代理"></a>1.5 JDK 的动态代理</h4><p>①目标类接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TargetInterface</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>②目标类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token keyword">implements</span> <span class="token class-name">TargetInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Target running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③动态代理代码</p><pre class="line-numbers language-java"><code class="language-java">Target target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建目标对象</span><span class="token comment" spellcheck="true">//创建代理对象</span>TargetInterface proxy <span class="token operator">=</span> <span class="token punctuation">(</span>TargetInterface<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>             <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置增强代码..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置增强代码..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④  调用代理对象的方法测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试,当调用接口的任何方法时，代理对象的代码都无序修改</span>proxy<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="D:/Desktop/img/图片2.png"></p><h4 id="1-6-cglib-的动态代理"><a href="#1-6-cglib-的动态代理" class="headerlink" title="1.6 cglib 的动态代理"></a>1.6 cglib 的动态代理</h4><p>①目标类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Target running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②动态代理代码</p><pre class="line-numbers language-java"><code class="language-java">Target target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建目标对象</span>Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建增强器</span>enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置父类</span>enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//设置回调</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span>     MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置代码增强...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置代码增强...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Target proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Target<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建代理对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③调用代理对象的方法测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试,当调用接口的任何方法时，代理对象的代码都无序修改</span>proxy<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src=".%5Cspring-study%5C%E5%9B%BE%E7%89%873.png"></p><h4 id="1-7-AOP-相关概念"><a href="#1-7-AOP-相关概念" class="headerlink" title="1.7 AOP 相关概念"></a>1.7 AOP 相关概念</h4><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p><p>在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：</p><ul><li><p>Target（目标对象）：代理的目标对象</p></li><li><p>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</p></li><li><p>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</p></li><li><p>Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</p></li><li><p>Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</p></li><li><p>Aspect（切面）：是切入点和通知（引介）的结合</p></li><li><p>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</p></li></ul><p>1.8 AOP 开发明确的事项</p><p>1.8 AOP 开发明确的事项</p><h4 id="1-8-AOP-开发明确的事项"><a href="#1-8-AOP-开发明确的事项" class="headerlink" title="1.8 AOP 开发明确的事项"></a>1.8 AOP 开发明确的事项</h4><h5 id="1-需要编写的内容"><a href="#1-需要编写的内容" class="headerlink" title="1)需要编写的内容"></a>1)需要编写的内容</h5><ul><li><p>编写核心业务代码（目标类的目标方法）</p></li><li><p>编写切面类，切面类中有通知(增强功能方法)</p></li><li><p>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</p></li></ul><h5 id="2）AOP-技术实现的内容"><a href="#2）AOP-技术实现的内容" class="headerlink" title="2）AOP 技术实现的内容"></a>2）AOP 技术实现的内容</h5><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p><h5 id="3）AOP-底层使用哪种代理方式"><a href="#3）AOP-底层使用哪种代理方式" class="headerlink" title="3）AOP 底层使用哪种代理方式"></a>3）AOP 底层使用哪种代理方式</h5><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p><h4 id="1-9-知识要点"><a href="#1-9-知识要点" class="headerlink" title="1.9 知识要点"></a>1.9 知识要点</h4><ul><li><p>aop：面向切面编程</p></li><li><p>aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理</p></li><li><p>aop的重点概念：</p><pre><code>Pointcut（切入点）：被增强的方法Advice（通知/ 增强）：封装增强业务逻辑的方法Aspect（切面）：切点+通知Weaving（织入）：将切点与通知结合的过程</code></pre></li><li><p>开发明确事项：</p><pre><code>谁是切点（切点表达式配置）谁是通知（切面类中的增强方法）将切点和通知进行织入配置</code></pre></li></ul><h2 id="2-基于-XML-的-AOP-开发"><a href="#2-基于-XML-的-AOP-开发" class="headerlink" title="2. 基于 XML 的 AOP 开发"></a>2. 基于 XML 的 AOP 开发</h2><h4 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h4><p>①导入 AOP 相关坐标</p><p>②创建目标接口和目标类（内部有切点）</p><p>③创建切面类（内部有增强方法）</p><p>④将目标类和切面类的对象创建权交给 spring</p><p>⑤在 applicationContext.xml 中配置织入关系</p><p>⑥测试代码</p><p>①导入 AOP 相关坐标</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入spring的context坐标，context依赖aop--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- aspectj的织入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②创建目标接口和目标类（内部有切点）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TargetInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token keyword">implements</span> <span class="token class-name">TargetInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Target running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③创建切面类（内部有增强方法）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置增强方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置代码增强....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④将目标类和切面类的对象创建权交给 spring</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置目标类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.aop.Target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置切面类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.aop.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>⑤在 applicationContext.xml 中配置织入关系</p><p>导入aop命名空间</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤在 applicationContext.xml 中配置织入关系</p><p>配置切点表达式和前置增强的织入关系</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引用myAspect的Bean为切面对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置Target的method方法执行时要进行myAspect的before方法前置增强--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(public void com.itheima.aop.Target.method())<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑥测试代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TargetInterface target<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        target<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑦测试结果</p><p><img src="D:/Desktop/img/图片4.png"></p><h4 id="2-2-XML-配置-AOP-详解"><a href="#2-2-XML-配置-AOP-详解" class="headerlink" title="2.2 XML 配置 AOP 详解"></a>2.2 XML 配置 AOP 详解</h4><h5 id="1-切点表达式的写法"><a href="#1-切点表达式的写法" class="headerlink" title="1) 切点表达式的写法"></a>1) 切点表达式的写法</h5><p>表达式语法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 包名<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>访问修饰符可以省略</p></li><li><p>返回值类型、包名、类名、方法名可以使用星号*  代表任意</p></li><li><p>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</p></li><li><p>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</p></li></ul><p>例如：</p><pre class="line-numbers language-xml"><code class="language-xml">execution(public void com.itheima.aop.Target.method())    execution(void com.itheima.aop.Target.*(..))execution(* com.itheima.aop.*.*(..))execution(* com.itheima.aop..*.*(..))execution(* *..*.*(..))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-通知的类型"><a href="#2-通知的类型" class="headerlink" title="2) 通知的类型"></a>2) 通知的类型</h5><p>通知的配置语法：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;aop:通知类型 method=“切面类中方法名” pointcut=“切点表达式"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>通知类型</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src=".%5Cspring-study%5C%E5%9B%BE%E7%89%875.png"></p><h5 id="3-切点表达式的抽取"><a href="#3-切点表达式的抽取" class="headerlink" title="3) 切点表达式的抽取"></a>3) 切点表达式的抽取</h5><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引用myAspect的Bean为切面对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itheima.aop.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-知识要点"><a href="#2-3-知识要点" class="headerlink" title="2.3 知识要点"></a>2.3 知识要点</h4><ul><li>aop织入的配置</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span>“切面类”</span><span class="token punctuation">></span></span>        &lt;aop:before method=“通知方法名称” pointcut=“切点表达式"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通知的类型：前置通知、后置通知、环绕通知、异常抛出通知、最终通知</li><li>切点表达式的写法：</li></ul><pre class="line-numbers language-xml"><code class="language-xml">execution([修饰符] 返回值类型 包名.类名.方法名(参数))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-基于注解的-AOP-开发"><a href="#3-基于注解的-AOP-开发" class="headerlink" title="3.基于注解的 AOP 开发"></a>3.基于注解的 AOP 开发</h2><h4 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1 快速入门"></a>3.1 快速入门</h4><p>基于注解的aop开发步骤：</p><p>①创建目标接口和目标类（内部有切点）</p><p>②创建切面类（内部有增强方法）</p><p>③将目标类和切面类的对象创建权交给 spring</p><p>④在切面类中使用注解配置织入关系</p><p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p><p>⑥测试</p><p>①创建目标接口和目标类（内部有切点）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TargetInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token keyword">implements</span> <span class="token class-name">TargetInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Target running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②创建切面类（内部有增强方法)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置增强方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置代码增强....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③将目标类和切面类的对象创建权交给 spring</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token keyword">implements</span> <span class="token class-name">TargetInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Target running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"myAspect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置代码增强....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④在切面类中使用注解配置织入关系</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"myAspect"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.aop.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置代码增强....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--组件扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.aop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--aop的自动代理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑥测试代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TargetInterface target<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        target<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑦测试结果</p><p><img src="D:/Desktop/img/图片6.png"></p><h4 id="3-2-注解配置-AOP-详解"><a href="#3-2-注解配置-AOP-详解" class="headerlink" title="3.2 注解配置 AOP 详解"></a>3.2 注解配置 AOP 详解</h4><h5 id="1-注解通知的类型"><a href="#1-注解通知的类型" class="headerlink" title="1) 注解通知的类型"></a>1) 注解通知的类型</h5><p>通知的配置语法：@通知注解(“切点表达式”)</p><p><img src="D:/Desktop/img/图片7.png"></p><h5 id="2-切点表达式的抽取"><a href="#2-切点表达式的抽取" class="headerlink" title="2) 切点表达式的抽取"></a>2) 切点表达式的抽取</h5><p>同 xml配置<br>aop 一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法，在该方法上使用@Pointcut注解定义切点表达式，然后在在增强注解中进行引用。具体如下：</p><pre class="line-numbers language-java"><code class="language-java">@<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"myAspect"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"MyAspect.myPoint()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置代码增强....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.aop.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-知识要点"><a href="#3-3-知识要点" class="headerlink" title="3.3 知识要点"></a>3.3 知识要点</h4><ul><li>注解aop开发步骤</li></ul><p>①使用@Aspect标注切面类</p><p>②使用@通知注解标注通知方法</p><p>③在配置文件中配置aop自动代理<a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy/</a></p><ul><li>通知注解类型</li></ul><p><img src="D:/Desktop/img/图片8.png"></p><h1 id="JdbcTemplate基本使用"><a href="#JdbcTemplate基本使用" class="headerlink" title="JdbcTemplate基本使用"></a>JdbcTemplate基本使用</h1><h2 id="01-JdbcTemplate基本使用-概述-了解"><a href="#01-JdbcTemplate基本使用-概述-了解" class="headerlink" title="01-JdbcTemplate基本使用-概述(了解)"></a>01-JdbcTemplate基本使用-概述(了解)</h2><p>JdbcTemplate是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。例如：操作关系型数据的JdbcTemplate和HibernateTemplate，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等等。</p><h2 id="02-JdbcTemplate基本使用-开发步骤-理解"><a href="#02-JdbcTemplate基本使用-开发步骤-理解" class="headerlink" title="02-JdbcTemplate基本使用-开发步骤(理解)"></a>02-JdbcTemplate基本使用-开发步骤(理解)</h2><p>①导入spring-jdbc和spring-tx坐标</p><p>②创建数据库表和实体</p><p>③创建JdbcTemplate对象</p><p>④执行数据库操作</p><h2 id="03-JdbcTemplate基本使用-快速入门代码实现-应用"><a href="#03-JdbcTemplate基本使用-快速入门代码实现-应用" class="headerlink" title="03-JdbcTemplate基本使用-快速入门代码实现(应用)"></a>03-JdbcTemplate基本使用-快速入门代码实现(应用)</h2><p>导入spring-jdbc和spring-tx坐标</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>itheima_spring_jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>itheima_spring_jdbc Maven Webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- FIXME change it to the project's website --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建数据库表和实体</p><p><img src="D:\Desktop\img2\1.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> money<span class="token punctuation">;</span>    <span class="token keyword">public</span> String getNa <span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Account{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", money="</span> <span class="token operator">+</span> money <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建JdbcTemplate对象</p><p>执行数据库操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">//测试JdbcTemplate开发步骤</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PropertyVetoException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建数据源对象</span>        ComboPooledDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JdbcTemplate jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据源对象  知道数据库在哪</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行操作</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"insert into account values(?,?)"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-JdbcTemplate基本使用-spring产生模板对象分析-理解"><a href="#04-JdbcTemplate基本使用-spring产生模板对象分析-理解" class="headerlink" title="04-JdbcTemplate基本使用-spring产生模板对象分析(理解)"></a>04-JdbcTemplate基本使用-spring产生模板对象分析(理解)</h2><p>我们可以将JdbcTemplate的创建权交给Spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DataSource注入到JdbcTemplate模版对象中,然后通过Spring容器获得JdbcTemplate对象来执行操作。</p><h2 id="05-JdbcTemplate基本使用-spring产生模板对象代码实现-应用"><a href="#05-JdbcTemplate基本使用-spring产生模板对象代码实现-应用" class="headerlink" title="05-JdbcTemplate基本使用-spring产生模板对象代码实现(应用)"></a>05-JdbcTemplate基本使用-spring产生模板对象代码实现(应用)</h2><p>配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--数据源对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jdbc模板对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">//测试Spring产生jdbcTemplate对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PropertyVetoException <span class="token punctuation">{</span>        ApplicationContext app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JdbcTemplate jdbcTemplate <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>JdbcTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"insert into account values(?,?)"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc-properties）-应用"><a href="#06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc-properties）-应用" class="headerlink" title="06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc.properties）(应用)"></a>06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc.properties）(应用)</h2><p>将数据库的连接信息抽取到外部配置文件中，和spring的配置文件分离开，有利于后期维护</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件修改为:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--加载jdbc.properties--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--数据源对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jdbc模板对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="07-JdbcTemplate基本使用-常用操作-更新操作-应用"><a href="#07-JdbcTemplate基本使用-常用操作-更新操作-应用" class="headerlink" title="07-JdbcTemplate基本使用-常用操作-更新操作(应用)"></a>07-JdbcTemplate基本使用-常用操作-更新操作(应用)</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Account<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BeanPropertyRowMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateCRUDTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改更新</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update account set money=? where name=?"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"delete from account where name=?"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="08-JdbcTemplate基本使用-常用操作-查询操作-应用"><a href="#08-JdbcTemplate基本使用-常用操作-查询操作-应用" class="headerlink" title="08-JdbcTemplate基本使用-常用操作-查询操作(应用)"></a>08-JdbcTemplate基本使用-常用操作-查询操作(应用)</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Account<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BeanPropertyRowMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateCRUDTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//聚合查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Long count <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select count(*) from account"</span><span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询一个</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Account account <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select * from account where name=?"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询所有</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accountList <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accountList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="09-JdbcTemplate基本使用-知识要点-理解，记忆"><a href="#09-JdbcTemplate基本使用-知识要点-理解，记忆" class="headerlink" title="09-JdbcTemplate基本使用-知识要点(理解，记忆)"></a>09-JdbcTemplate基本使用-知识要点(理解，记忆)</h2><p>①导入spring-jdbc和spring-tx坐标</p><p>②创建数据库表和实体</p><p>③创建JdbcTemplate对象</p><pre><code>        JdbcTemplate jdbcTemplate = newJdbcTemplate();              jdbcTemplate.setDataSource(dataSource);</code></pre><p>④执行数据库操作</p><pre><code>更新操作：    jdbcTemplate.update (sql,params)查询操作：    jdbcTemplate.query (sql,Mapper,params)jdbcTemplate.queryForObject(sql,Mapper,params)</code></pre><h1 id="声明式事务控制"><a href="#声明式事务控制" class="headerlink" title="声明式事务控制"></a>声明式事务控制</h1><h2 id="1-编程式事务控制相关对象"><a href="#1-编程式事务控制相关对象" class="headerlink" title="1. 编程式事务控制相关对象"></a>1. 编程式事务控制相关对象</h2><h3 id="1-1-PlatformTransactionManager"><a href="#1-1-PlatformTransactionManager" class="headerlink" title="1.1 PlatformTransactionManager"></a>1.1 PlatformTransactionManager</h3><p>PlatformTransactionManager 接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法。</p><p><img src="D:\Desktop\img2\2.png" alt="1554628587457"></p><p>注意：</p><p>PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类，例如：Dao 层技术是jdbc 或 mybatis 时：org.springframework.jdbc.datasource.DataSourceTransactionManager </p><p>Dao 层技术是hibernate时：org.springframework.orm.hibernate5.HibernateTransactionManager</p><h3 id="1-2-TransactionDefinition"><a href="#1-2-TransactionDefinition" class="headerlink" title="1.2 TransactionDefinition"></a>1.2 TransactionDefinition</h3><p>TransactionDefinition 是事务的定义信息对象，里面有如下方法：</p><p><img src="D:\Desktop\img2\3.png" alt="1554628676150"></p><h4 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1. 事务隔离级别"></a>1. 事务隔离级别</h4><p>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读。</p><ul><li><p>ISOLATION_DEFAULT</p></li><li><p>ISOLATION_READ_UNCOMMITTED</p></li><li><p>ISOLATION_READ_COMMITTED</p></li><li><p>ISOLATION_REPEATABLE_READ</p></li><li><p>ISOLATION_SERIALIZABLE</p></li></ul><h4 id="2-事务传播行为"><a href="#2-事务传播行为" class="headerlink" title="2. 事务传播行为"></a>2. 事务传播行为</h4><ul><li><p><strong>REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</strong></p></li><li><p><strong>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</strong></p></li><li><p>MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常</p></li><li><p>REQUERS_NEW：新建事务，如果当前在事务中，把当前事务挂起。</p></li><li><p>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</p></li><li><p>NEVER：以非事务方式运行，如果当前存在事务，抛出异常</p></li><li><p>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作</p></li><li><p>超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</p></li><li><p>是否只读：建议查询时设置为只读</p></li></ul><h3 id="1-3-TransactionStatus"><a href="#1-3-TransactionStatus" class="headerlink" title="1.3 TransactionStatus"></a>1.3 TransactionStatus</h3><p>TransactionStatus 接口提供的是事务具体的运行状态，方法介绍如下。</p><p><img src="D:\Desktop\img2\4.png" alt="1554628857200"></p><h3 id="1-4-知识要点"><a href="#1-4-知识要点" class="headerlink" title="1.4 知识要点"></a>1.4 知识要点</h3><p>编程式事务控制三大对象</p><ul><li><p>PlatformTransactionManager</p></li><li><p>TransactionDefinition</p></li><li><p>TransactionStatus</p></li></ul><h2 id="2-基于-XML-的声明式事务控制"><a href="#2-基于-XML-的声明式事务控制" class="headerlink" title="2 基于 XML 的声明式事务控制"></a>2 基于 XML 的声明式事务控制</h2><h3 id="2-1-什么是声明式事务控制"><a href="#2-1-什么是声明式事务控制" class="headerlink" title="2.1 什么是声明式事务控制"></a>2.1 什么是声明式事务控制</h3><p>Spring 的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明，用在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务。</p><p><strong>声明式事务处理的作用</strong></p><ul><li><p>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可</p></li><li><p>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便</p></li></ul><p><strong>注意：Spring 声明式事务控制底层就是AOP。</strong></p><h3 id="2-2-声明式事务控制的实现"><a href="#2-2-声明式事务控制的实现" class="headerlink" title="2.2 声明式事务控制的实现"></a>2.2 声明式事务控制的实现</h3><p>声明式事务控制明确事项：</p><ul><li><p>谁是切点？</p></li><li><p>谁是通知？</p></li><li><p>配置切面？</p></li></ul><p>①引入tx命名空间</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/tx         http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②配置事务增强</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--平台事务管理器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--事务增强配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③配置事务 AOP 织入</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--事务的aop增强--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④测试事务控制转账业务代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String outMan<span class="token punctuation">,</span> String inMan<span class="token punctuation">,</span> <span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>    accountDao<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>outMan<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    accountDao<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>inMan<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-切点方法的事务参数的配置"><a href="#2-3-切点方法的事务参数的配置" class="headerlink" title="2.3 切点方法的事务参数的配置"></a>2.3 切点方法的事务参数的配置</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--事务增强配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<a href="tx:method">tx:method</a> 代表切点方法的事务参数的配置，例如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transfer<span class="token punctuation">"</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REPEATABLE_READ<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>name：切点方法名称</p></li><li><p>isolation:事务的隔离级别</p></li><li><p>propogation：事务的传播行为</p></li><li><p>timeout：超时时间</p></li><li><p>read-only：是否只读</p></li></ul><h3 id="2-4-知识要点"><a href="#2-4-知识要点" class="headerlink" title="2.4 知识要点"></a>2.4 知识要点</h3><p><strong>声明式事务控制的配置要点</strong></p><ul><li><p>平台事务管理器配置</p></li><li><p>事务通知的配置</p></li><li><p>事务aop织入的配置</p></li></ul><h2 id="3-基于注解的声明式事务控制"><a href="#3-基于注解的声明式事务控制" class="headerlink" title="3 基于注解的声明式事务控制"></a>3 基于注解的声明式事务控制</h2><h3 id="3-1-使用注解配置声明式事务控制"><a href="#3-1-使用注解配置声明式事务控制" class="headerlink" title="3.1 使用注解配置声明式事务控制"></a>3.1 使用注解配置声明式事务控制</h3><ol><li>编写 AccoutDao</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span>String outMan<span class="token punctuation">,</span> <span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update account set money=money-? where name=?"</span><span class="token punctuation">,</span>money<span class="token punctuation">,</span>outMan<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span>String inMan<span class="token punctuation">,</span> <span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update account set money=money+? where name=?"</span><span class="token punctuation">,</span>money<span class="token punctuation">,</span>inMan<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编写 AccoutService</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AccountDao accountDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isolation <span class="token operator">=</span> Isolation<span class="token punctuation">.</span>READ_COMMITTED<span class="token punctuation">,</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String outMan<span class="token punctuation">,</span> String inMan<span class="token punctuation">,</span> <span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accountDao<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>outMan<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        accountDao<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>inMan<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>编写 applicationContext.xml 配置文件</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!—之前省略datsSource、jdbcTemplate、平台事务管理器的配置--</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--组件扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--事务的注解驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-注解配置声明式事务控制解析"><a href="#3-2-注解配置声明式事务控制解析" class="headerlink" title="3.2 注解配置声明式事务控制解析"></a>3.2 注解配置声明式事务控制解析</h3><p>①使用 @Transactional 在需要进行事务控制的类或是方法上修饰，注解可用的属性同 xml 配置方式，例如隔离级别、传播行为等。</p><p>②注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置。</p><p>③使用在方法上，不同的方法可以采用不同的事务参数配置。</p><p>④Xml配置文件中要开启事务的注解驱动<code>&lt;tx:annotation-driven /&gt;</code></p><h3 id="3-3-知识要点-1"><a href="#3-3-知识要点-1" class="headerlink" title="3.3 知识要点"></a>3.3 知识要点</h3><p><strong>注解声明式事务控制的配置要点</strong></p><ul><li><p>平台事务管理器配置（xml方式）</p></li><li><p>事务通知的配置（@Transactional注解配置）</p></li><li><p>事务注解驱动的配置 <code>&lt;tx:annotation-driven/&gt;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总</title>
      <link href="2020/02/16/sort-algorithms/"/>
      <url>2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>题目练习</strong>：<a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组">LeetCode 912. 排序数组</a> </p><p>​    </p><p>​    </p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><p>​    </p><p>​    </p><p><strong>冒泡排序</strong></p><p><em>Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, <strong>compares adjacent elements and swaps them if they are in the wrong order</strong>. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements “bubble” to the top of the list.</em></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>    FALSE<span class="token punctuation">,</span>    TRUE<span class="token punctuation">}</span> Boolean<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//FALSE为0，TRUE为1</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>SeqList R<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//自下向上扫描对R做冒泡排序</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    Boolean exchange<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//交换标志</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//最多做n-1趟排序</span>        exchange <span class="token operator">=</span> FALSE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//本趟排序开始前，交换标志应为假</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//对当前无序区R[i‥n] 自下向上扫描</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                                                    <span class="token comment" spellcheck="true">//两两比较，满足条件交换记录</span>                R<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                exchange <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发生了交换，故将交换标志置为真</span>            <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exchange<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//本趟排序未发生交换，提前终止算法</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><p><strong>选择排序</strong>  </p><p><em>In computer science, <strong>selection sort</strong> is an in-place comparison sorting algorithm. It has an O(( n^2​ )) time complexity, which makes it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity and has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited.</em></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span>SeqList R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//做第i趟排序（1≤i≤n-1）</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">,</span> R<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    </p><p><strong>插入排序</strong> </p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓存</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据后移</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://en.wikipedia.org/wiki/Insertion_sort">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong>  </p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> q<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">do</span> i <span class="token operator">++</span> <span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j <span class="token operator">--</span> <span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://en.wikipedia.org/wiki/Quicksort">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong> </p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i <span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tmp<span class="token punctuation">[</span>k <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j <span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i <span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j <span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">,</span> j <span class="token operator">++</span> <span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://en.wikipedia.org/wiki/Merge_sort">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//==========大根堆调整函数=======</span><span class="token keyword">void</span> <span class="token function">Heapify</span><span class="token punctuation">(</span>SeqList R<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> large<span class="token punctuation">;</span>    RecType temp <span class="token operator">=</span> R<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>large<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>low<span class="token punctuation">;</span>large<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> large<span class="token operator">*</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>large <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>large<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>large <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            large<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>key <span class="token operator">>=</span> R<span class="token punctuation">[</span>large<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>large<span class="token punctuation">]</span><span class="token punctuation">;</span>        low <span class="token operator">=</span> large<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    R<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==========构造大根堆==========</span><span class="token keyword">void</span> <span class="token function">BuildHeap</span><span class="token punctuation">(</span>SeqList R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Heapify</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==========堆排序===========</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>SeqList R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">BuildHeap</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        R<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> R<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">Heapify</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://en.wikipedia.org/wiki/Heapsort">https://en.wikipedia.org/wiki/Heapsort</a></p><p>​    </p><p>​    </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
